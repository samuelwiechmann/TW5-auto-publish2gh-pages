created: 20180710231747592
modified: 20180710231747592
title: C:\Users\Samuel Wiechmann\understand\wiki\tiddlers\favicon.ico
tmap.id: 8f671f8c-e1b0-4904-bf16-a109e6029e20
type: image/x-icon

created: 20180621193255882
modified: 20180621193255882
title: C:\Users\Samuel Wiechmann\understand\wiki\tiddlers\favicon.ico
tmap.id: ff31aa0c-9875-4682-95ca-ac89cc85d269
type: image/x-icon

Y3JlYXRlZDogMjAxODA2MTQwODM1Mjk1MzIKbW9kaWZpZWQ6IDIwMTgwNjE0MDgzNTI5NTMyCnRpdGxlOiBDOlxVc2Vyc1xTYW11ZWwgV2llY2htYW5uXHVuZGVyc3RhbmRcd2lraVx0aWRkbGVyc1xmYXZpY29uLmljbwp0bWFwLmlkOiA0YTZmZGY1Ny1mYjUzLTRiMjktOTYwZi1lM2UwZjc2Yjk4NDUKdHlwZTogaW1hZ2UveC1pY29uCgpZM0psWVhSbFpEb2dNakF4T0RBMU1qa3hNalF4TURZNE9Ea0tiVzlrYVdacFpXUTZJREl3TVRnd05USTVNVEkwTVRBMk9EZzVDblJwZEd4bE9pQkRPbHhWYzJWeWMxeFRZVzExWld3Z1YybGxZMmh0WVc1dVhIVnVaR1Z5YzNSaGJtUmNkMmxyYVZ4MGFXUmtiR1Z5YzF4bVlYWnBZMjl1TG1samJ3cDBiV0Z3TG1sa09pQm1PV1ZqWTJNeU1pMW1OakF4TFRSaFlXVXRPVEptT0MwMFpUVXdZekl6T0RJek5USUtkSGx3WlRvZ2FXMWhaMlV2ZUMxcFkyOXVDZ3BaTTBwc1dWaFNiRnBFYjJkTmFrRjRUMFJCTVUxVVZYZE9lbFV6VGtSWmVrMUVhMHRpVnpscllWZGFjRnBYVVRaSlJFbDNUVlJuZDA1VVJURk5SR014VG5wUk1rMTZRVFZEYmxKd1pFZDRiRTlwUWtSUGJIaFdZekpXZVdNeGVGUlpWekV4V2xkM1oxWXliR3haTW1oMFdWYzFkVmhJVm5WYVIxWjVZek5TYUdKdFVtTmtNbXh5WVZaNE1HRlhVbXRpUjFaNVl6RjRiVmxZV25CWk1qbDFURzFzYW1KM2NEQmlWMFozVEcxc2EwOXBRWHBhUjBacldrUm5NRTU1TURSYVJFNXNURlJSZWsxNlRYUlBWRkpyVDBNd01VOVVWbXBOYW1zMVRVUmthMWxVVlV0a1NHeDNXbFJ2WjJGWE1XaGFNbFYyWlVNeGNGa3lPWFZEWjNCYVRUQndjMWRXYUZOaVJuQkZZakprVG1GclJqUlVNRkpDVFZVeFJWUllhRkJTUmxWM1ZGZHdhazFWTVhGVFZYUnBWbnBzY2xsV1pHRmpSbkJZVlZSYVNsSkZiRE5VVmxKdVpEQTFWVkZZY0U1V1IyTjRWR3RTU2swd05WVlRXR3hFWW14S2QxcEZaRFJpUlRsd1VXdFNVR0pJYUZkWmVrcFhaVmROZUdWR1VscFdla1Y0VjJ4a00xb3hXWGxpUjNoYVRXMW9NRmRXWXpGa1ZtaEpWbTVXWVZJeFdqVlplazVUWVVkS2RGVnRUbXROYlhoNVdWWmFORTFIUmxoVmJYUnBVakZhTlZsNlJqUmlWbXhaVjI1Q1drMXFiREZVUnpGellXMUtNMk5FUW1sV01Gb3pWRWN4YzJFd09YQlJiWGhRVWtkTmVsZFVTa2RoVlRWRVRWZDRZV0ZzU25SVVJsSlRZV3MxVlZOWVVsQlNSMlEwVkcxcmQwMHdOVFpYYlhCUFVqQnJlRlJzVWtwTlJUVllVMVYwYTFOSGVETlhiRkoyV2pKR1dFMVhhR0ZOYkZZeVdsVk5lR05HYTNsUFdGWkVXak5DWVZSVVFuZGpNV1JYWVVaT2FWSnVRa1paYWtwclZHMUdjbEpxVWxWTlJrcERWRlZWZUdOV1VsbGhSa0pYVWxkemVGWkhlRk5YYlZGM1RsUmFWMVpZVW5CV2JuQnpZMnhzVjFwSFJtcFNia0paVmxaU1lWTnNTa1ppUkU1VlZteEtkVnBFUVRGU1ZrNVpZMFUxVjFJelVURldSRVpUVm1zeGNrMVZWbHBsYTFwRldXMTRTMlF4Y0VaYVJGSnBVbFJzZDFWWGRGTlZSMHBKWVVaa1dtVnJjRmhhVm1ST1pVZFdSMVZzY0ZkbGExWTBWako0YTAweGIzaFhXR3hwVWpOb1lWUlhNVzlOUm1SWFdYcEdhMVp0YUVwV2JUVlhXVlpKZUZkcVZscGxhelZVV1ZWa1MyUkdWblJVYlhST1lsaG9OVmRXV21GT1JURklVbXhvVm1KWVVuQlZha1poVGxac05sSnFVbWxXYlhoYVZqSTFRMWRyTVhGaVJFWlZVbnBHZWxsWE1VdE5NazVGVVcxc1YwMUdiM3BXUldONFl6SkZkMDlZUWxKWFIxSmhXbGQ0Um1ReFVuUmpSMFpvVmxSVk1WUlZhR3RaVjBaeVYyNUdWVkpzU2xOVVZWVjRWbGRGZWxWc1FsZE5XRUozVmpJeGNtVkhSbkpPVlZaU1ZrWmFhRlpyVmtabFJsSnhVMnRrYUZKVWJGWldSbFl3WVRGT1NHVkVUbGhpUmtveVYycEtSMWRGTVZoaFIwWk9Za1paZVZkc1ZrNWxSMDVIWVROc1VGZEdXa1ZYYWs1RFdWWlNWVkZ1WkdwTlYxSllXVlZhVDJGV1NuVlJhMXBhWVd0d2NsWkhNVWRqYkVweFZXeFdUbEpyY0VSV1JsWldaVVphVjFKc2JHbFNWRlpVVld4V1drMUdXa2hrUms1VFlYcEdWMVJXVW1GWlZURkpWVzVDVjJKdVFucFpNbmh6VmpGd1NGSnRjRk5pYTBwYVZteGFVMWxXVG5OVGExcHBVa1UxVmxadGVFdGtWbkJGVVZSR1UxWnJjRnBYYTFVeFlVZEZkMWRZY0ZkU2JIQlVWbGN4VjFKck5WZFdiRlpYVW10d1JsZFhNVFJUTWxGNFkwVmFZVkpHU25CVmJGSnpaREZXV0dSR1RsWlNNSEJLV1ZWYWExZHRWbkpqUm1oaFZtMVNUMXBWWkZkU01WWnpZMFprYkdFeFdUQldha28wWVRBd2VHSXphRmhYUjNod1ZXcE9iMWxXVWxoTlZ6bE9VbTFTV0ZkWWNFZGhNVnAwWVVWd1YySlVWbGhYVmxwS1pVWmtjVlpzY0d4aGVsWlZWMVpXYTFNeVVrZFdibEpWWWxoU1QxbHNhRzlPVm1SWFYyMUdUMUpVUmtsVmJYaHZWbTFLV1ZWdVFsWmhhMXBvVkd4YWMwNXNTbkZWYld4WFlsaG9ZVlpxU1RGUk1XUnlUVmhHYVZKRldsWlZibkJIWld4c1dFMVZkRTVOYXpWR1ZWY3hjMVl3TVVkaU0zQlhVbGRPTkZsNlNrWmtNRGxaVVd4S1dGSXhTbWhYYkdRMFVqQTFWMXBJVGxaaE1YQlBXVmh3VjFKV1VsZFpNMmhhVmpCd1dGa3dhRk5XVmtwelUyeE9WVlpzY0hwWk1WcFhWMVpXYzJOR1pGTmhNV3Q0Vm10a01GUnRVWGxXYmtwT1UwZDRWRlpyVlRGWlZuQllaVVphYTAxV1NsaFdWekF4VkRGYVZXSkdXbGhXUlVsM1dWUkdUMU5IVmtWVWJHaHBVbXR2ZVZZeWNFdFNNV1JHVFZab2FGSXdXazlaYTFwYVpWWmtjMVpyTld4U01EVklXVlJPYzFWR1pFZFhhMVpZWVdzMVJGZFdXbE5XVmtaMVdrZHdUbFl4U2xsWFZsWmhWREpHVjFOdVZsSmhNWEJoV1ZkMGQyTnNXa2hOVldScVlrVndlRlpYZUZkVWJFcHlZMFZTVjFKc1dsZGFWVnBMVmpGd1IySkhhRk5XUjNoVlZsZDRZVmRyTVVkWGEyUmhVMGRTVlZsWWNFZFdNVkpYVm14a1YwMVdjRnBXVnpWRFZqSktkVkZ1Y0ZwTmJtaDZWbXBHZDFOR1NuUmpSazVwWVRCd1lWWnRlR0ZWTVd4WFZHNU9WR0V4Y0hCVmExVXhWbXhhZEdWRmRHdFdia0pHVlZaU1IxVXhXbkpYYkZwV1RXNU5lRlpxUmt0amJHUlZVV3hrVTJKSVFsVldWRWw0VmpGYWNrNVdaRmRpUlhCWVZXeGFkMUpzWkZoTlZGSlVUV3hHTkZrd1ZtRlpWa3BIVTI1Q1ZtSkdTbnBhUkVaWFYwZFNSMVJzV2xOTlNFSkxWMVpXWVdFeFpIUldia3BxVW0xb2FGWnRNVk5VTVhCV1drWmtVMDFXV25wWk1GcHJZa2RGZUZkVVFsZGhhMjh3V1ZSQmQyVkhTWHBoUm1oWVVqTm9kMVpYY0U5aU1XeFhWV3hvVGxaNmJFOVZiVEZUVjBaa1dXTkZaR2hOVm5Bd1dWVldkMVl5U2xWV2JHaFlWbXh3UzFwVldtdGpWbHB6WTBkNGFHVnNXbFpXTVZwWFlURk5lVlZyWkZkaWJFcFdXV3hvVTFReGJITmhSemxQVm0xU1dGWXlNVWRVTVVwVlVtdHNWbUpZYUhaV2JURkxWMVpXZFZGc1dtaGhNWEJ2VmtkNFlXTXdOWE5UYmtaV1lsZDRXRmxzYUc5WlZscHhVMVJHVWsxWFVubFVWbWhIWVZaS1JsZHNXbFppYmtKSVdsZDRjMWRGTVZaa1JUVk9ZWHBXUjFaV1kzaGpNVmwzVFZWa2FVMHpRbGhWYkdSUFRrWnNObE5yV210TlJHeGFWVmQ0UzJGV1pFWlRiRXBYVmpOQ1NGa3lNVmRqTVZaWldrZEdVMVpIZUhaV1JsWlRVakpSZUZWc1dsWmhNRFZXVkZaYWQxSXhiSEpWYlVaWFZtdHdlbFV5ZUZOWGJVVjRZMFJPVjJKR2NESmFWM2hYWXpKT1NHSkdaR2xUUlVrd1ZtMXdSMkl5VG5SVldHeFhZVEZ3VUZadGVHRmhSbFp4VTJwU2FGSnNXbmhWVnpWTFlrWktkRlZxUWxwTlJuQm9XV3RhUzJSSFZrZFhiR2hYVWxWc00xZFdVa2RVTVU1SVZtdFdWV0pIYUhCVmJYUjJaVlpaZVdORmRGTk5WMUpIVkZaYWIyRkdTWGRYYXpsYVlURndZVnBXV210ak1WcHlUbGQ0VTAxRVZrbFhWbEpQWXpGV1IxcEZaRmhoTVZwWldWZHpNVkpHWkZkWGJFNVhWbXRhTVZkclpIZFViRmw0VTJ4c1dGWnNXbWhXUkVwSFZqRk9kVlpzU21oTldFSm9WMVprTUdReVRuTlhhMmhPVmxkU2NWbHJWbmRsUmxwWVpVWmtWV0pGY0hsWk1GWlRWakZLYzFkc1pHRldWbkJNVm1wR2EyTXlTa2hTYkU1b1RVaENXbFpzWkRSaE1EQjNUVlZrV0dFeWFITlZiWE14Vm14c1dXTkZUazVOVmtZMFZqSjRhMVl4V25OalJuQlhWbnBXUkZacVNrdGtWa1oxWTBad1RtSnRhRFpXYlhCSFpERk9SMU51VW1wU2F6VndXVlJDZDFsV1duUmxSMFpXVFZkNFdGWkhOVTlXUjBWNFkwaENWbUV4VlhoV2JYaGhaRWRXUm1SSGRGZGlhMHBIVmxaYVUxSXhWWGhYYmtwWVlrWndWMWxzYUU1bFJscFZVbXR3YkdKR1dsWlZiWGhyVlRKS1NWRnNWbGRpVkVJMFZtcEtUMk5yTlZkV2JHaHBWakpvVUZaR1VrTlRNVXB6V2tab1RsWkdTbFZVVjNoSFRrWnJkMVp0UmxwV2EzQklWVEkxUTFadFNrZFRibkJoVWtWYVdGWXdaRk5TTVZKelYyeE9UbE5GU2t4V01WcFhXVmRGZUZwSVVsZGlhM0J4VlcweGIyRkdXblJOVms1VlRWaENWMWRyV210Vk1ERlhWMjV3V2sxR2NISlphMlJHWlVaa1ZWRnNaR2hoTWpoM1YxWlNRbVF5VmtoVFdIQm9VbTFvV1ZWcVRtOWtNVnBZWTBVNWFVMVhlRmhXVjNodlZHeGFObUpGT1ZaaVZFWlVWakJhYTFkWFRrWmFSMmhPVm01QmQxZFdWbGRrTVZsNVUyeFdWMkpIYUZsV2JYaDNVekZ3VmxkdGRHcFdiSEI2V1RCa05HRkhWbk5YYkZwWFRWWndXRmxVUms1bFZsWnlXa1prYVdKRmNGZFhWM2h2VlRGUmVHSklUbWhTZW14UVZtMHhVMWRHV1hsTlZXUlZUVlZ3VmxWdGRITldiVXBaWVVoYVYySlVSa3hXTVZwWFpGWkdjMWR0YUdoTldFSjJWbXRrTkZsWFRYZE9XRTVVWW10YVYxbHNaRFJYUm14ellVYzVXbFpzY0hoVk1WSkhWV3N4V0ZWdWJGVldiV2hJV1ZaYVMxSnNaSE5YYkZwcFltdEtTVmRzWkRSak1XUkdUVlphYTFKVVZrOVpXSEJYVWpGYVYxa3phR3BOVm13elZGWldhMkZWTUhwUmJHaFdZa2RTVUZSclduTk9iRTV5VjIxMFRsSkhlR0ZXVm1RMFV6RlplRk5zYkZKaVYyaFpWbTB4VWsxR1ZqWlRhelZzVW01Q1NsWlhNWGRWTVZwSVpVaGFWMVo2UVhoVlZFWmhWakZXYzFkc1dtaE5SRlpZVmxjeE5HTXdNSGhYV0d4T1VrWmFXRlp0ZEhkbGJGVjVaVVpPV0dKR2NIcFpNRkpQV1ZaS1YyTkdRbGROVm5CWVdYcEdSMk14VW5OVWJXaE9WbXhyZDFadE1YZFRNREZIVlc1U1YyRXlhRlZaYTFwM1ZWWmFjMWR0UmxaTlYzaDZXVlZqTlZaVk1WZGpTR2hXWWxSV2NsbFVSa3RqTVU1MVkwWm9hRTFXY0c5V2EyUTBVekZhVjFkdVJsSmlSMUpVV1d0YWMwMHhaRmRWYTJSVlRWVTFTVlp0ZEZkV1YwcElZVWhDVm1KWVVqSmFWbHBhWlZkT1JtUkdUazVXTVVwSVZrWmFZV0l5UmtkVFdHUllZWHBzWVZsVVJuZFpWbkJYVjIxMGFrMVdjSGxVYkdRMFZUQXhSVlpyYkZoV2JFcFFXWHBHVjFJeGNFWmFSbWhvVFZad1dsZFdaSHBOVmtwSFdrWmtXR0pGTlZoV2JYUmhUVlprY2xwSVpGVmlSbXcwVlRKNGMxZEdXbk5YYldoWFVrVndTRlpxUms5a1ZscHpVMjFvVGxkRlNtOVdNVnByVFVkUmVWUnVUbGhoTW1oUFZteGtVMk5XYkhKV2JtUnNVbXh3V1ZwVldtdFdWMHBHWTBoc1drMUdXbFJXYWtaTFl6RmtjMXBIUmxkV2JrSk5WbTF3UjFsWFRYbFRhMmhvVW1zMVdGVnRlSGROYkZsNFYyeE9WRTFFUWpOVVZsWnJWMGRGZVZWdE9WWk5SMUpVVm1wR2MxZFhUa2RhUms1T1ZtdHdXVmRXVmxkaE1WbDRVMjVPYWxKdVFsaFdibkJYVWtaYWNWTnJkR3RXYTFveFdUQmFkMVJ0U25SaFJGcFhZbGhDU0ZwRVJrOVNNVTUxVlcxd1UyRjZWbmRYVmxKRFpERnNWMWR1VW14U01GcFhWRlprTkZkR1draE9WVGxYVWpCV05Ga3dhRU5XYlVWNFZsaG9WMkpZYUdoYVJXUlhVbTFTU0dSR1pHbGhNSEJJVm14YVlWVXhTWGhXV0doWVltdHdXVmxyV25kV01WcHhWR3MxYkZKc2NIaFZiWFF3VjBaSmVGTlVTbFppV0doeVZsUktTMU5XUm5OV2JHUm9UV3hKTWxkc1ZtRlRNazV5VDFaa1dHSkhVbkJWYlhSM1YyeGFXR05GT1dsTlZYQjZWMnRhYjFSc1drZFRiRlpWVmpOb1NGUnJXbkprTVZwMFVteHdWMkV6UWtsV1ZFa3hVVEZhZEZOclpGUmlia0pvVld0V1lWZEdXWGRhUms1VFRWWktlbFl5ZUU5VWJFNUdVMnQ0VjAxV2NGaFhWbVJHWlVad1NWVnNaR2xoTTBKNFZsY3dlR0l5UmtkWGJsSk9WbXMxVmxSV2FFTldNV1J5VjIxMFZrMUVSbGhXTWpWM1Yyc3hSMk5JU2xwaE1sSkhXbFZhYTFaV1JuTmFSMmhvVFdwb00xWXhXbE5SYlZGNVZtdG9WRmRJUW05VmJURnZWMVpXY1ZSdE9XdE5WbkJaV1RCVk5XRlZNVmhsUm1oWFZqTm9kbFpIZUdGT2JVcEdUMVphYVZaRldsVldha0poWVRGa1dGUnJXbUZTTW1oUFZtMDFRbVF4WkZkV2JHUnJUVlpzTlZVeWVGZFdNa3BJWVVac1YySllhRE5WZWtaM1ZteGtkR1JIY0ZkaVNFSTJWMVJDYTA1SFJraFdiazVZWWtad1dGUldXbmRYUm14VlVtczFiRlpzV25sWGExcHJZVmRLUm1OR1pGaFdNMmgyVmxSR1VtVkhTa2xVYldoVFpXMTRVVlp0TUhoVk1XUkhWMWhzVGxaWFVsWlVWbFozVm14V2RHUklUbGRpVlhCYVdWVm9ZVll5U2xWU2EzaFhUVlp3V0ZwR1drZGpNV1IwWVVkb1RsZEZTakpXYlhSclRrWnNXRlJZWkU5WFJUVlZXVzEwWVZZeGJITmFSRkpZVW0xNGVsbFZZelZYYkZwelkwaG9WazFXU2toV1YzTjRWMFpXZFdKR1ZsZGlWMmhKVjFaYVlWTXhTbk5hU0U1WVlrWndjRmx0ZEV0VFZtUnpXa1JTYWsxWFVrZFVWbHBoWVRGS1ZWWnJPVnBYU0VKWVZXcEdZVll4YTNwaFIzQk9WbTEzZWxaR1dsZGhNa1pXVFVod1VtSkhhRmRaYTJSVFZVWlNjbGR1VGs5aVJUVjVWakl4TUZSc1NraGxSMFpYVm0xUk1GVjZSbHBsUms1MVUyMXdVMkV6UWxsWFYzaHZWVEZrUjFkdVJsSlhSMUp6VlcwMVExTkdiRlphU0dSV1RXdHdTbFZYZUVkV01WbDZZVVpTVm1GcmNGTmFWVnBYWXpGd1NGSnNUbXhpV0doWVZtdGFhMDVHYkZaTlZXUllZa2RvVUZac1ZURlhSbHAwWkVoa2JHSkdWalZhVlZVMVYyeGFjMk5JY0ZkaVdFSlFWMVphWVdNeVRrZFJiR1JPVm01Q1dWZFljRWRTTWsxNFZXNU9WV0pYZUZWVmJGWmFaV3hhZEUxVVFscFdNRlkxVmtjMVUxWnNaRWhsUm1oYVZrVndWRmt3V2xka1IxWklVbXhvVjJKWWFEWldiR1F3WVRKR1IxTnVUbXBUUjNoWVdXeG9iMkZHYkhKYVJYUlVVbXhhTVZscldtdFdNREI1V2pOd1YyRXhTa2hYVm1SVFZqRktkVkpzU21sU2JrSlFWbTB4TkdNd01IaGFSbVJXWVRKU1ZsUldWVEZUVmxwMFpFWmtWMVl3Y0VsWlZXaERWbTFLV1ZWcVNtRldiSEJoV2xaa1QxSnRVa2RVYXpWWFRWVndTVlpyV21GWlYwbDVVbXRrVkZkSFVsbFpXSEJ6V1Zac1ZWSnVaRnBXYmtKWVZqSXhNR0ZyTVZkalNHeFZZa2RSTUZaVVFYaFNWbHB5WWtab1YySkZjRkZYV0hCSFZqRkplR05GV21GU2JXaHZWRlphZDFkc1pGZGFTSEJPVm10d1NGZHJXbXRYUjBwR1RsWm9WMkpZVW1oVVZscHJZMnh3U1ZwR1ZtbFNiWGN3VmxSS05HTXhaRWRYYms1WVlsZG9XRlZyVm5kVFJscHhVbXM1YTFac2NIcFZNakZ2Vkd4a1JsTnRPVmROVm5CeVZGVmtVbVZXVW5WVWJHaG9UVzFvVUZadGVHdFZNazVYWWtoS1YySnRVbk5WYlhoM1YxWndWbGR0ZEZkV01IQkhXVEJvYzFkck1VZFhiRkpYVFVkU1RGVXdXbGRqVm1SMFVteGtWMDFWY0ZKV2JURjNVakZSZVZSWWJGUmhNbWh2Vlcxek1WZEdWblJsU0dSWVlrWndlbGRyVWxOWGJGcHpZMFJDVjFadGFIWldNR1JHWlZaV2MyRkdjR2hOVmxZMFZtcEdZV015VFhoYVNGSlRZbGhvV0ZsclZuZE9iR1JYVm14a2FFMVdiRFZWTW5ScllXeEtkVkZzYUZkaWJrSllWV3RhWVdOV1RuSmtSM1JYWVRGdmVGZFVRbUZrTVZKMFUyNVNhRkpHY0ZoWmJHaERVMFp3UlZKck9WTk5WVFV4VmxjeGQxVXlSalpXYm1SWVZteEtSRnBFUm5OV01XUjFWVzE0VTAxR2NGaFdSbHByVGtaa1IxZHJhRTlXVkd4WVZXcENWMDVHYTNkaFJVNVhZbFZXTkZac2FHOVdNa3BaWVVkb1lWSlhVbGhWYlRGVFUwZFNSMXBIYkdoTlNFSkpWbTE0WVZsWFNYbFRXR2hXVjBkNFZWbFVSbmRWUmxwMFRsVk9XbFpzY0hwV01uaGhZa1pLYzJOSWFGWmlXRkYzVm1wQmVGZEdWbk5YYkZwWFRUSm9lVlpzVWtkVE1WcDBWR3RrVjJKSFVsaFpiRnBLVFd4a2MxWnRkRlZOYXpWNVZGWmFhMVl5U2toaFNFSldZV3R3ZGxZeFdtRlhSMVpIV2tkMFRsWllRalpXTW5SaFlqRlNjMWRyWkZSaVJscFdWbXBPYjFOR1VuSlhia3ByVFZad01GVnRlSGRXTWtWNlVXdHNWMVpGYTNoVlZFWmhaRVpPY2xwR1VtbGlhMHB2VmxkMFYxbFdaRWRYV0dSaFVtczFWRlJXV2t0bGJGbDVaVVU1VldKRk5VZFZNblEwVmpBeFYyTkdhRmhXYlZKSFdsVmFkMU5XVm5OYVIyeG9UVEJLTkZac1kzZGxSMGw1VW10a1dHSnNTazlXYlhNeFZteFNWMkZGVGxkTlYxSjVWakl4TUZack1VVlNiR2hYVFdwV00xWXljM2hTTWs1SlUyeHdhRTFzU2toWGJGWmhZVEZhVjFKdVRtRlNNbWh2VkZkd2IwMHhXWGhYYkU1U1lsWkdOVlp0ZEc5V1JtUkpVVzA1Vm1KVVJuWldNVnBYWTFaU2RFOVhkRTVXYmtKYVYxUkNWazVYUmxaTlZtaHNVbTFvV0ZacVRtOWtiRnBJWlVkR1QySlZjRWRVTVZwaFlWWmFSbGRzVmxkaGEwcG9XVlJHYTFkR1VuSlhiVVpUVFcxb1VGWnRNREZSYlZGNFdrWmtWMkpIVW5KVVZscHpUbFpWZVdWR1pGZE5hM0JKV1ZWYWMxWXlTbGxoUkU1V1pXdGFNMVp0ZUd0a1IxSklZMFprYVZORlNUSldNVkpEWVRBMVNGSnJhRmRpYXpWWldXdGFkMWRHVWxkWGJtUllVbTE0VmxWdGN6RmlSbHB6VjI1c1dHRXhjSEpaVm1STFVtMU9SMXBHYUZkTk1tZ3lWbXhTUjFWdFZraFRhMnhWWWxkb1ZGcFhNVFJWVmxwMFRVaG9WazFYVWtoV01XaHpWR3hhV0ZWc1dsVldiRm96Vm0xNFYyUkhVa2xVYkdScFZsaENZVmRXVm05WlZsbDVVMnhXVTJFemFGaFVWbHAzVjBad1IxZHJaR3BOVjFJd1dWVmtiMVJzWkVaVGFrcFhZbGhTY2xSclduTlhSbEpaV2tVNVdGSlVWbFpYVnpFd1dWWlplR0pJVG1GU1JrcFpWVzB4TkdWc2JGWlplbFpZWWtad2Vsa3dhRzlXYXpGWFUydG9WMVl6VGpSV01GcFhaRmRLUjFac1pHbFdNbWhLVmpGYVlWbFdUWGhUYms1aFUwVTFXVmxyV25kalJteDBaRVYwVkZadFVucFhhMUpUWVdzeFdGVnJaRlZXYkhCb1dWUkdTMVpXV25KUFZuQllVMFZLV1ZaWGNFZFpWbGw0WVROd2FGSXpRazlXYlRFelpXeGFSMWRzWkdoTmExcFhWRlZvZDFWdFNraGhSbVJhWVRKU1ZGWlZXbE5qYkdSMVZHczVhVkpVVmpWV2FrbDRUVVpTYzFOcmFHeFNNRnBZVm0weFVrMUdWalpUYTJSWFRWZFNlVll5ZUc5aFZrcFhZMFp3V0ZZelVuSldWM040VWpGd1IxcEhSbE5XUjNoVlZrWmFZVmxYVm5OaVJscGhVMGRTVjFSWGRIZFRiRlpZWlVWa1YwMVdiekpWVjNCVFZsZEZlR05IYUZkaGExcFlXWHBHZDFOR1NuTlZiRTVPVmxoQ1dWWnRkR0ZoTURGSFlrWm9WMkpyTlZsWmJYaExZMVpXY1ZGdFJsaFNiSEF3V2tWb2EySkhTa2RXYWxaaFZsWlZNVll5ZUdGamJVNUdXa1phYVZkRlNsVldiWEJDWlVaSmVWUnJaRlppUjFKUFZtMDFRMWRXWkZsalJXUlRUV3N4TkZaWE5VOVdWMHBZWVVVNVZWWldXbmxhVmxwaFpFVXhWVkZzY0ZkTlIzY3hWbXRqTVZVeFduTmFSV2hzVW0xb1lWbFVTbE5XUm10NFYyeGFhMDFYVW5sYVJWcHJZVlpLZEdRemNGZE5ibEpVVmxSS1IxSXhUblZWYlhoVFlsaG9WMVp0TVRSa01WWkhZa1pvYWsweWFGbFZiWGhoWld4c2NsZHVaRlZpUlhBeFZWYzFjMWRHV25OWGJHUmhWbFp3VEZacVJrOWtWbEowWWtaT2FWTkZTbEZXYlRCNFRrZE5kMDFJYUdGU2JWSlhXVlJLVTFac1VsZFdWRVpVVm14d01GcEZXbXRXTVZsM1kwVnNXbFpYYUVSV2JURkxWMVpXY1ZOdFJsZGlTRUpvVjJ4YWExUXhTblJWYTJSVllYcFdXRlJXVm5kVFZscHlWMjFHV2xZd2JEVlZiWFJyVmtaa1NGVnNiRnBYU0VKNlYxWmFjMVpXU25WYVJuQlhZbXRLV1ZacVNYaE5SMFp5VFZaa2FsTkhlRlpaYTJSU1RVWmFWVkZZYUZOV2JIQjVXV3RhYjFZeVNrWmpSa1pZVjBoQ1NGWnFSa3BsUjA1R1YyMUdVMkpYYUhaV1JscGhaREZrYzFwR1pHRlRTRUpQVm0xMGQxTkdaSEpYYlhSWVVqQndSMVJzV205V01rcFpWVzFvVlZac2NISlpNbmgzVTFad1IxWnRiRk5pV0dOM1ZteFNTMDVIVFhoYVJXUllZbXMxV1Zsc1pHOVhSbFp5Vm01a1ZGSnNjSGhWYlhNMVlURmFjMk5JY0ZaTmFrWjJWa2Q0YTFKc1RuUlBWbVJPVm01Q2VWWkdWbXRWYlZaWFZXNVdWV0pIYUc5VVZ6RnZWVVphZEdWSGRGWk5helZZV1d0b1MxWXlTblJWYms1V1lsaG9NMVl4V25kV2JHUjBaRVprVjAxSVFraFhWRUp2WXpGa2NrMVZaRmhpUmtwWVZGVmtVMVJHVlhkWGJHUnFWbTFTTUZWdGVHdFdNa3B5VTI1YVYySllRa1JYVmxwT1pVWndSMkZHVm1oTmJXaDJWbGN4ZWsxV1pFZFdia1pWWWxSc1QxbHJXbk5PUmxsNVpVVTVWMUpVUmtaVmJYUnJWbGRLU0dGR1FsZE5SMUpIV2xaYVYyUkhSa2RYYXpWVFRWVndWbFp0TUhoT1IwMTRXa1pvVldFeGNGWlpXSEJYVkRGYWRHUkdjRTVTYkhBd1ZGWlNVMkZGTVZkalNHeFZWbXh3Y2xsWGVFdGtWa1p6WVVaa2FXSnJTbGxXVjNSaFdWZE9WMVJ1U210U00xSllXVlJHZG1WR1pGVlJiVVpyVFZaS01GVXlOVk5oUmtwSFkwWm9XbUpIYUVSVk1GcDNVbFpLY2s5V1RrNVdWRlY0Vm14amVHUXhWWGxTYWxwWFltMVNXVlp0ZUV0U1JuQkZVbTVPVjAxWFVqRldWekUwVlRBeFIyTkdhRmRTYkhCeVZHdGFhMUl4WkhKaFJUbFhWa2Q0V1ZaWGNFTldNRFZIWVROa2FGSlZOVmhaYkZaWFRrWmFjMkZIT1ZkTmEzQmFXVlZrYjFsV1NsaFZiR2hXWWxSR1ZGVXdaRk5TTVhCSVlrZG9UbE5GU2twV2JURTBXVlpzV0ZOWWJGUlhSMmhYVmpCa05GWldiRlZTYm1ScVZteGFNRnBWYUd0WFJrcDBaVWh3V2xaV1ZYaFphMXBMWXpKT1NXRkdXbWxYUmtZelYxWlNSMU50VmtkVWJGWlVZa1p3Y0ZZd1pHOWxWbHB6Vld0MFYwMXJNVFJYYTFwellXeEtkRlZzYUZaaVIxRjZWRlZhWVdSSFRrWmtSbFpPWVhwV05WWkhlR0ZoTVZsNVUydG9hRk5GU2xoWmExcDNUVEZhVmxkdFJsTk5WM1EyV1ZWa2MxUnNXbGxSYWxwWFRXNVNhRmxxUmxOak1XUnlXa1pTYVZKc2NGZFdiWEJQWWpGT1IxVnVTbGhpYTNCeVZGWmFkMDFHVm5SbFNHUlhUV3RXTmxWWGRITldNVnBHWVROb1ZsWkZXbWhhUlZwUFkyeHdSMVZ0YkdsaE1IQjJWbXhrTUZZeGJGZGFSV1JZVjBkU2FGVnRjekZXUmxKWFYydDBiR0pHYkRWYVZWVTFWbGRLUms1VlpGWk5ibEV3Vm1wQmVGWXlUa2RoUm1oWFlsWktTRmRzVm1Ga01VNVhWbTVPWVZJeWVHOVVWRUpMVGtaYWMxa3paR3hTTUd3MVZXMTBhMWRIU25OVGF6bFhZbGhOZUZadGVGTldNa1pHVkd4a1RsWXhTalZXYWtsNFRVWmFjazFWVmxOaVIyaFlWRmR3VjAweFdYbGpNMmhUVFdzMVNsVXllSGRoUlRGelUydG9XR0pHV21oWlZFWmhWakZLZFZSdFJsTk5iV2gyVmtaa2QySXdNSGhYV0doWVlrVTFVMWxzV2tkT1ZscDBaRWM1VjFKdFVrcFZWekExVm0xS1ZWSnVXbGROVm5CWVdURmFVMlJGT1Zoa1JUVlhZbXRLWVZZeFVrTldhelZZVW14YVRsWnRhSE5WYlRGdlYwWmFjVlJ0T1d0aVJuQkpXbFZrUjFReVNsWmpSV1JWVFZad2FGbFdXbUZTYkdSelZteGthR0V3Y0c5WFZsSkhZVEZrUjFWdVNsaGlWVnBVVkZjeGIxVkdXblJOUkVaU1lsWkdORmRyV210V01rcElWVzVLVlZac2NIcFViRnBXWlZkV1IxcEdaRTVoTTBKS1YxWldZV014V1hsVGJHeG9Va1UxVjFwWGRHRk5NVnAwWlVkMGExSXhTa2xaTUZwcllWWk9SbE5VU2xkTlZrcEVXVlJCTVZOR1NuSmhSbVJwWVhwV1dsZFhkR0ZrTVdSSFZXeGtXR0p0VWxsVmJURTBWbXhXZEdONlJtbFNiSEI2VmpJMWMxZEhSWGhqU0VwYVZtMVNURlZ0TVU5U01YQkhZVVprVGsxdFozbFdiWGhUVWpGV2RGWnJhRlJoTW5oV1dXeGtiMVpHY0ZoTlZGSldWbXh3TUZSVmFHOVdhekZZVld0b1YwMVhhSHBXUjNoaFYwWldjMWRzVmxkaVJtOTZWbTB4TkZZeVVraFZhMnhWWWtkU2NGWnNhRU5aVm1SWFZtMDVXbFpzYkRWVk1uaFhWVEpGZW1GR2FGVldiSEF6VmpCYWQxSXhaSEphUjNCT1ZqRkpkMWRXVm10aU1WSnpXa1ZhVkdGcmNGaFpiR2hUWTJ4U2NsZHVUbGhTYkVwYVYydFZOVmRHU2xWV2JGcFlWbnBGZDFkV1dscGxSMHBKVkcxR1UxSnJjRnBXVnpCNFRrZFdjMkpHV2xwbGJGcFpXV3RhZDJWc2EzZGhSemxYWVhwR1dGVXlkRzlXTVZsNlZHcFNWMDFHY0ZoYVJtUkxVakZhYzFwSGJGZE5iV2hMVm1wR1lWbFdiRmRVV0doVVltczFhRlV3VlRGWFZteHlWMjVrYWxKdGVEQmFSVll3VmtaYWRGVnVjRmhoTVVwVVdWZHplRmRHVm5KYVJsWlhZa2hDYjFkV1VrZFRNVnBYVjI1S1VGWnVRbGxWTUZaTFYxWmFXR05GWkZwV2JHdzBXVlJPZDJGR1NYcFJhemxYWWxSRmVscFhlR0ZTTVdSeldrZG9UbUV4Y0ZoV1JsWnZaREZXZEZOcmFHaFNiVkpoV1ZSS1UxWkdXbFpYYkU1cVlrZFNNVlpIY3pWaFZrcFZWbXBXVjJGcmJEUlVWVnBUWXpGT2NtRkhlRk5OUm5CWlZtMHdlRlZyTVVkV2FscFVZVEpTV0ZSV2FFTlNNV1J5VjJ4T2FGWnNjRWxhVlZwelYwWlplbUZJV2xaV1JWcE1WV3BLVDFKc1duTlZiV2hzWWxob05GWnJXbUZaVm14V1RWWmtXR0pzU2s5V01HUlRWakZTVjFwR1RsUlNiRlkxVkd4a1IxWXdNVmRpUkZwYVZsWndWRlp0TVVkamJVNUhWRzFHVjFadVFsbFhXSEJIWkRGT1IxTnVUbFZpV0dod1ZqQmtiMlJzV25STlNHUnNVbFJXU1ZaV2FHOVdWMFY1Vlc1Q1ZtSlVSVEJaTVZwWFl6RndSMVJzYUZOaVNFRjNWMnRXYjJFeVNraFRhMlJYWVd4YWFGWnNXbFpOVmxweFVteHdhMDFXY0hoV1YzaDNWR3hLY21OR1JsZGlWRVkyV2xWYVNtVldVbkphUjJoVFlsWktVRlp0TURGUk1XUlhXa1pzYWxKWFVsUlVWM040VGtacmQxWnRkRmRXTUhCSlZsYzFRMWRzV2taVGJteGhWbXh3YUZwRlZYaFdWa1p6VjJzMVYxWXpZM2RXYlhocVRWWlZlRmR1VG1GU1YyaFhXVmh3YzFkR2JITlZhMlJYVW0xME5GWXllR3RoTVVsNFYydHNWbUpZYUhKV2FrcExWMWRHUlZkc1pHbFNNVVl6VjFaU1IxbFhUWGhVYmxaVllrZG9jRmxzYUc5WFZtUllaVWM1Vm1KV1JqUlphMXB2Vkd4YVdWVnNVbFZXYkZWNFdsZDRjMVpzWkhSa1JtUk9Va1ZKTVZkV1ZtcE9WbGw1VWxoc1ZXRnNTbGRaVjNSR1pVWnNObEp0ZEd0V2JFcDZXVlZrYzFVd01YUmhSbkJYWWtkUk1GWnFTazVrTURGSllVZEdVMkpXU2xoWFZsSkxWVEZhYzFWc1pGZFdSVnBWVm0xNGQwMUdjRVpYYlhSWFRWWnNNMWt3Vm5OWGJGcFlZVVZTVjJKVVJreFdNVnBYWTFaT2RGSnNaR2xUUlVwdlZqSjRZV0V4VVhoVGJsSldZVEpTVmxsWWNGZFhSbEpYVm01a1ZGWnNjSGxXTWpGSFYyeFpkMkpFVmxaaVdGSnlWbXRhYTFOR1ZuTmlSbkJZVTBWS05sWXhXbUZqTVZwWFUyNVdZVkp1UWxoWmJYUkxWMVphY1ZOWWFFNVNNRnA1VkZaYWEyRnNUa2hsUmxwYVlUSlNVMVJWV21GV1ZrWlpZVVpPVjJKSVFqVlhWM1JoWWpGWmVWTnJXbXBTYTFwWlZqQm9RMU5HV25GU2EzQnNVakExUjFZeU1VZFZNa3BZWVVoYVYxSnNjR2hhUkVacll6RndSMXBIUmxSVFJVcFFWbTB4TUdReFRrZGFTRXBZWWxoU1dWVnFRbmRTTVZKelYyMDVWMDFyY0ZwV1Z6RnZWbFphYzJOSVNscE5ibWd6VlRGYWQxSXhXblJpUms1cFYwZE9NMVp0ZUZOVE1EVklWRmhvWVZKWFVsbFpiWE14VjFac2MxcEhPVmhTYkZwNVZtMDFhMVpHU25OalNHaFdZbGhOTVZsVVJtRmpNazVKWTBaYVRtRnJXakpXYTJRMFlURktjMVJ1VWxCV2JWSlBWbTAxUTJWV1drZFdiWFJXWWxaYVdGWlhOVmRXVjBwSVlVYzVWVlo2Um5aV1ZWcGhaRWRXU0dSR1drNWhlbFpaVjFkMGIxTXhXWGxUYmxKV1ltczFWMWxzYUc5Tk1WbDRWMjVrVjJKSFVqQmFSVnByVmpBeFNWRnJhRmhXUlVwMldYcEdhMk5yTVZaYVJtaHBVbXR3V1ZaR1ZtdFZNVkpIVmxoa1dHSkhVbkZXYlRGVFRVWldkR1ZIZEZkTmEzQjVWVEkxWVZZeVNsbFJhMUpZVm14d1QxcFZXbmRTTWtaSFZtMW9UbUpYYURKV2JHTjRaV3N4VjFwRlpGZGliRXB6VlRCa1UxUXhiSEpYYms1UFVtMVNlVlpYZEU5WFIwcEhZMGh3V2sxR1NrUldha3BMVjFaV2RWTnNaRTVTTVVwSVYyeGFZVll5VWtaUFZtUllZWHBXVkZSV1ZuZFdiRmw0V2toa1UwMXJNVFJYYTFwdlZsZEZlR05IYUZaaVZFWlVWa1JHWVdSSFVrbGFSbWhYWWtoQmQxWkdXbE5WTWtaR1RWWm9WbUV5YUZkVVYzQlhWVVpzV0dWRmRHdFdhMXA2V1ZWYWEyRlhTbkpUYkd4WFZqTlNhRmRXWkU5V01WSjFVMjEwVTAweFNsbFhWbEpIWkcxV1IxcEdWbEppVlZweVZGWmFTMDFHVlhsT1ZrNW9VbXR3U0Zrd1dtOVhiVXBJWVVWU1ZrMUdjRE5WYkZwTFkyczVWMVJyTlZkV1JsWTBWbTE0YW1WSFVYaFdXR3hUWVd4d1dGbHRNVk5YVmxwMFpVVjBVMUp1UWtaVmJUVlBWakF4V0ZWcVJsZFdla1V3VmxSQmVGSXlUa2RoUm1SVFlraENlVlpIZEdGaE1VbDRXa2hLYUZKVWJGaFdhMlEwVjFaYVdHTkZUbGROUkZaSVdWUk9hMkZHU2xaT1ZtaGFZa1phV0ZScldtRmpNa1pJVDFaa1RtRXpRbUZYVmxacllqRnNWMU5zYUZaaVIyaFhXV3hTUjFaR1ZYZGFSazVUVFZoQ1NWbHJaRzlVYkU1R1UydHdWMkpVUlRCWFZscHpWMFpPV1dKR1VsaFNNbWhZVm1wQ2EwNUdXbGRpUmxaVFltMVNjVlp0ZUdGTlJuQldZVWQwV0ZKcmNEQmFWV2gzVjJ4YVYxWllhRnBoTVhCTVdYcEtUMU5YUmtkWGJXeFlVbXRaZWxadGNFTlpWazUwVm10a1ZXSnJjRmxaYTJSVFYwWlNWVk50T1d4V2JIQjZWbGQwYTFaRk1WZGlSRlpYVWpOU2NsWnFTa3RUUmxaMFQxWldWMDB5YUV4V1JtUTBZVEpPYzFadVNtdFNiSEJ3Vm0xMFdtVnNXa2hsUjBab1RWZDRXRlV5TlZOV2JVcHlVMnhrV21FeVVuWlZhMXBhWlVaa2RGSnNhRk5OVm5CS1ZrUkdZVk14VW5OWGJHeFNZV3h3V0ZSWE5WTmhSbXh4VW14T2FrMVhVbmxYYTFwVFlWWktjMk5HWkZkaVdFSlFXV3BHVDFJeFZuVlRiR2hwWVROQ2VWWkdXbUZrTURGSFZtNVNiRk5IVWxoVVYzUlhUbXhXV0dSSVRsZE5WbkJIV1ZST2IxWnNXa1pYYldoaFVsWndVRmt5ZUhkU01WWjBZa2RzYUUxSVFqSldiWGhyVFVaWmVHSkdaR0ZTVjFKWlZqQmtVMkZHVm5SamVrWlhVbXhLV0ZZeWREQmlSMHBIWWtSV1lWWldWVEZXYkdSTFVtczFWbHBHV2s1aWJFVjNWbTF3UW1WR1dYbFVhMlJvVW0xb1dGbHNXa3RUUm1SelZtMUdhMDFWTlZoV2JUVlBXVlpKZVdWSE9WVldSVXBNVkd0YVlXTXhhM3BhUjNoVFRVZDNNVlpYTVRCaE1XUklVMjVPVkdGNmJGaFpiR2hPWlVaYWRHVkdUbGROYTFwSFZrZDRhMVJzV1hoVGFsWlhZV3RzTkZSVldtRmphekZXVm14T2FWSXlhRmxXUm1SM1ZqQXdlRmRZYkdwTk1taFVWRmR6TVZOc1ZYbGxTR1JvVWxSR2VsVXlkRzlYUjBwSFYyMW9XbFpGV21oV2FrWkxaRlpTZEZKc1RrNWlWMmd5Vm10YWEyUXlTWGROU0doWVYwZG9XVmxyVlRGVk1XeHpWMnRrVDFac2NEQmFSV00xVmpGS2RGVnJjRlpXZWtFeFZtMHhTMVpXU25WWGJHUk9WbTVDV1ZkVVJtRlZNbEpHVDFab2ExSlVWbGhaYlhSTFdWWlplRlZyVGxkaGVsWlpWVzE0WVZSc1duUmhTRTVXWWxSR2RsWXdXbUZqVmxKMFQxZDBhVkp1UWtwWGJGWnJVakZSZVZOc1dtcFNWMUpXVkZaYWQyRkdiRmRYYlVaVFlrZFNlbFp0ZUd0aFIwVjNZMGM1V0Zac1NraFpWRVpyVWpGV2RWTnNhR2xXVm5CVlZrWmplR0l4VmtkWGJsSk9Va1ZhVTFsc1drZE9SbVJ5VjIxMFYwMXJjRWxXVnpWTFZsWmFjMk5JY0ZWaVJuQlhXbFprVjFJeGNFZGFSVFZvVFRCS1MxWXhXbGRaVjAxNFYxaHNWR0pIZUc5VmExVXhWakZ3V0dSSFJrNU5WbkF3V2xWa01HRXhTWGhUYTJ4YVRVWndjbGxXV2s5U2JFNVZVMnhrVGxacmNFVlhWbEpDVFZaT1IxTnVTbWhTYlZKd1dWaHdWMWRzWkZoa1IwWnJUVmRTU0ZaWGVHdFhSMHAwVld4c1ZtSlVSVEJXYlhoWFpFZE9ObEp0YkZOaVNFSTJWbXBKTVdNeFpFaFNXR2hxVTBWd1lWWnRNVk5VUmxaMFRWVTVVMDFZUWtoWlZWcHJWR3N4ZEZvemJGZGlXR2hVVldwR1YyUkdXbkpoUmxKb1RXNW9WMWRYZUd0aU1WcEhZMFpvVGxaR1NsZFdiWGgzVFVaU1ZtRkhPVmRoZWtaWlZsZDBiMVl3TVZoaFNIQlhVak5vYUZZd1dsZGpNV1J6Vm14a2FWSnRPVFpXYlRCNFRrWlplVlZyYUZaaE1uaFdXV3RrVTJOR1duTmhSVTVhVm0xU1dGWnRNRFZYYkZwellrUldWazF1YUZoV1ZFcEdaVzFHUjJGR1ZsZGlTRUY2Vm1wQ1lXUXhTWGhhU0VwaFVqTkNUMVpxUmtwa01XUlhWbTEwYVUxV1NucFhhMVpoVmtkR2NtTkdhRnBpUjJoVVdUSjRVMk5zWkhWVWJHaFRZa1Z3WVZZeWRGWk9WbVJIVTJ4V1YySkdjRmxXYm5CR1pERmtWMWRzY0d4U01IQktWa2N4UjFVeFNuSmpSbkJYVm5wQ05GUnJaRmRqTWtwSFYyeHdiR0pHY0ZwWFYzUmhaREpXYzJFelpHaFNlbXhZV1Zod1IxZEdWWGxrUnpsWFRWWnNObFpIY0ZOV01ERkhZMFpvWVZKdFVreFZha1poWXpGd1NHSkdaRTVpVjJoTVZtMXdSMWxXYkZkaVJtUlZWMGRvVlZsdGN6RmhSbFYzVmxSR1dGWnRlSGxXTWpWcllXeEtkR1ZFUW1GU1ZsbDNWbXRhWVdSR1ZuVmpSbWhvVFZWd1ZWZFdaSHBsUm1SSFZtNUtZVkpzV2xoWmEyaERZakZrVjFWclpGUk5WbkJZVmpJMVMxVkdXblZSYkd4V1RVWmFURll4V21GWFIwNUdXa1p3VjJKSGR6QlhWbEpQWkRKR1IxTlljRkpoZW14WVdXeFNSbVZzY0ZobFIwWlRUVmRTZWxkclpHOVViVVY0WTBab1YxSnNXblphUkVaWFpFWk9jbUZIYUZOaVZrcG9WMVpTUzFVeFdrZFhiRnBZWWtVMWNWbHJaRk5OVmxwSVkzcFdhRlpyY0ZaV2JYQlhWakpHY21KRVVsVldWbkJVV1hwR1QyTnRSa2hsUms1T1VtNUNXbFp0TUhkbFJsWnlUVlZrVjJGc2NGVlpWRXBUVjBaU1YxcEdUbGhpUjNoNVYydGpOVlpyTVhKV2FscFdWak5vZWxacVNrdFhWa1p6VVd4a1YxSllRbEZYV0hCTFV6RkplRmR1VGxSaVIxSlVWbTAxUTA1R1duSlhiVVpwVFZWV05GWkhkR3RoVmtwelkwZG9WazFIVWxSV2FrWlRWakZrZFZwR1VsTmlSM2N4VjJ4V1YyRXhXWGROVm1ScFpXdHdWMVpxVGtOV1JscHpXa1ZhYkZJd05VbFpWVnByWVVkRmVHTkdiRmhYU0VKSVdWUktUbVZHY0VsVmJXeFRZWHBXV1ZaWE1UUmtNV1JYVjI1U2ExSXdXbUZXYlhoelRsWmFWMkZIT1ZkV01IQkpWbGN4YjFack1VZFhhazVYWVd0YWVsa3llR0ZXVmtwellVWk9hVk5GUmpOV01uUlhZakpGZVZOcmFGUmhNbEpZV1ZkNFlXRkdXbk5YYkZwT1ZteHdlRlZ0ZUhkaE1ERnlUbFZrV2xaV2NISlpWbHBMWTIxT1JtSkdaR2xXUlZreVYyeFdZVk50VmxkVmJrcFlZbGhvVkZsc1drdFZSbHAwVFVSR1VrMVhVbGhYYTFwellXeEtXRlZzVWxWV00wNDBWR3RhY21ReFduUmtSbVJYVFVoQ1dsZHNWbUZqTVZwMFUydGtWR0pGTldoVmExWmhZVVp3UmxaWWFGZFdhMXA2V1RCYWExUnNTWHBaTTJoWFlsaFNjVlJXV2xabFJtUjFWRzFHVTFZeWFGaFhWM1JYVXpGa1IySklTbGhpYlZKUFZGWmFkMUpzVm5STlZXUm9ZbFZ3U1ZaWGNFZFhSMFY0WTBST1YyRnJjRXhaTW5oUFl6Sk9SMkZIYkZOaVNFSmFWbXRhVjFsV2JGaFVXR2hWWW14YVZsbHJaRzlqUm14eldrYzVXRkp0VWxsYVZXTTFZVlV4Y2s1WWNGZE5ibEpZVm10a1JtVnNWbk5WYkZaWFlrWldORmRzVm1GV01sSklWbXRzWVZKc1duQlZiR2hDWlVaYVYxcEljR3hTYkd3MVZXeG9jMVpzV2taVGJHeFhZbGhvTTFsVldtRmpWa3B5WkVkMFYyRXpRalpXTW5Scll6RlZlVk51U2xSaGF6VllXV3RrVDA1R1VuSmFSVFZyVFVSR1NsbFZaRWRWTWtwWFUyeG9XRlpzU2t4V1ZFWmhZekZXYzFwR1pGZFNWbkJXVm0weE5HUXdNVWRqUlZwWVlsaFNXRlJXV25OTk1XdDNWbTVPV0dKR2NGbFpWVlpUVmpKS1ZWSnJlRmROVm5CWVdURmFUMlJHU25OYVIyeFVVbFZ3ZGxacVNqUlpWMFY0VlZob1ZHSnNTbGRaVkVwVFZteHNXV05HWkZoU2JFcFlWbTAxYTFaR1duTmpTR3hYVFdwR1NGWXllRnBrTWtwRlZteGFhVmRHU25sV2JYUmhZVEZPUjFadVRtbFNia0paVlRCV1MwNXNXWGhYYlVacVRWWndXRlV5TlZkWlZrcDFVV3hvV21KWVVreFdNVnBoWTFaT1dXRkZOVk5OUm5BMVZrWmFZV0V5Um5OVWEyaHNVbXh3WVZsVVNsTlZNVkpXVjIxR1YxWnJXbHBaVlZwUFZqSktTVkZxVmxoV00xSm9XV3BHV21WV1RuSlhiWEJUWVRGd1dsWnFRbTlSTVU1SFYyNUdVMkV6UW5OVmFrRXhVakZaZVUxVlpGWk5hM0JaV1ZWb1lWWXhTbk5qUjJoaFVrVmFjbGw2Um5kU01YQklVbXhTVkZKVmNGRldiVEI0VFVkUmVGUnJaR0ZUUlhCWldXeG9VMWRXVm5GUmJtUlRUVlpLZWxZeU1EVldNREZ5WTBad1YxWjZSblpXYkZwaFl6Sk9TVk5zY0U1aWJXZDZWbFJHWVdReFNYaFhibEpwVW1zMWNGWXdaRTlOTVZwMFpVWk9WRTFFVmtsV1JtaHZXVlpLV0ZWc2JGcGlXRTE0VmpGYWMyTXhjRWhQVm1oVFlrWndOVlp0TURGaE1WcEhVMjVPYWxOSGFGZFpiR2hPVFZac1ZWSnRSbXBOYXpWS1dUQmFZVlJ0Um5KWGFrcFhZVEpSTUZsVVJrdGpNVkoxVld4Q1YySldTbEJXYlRBeFVUSldWMWRyWkZkaVdGSlhXV3hhWVZkR1dsaE9WbVJYVmpCd1NWbFZZelZXVmxvMlVtNWFWMVpXY0doYVJXUlhVMGRTUjFkck5XaGxiRnBhVmpGa01HSXhUWGhYV0d4VVlteEtWMWx0Y3pGV01XeHpZVWM1VGsxV2JEUldNalZyVmpKS1NGVnFRbUZTVm5CeVZtcEJlRk5XUm5KaFJtaFhVbFZ3TWxkWWNFZGhNazV5VFZaYVlWSnRhSEJWYlhSM1YxWmFSMVp0ZEZaTlZrcElWbXhvYTFkSFNraFZia1pYWWxSR1ZGUlZXbGRrUjFaSVpFWmtUbUV6UWpWV1ZFa3hXVlpaZVZOc1ZsTmhhelZYV2xkMFlWVkdjRVpYYlVaclZteGFlbFp0TVc5VWJVcFlZVVJLVjJKSFRqUmFWM040VmpGd1JscEdaR2xpUlhCNlZsUkNhMVV4VVhoaVNFcFlZbXMxVUZWdGVITk9WbkJXVmxSV1YyRjZSa1pWYlhoelZqRmFObFp1Y0ZkaVJuQm9Xa1ZrUjFJeFJuTmFSVFZUVFZWd1NWWXllR0ZaVmxsNVZXdG9VMkV5VWxsWldIQlhWa1pTVjFadVpGZGlSbkF3VkZaU1ExZHNXWGROVkZKWVlURndkbFpzWkVabFZsWjBZVVphYVZkRk1UUldhMUpIV1ZkU1NGVnJiR0ZTYldoWVdXdG9RMDVHV2xWVGJtUldUV3RhUjFSV1dtdGhWa3BIVTJ4b1ZWWXpRbGhXVlZwelYwZFdSbVJIZEZkaE1YQTJWMVpXWVdFeVJsaFRia3BVWWtkNFdGWnFUbE5oUm1SWFdrVTVWMDFXU2pGVk1qRXdWVEF3ZUZOc2JGaFdiRXBJV2tjeFYxSXhjRWRXYkVwcFZsWndlVlpHV21GVE1ERkhWbGhzVDFack5XOVZiWFIzVTBacmQxZHRPVmhpVlhCSldWVldVMVpyTVVkalJFNVdZa1p3VEZreWN6VldNVkp5VGxaa1YxSnNXVEJXYlRFMFlXMVdTRlZZYUZkWFIzaFVXVmQ0ZDFkR2JIUk5WazVZVm14d01GcFZWakJWTVVwMVVXdGFWbUpVVmxCV2FrRjRWMFpXY1ZKc1pGZGxhMVYzVm14U1FtVkdTWGxVYTJSb1VtMVNWRmxyYUVObFZscElaRWRHYUUxVmJEUlhhMmhMWVVaS1ZXSkdhRmRoTWxFd1ZqRmFZVmRIVGtaVWJHUk9Va1phU1ZkV1VrOWhNa1pIVTJ4YVQxWnRhR0ZaYTFwaFYwWlNjbGR0Um1wTmExcEpWREZhYTFSdFJYcFJiVVpZVm14YWNsbHFSbk5XTVU1ellVWmFhVkl5YUZoWFYzaFRVakZhUjFaWVpHRlNhelZVVkZab1ExTldiSEphUnpsVllrVTFSMVV5ZEhkV01rcFZVbFJDV0Zac2NIcFdNRnBQVjFkS1IxVnNhRk5OYldoWlZtMXdRMkV3TlVkWGJHUnBVbXhhVkZsdE1WTmpWbHAwWlVkR1RsSnVRbGRaVldRd1YwWktjbU5JY0ZwTlIyaDJWbXBHU21Wc1VsbGhSbkJvVFZoQ1RWZFljRXRVTVU1WVVtdGtXR0pYZUZsVmJYUmFaV3hhZEdORlRscFdhelV3Vm0xMGExWlhTa2RYYkZaYVlURndNMVl3V2xOV1ZrNTBUMWQ0VjJKSVFqWldiR1F3VFVaYVJrMVdhRlpoTW1oaFdWZHpNVTB4YkZobFJYUnJVbXhhZWxsVldtRmhWa2w0VW1wYVYxSnNXbWhYVm1SVFUwWlNjbGR0UmxOaVJYQlFWMVpvZDFZd05WZFhhMVpUWWxWYWIxUldaRk5UVmxWNVpFYzVWMkpWY0hsVk1uaHJWMjFGZUdORmVGZE5SbkJoV2xaa1YxTkdTbk5hUm1Sb1RWaEJNbFpxU2pCWlZsVjRWVzVPV0dKSGVGTlpWM2gzVjBaU1dFNVdUbWhTYlhoNFZXMTRUMkZyTVZoVmJteFlZVEZ3VkZsV1drdGpNazVIV2taa2FWZEZTbEZYVjNCSFZERkplRlp1VmxSaVIyaHdXVlJPUTJWV1drZFhiVVpyVFVSR1NGWnROVk5pUms1SVZXeG9WVll6VWxoVWJYaFhWMGRTU1ZSc1pFNVdia0pJVjFaU1QySXhXbk5YYTFwWVlsZG9hRlZzV25kVlJtdDVaVWhrVTAxV1dqQlphMlJ6WVVVeFNWRnFTbGRpV0doeVZGVmFXbVZIU2tkYVIwWlRWakZLV2xacVFtdFZNa1pIVm01U2FtVnJXbGhWYlhoTFYwWlplV1JFUW1sU01IQklXV3RTVjFsV1dsZFdWRVpYWWtkU1RGVnRjekZXYkhCSFYyczFhV0pGVmpOV2JURjNVVzFXUjFkWWJGVmhNbEp2VlcweGIxZEdiSE5YYTNSVVVtMVNlbFp0TVVkaE1ERldUbFpvVjJKVVZsQlhWbHBLWlZkV1NFOVdWbGRTVlhCTlZrZDBZVmxYVFhoaE0zQmhVak5vVkZSVlpETk5WbHBZVFZSQ2FFMVhVa2xWTWpWUFZrZEdObUpHYUZwaVIyaFBXbFZhWVdSSFZrZFViR1JPWVRGd1NGWnJaRFJoTVZKelYxaG9WR0ZzV2xoWlYzUnpUa1pTVmxkdFJtcGhla1pYVm0xNFQyRldTWGxoUm14WFVtMVNNMVpxUVhkbFJtUlpZa2R3VGsxdGFGVldSbVI2VFZaT2MxWlliR3hUUjFKdlZXeFNSMlZzVlhsa1J6bFlVakJ3U0ZZeU1XOVhiRnBHVjIxb1YyRnJXa3hhUmxwVFpFWktjMVJyTldsV01tZDVWbTEwWVdFeVVYbFRXR1JPVTBkb1dWWXdaRzlYVm14eVZsUkdWazFYZUhwV01uUnJWREZhYzJORVFtRlNWMDB4Vm1wR1MyUkdWbkpqUmxwWFpXdEZlRlp0TUhoVE1WcFhVMjVXV0dKSFVrOVdiVFZEVjFaa1ZWSnRSbFpOYkVwSFZERmFiMkV4U2xWV2JHaGFZbGhTVEZkV1dscGxSbFp5Vkd4a2FHVnNXbHBXVnpFMFdWWlNjMWR1VW1oVFJUVlhXV3hTUjJSc1dYZFhiVVpxVm14S01GUXhaREJoVmtwMVVXdHdXR0pHV25KVmFrWlNaVlpPYzFkdGNGTldNVXBYVmtaYVlXUXlSa2RpUm1SWVlsVmFWRmxyWkZObGJGcDBaVWQwYUZJd1ZqTlpNR00xVjBaYWMxTnJhRnBXUlZweVZXcEdWMlJXVG5OaFIyeFhWbTVDVmxacldtcGxSMGw0Vm10a1dHSnNTazlWYTFaaFZURnNjMWRyWkU5U2JWSjVWakl4TUZZd01YSmpSV3hYVm5wV1RGWnNXbUZqTWs1SlkwWldhVkp1UWxoWGJGcHJWakZKZUdORlpHRlNWRlp2VkZSQ1MxTXhXWGhYYkdSYVZqQXhORll4YUhOV1IwcElaVWM1Vm1FeFZYaFdha1ozVjBkU1NGSnJOVTVXYmtGM1YyeFdhMDFIUlhoVFdHaFVZVEo0WVZSVlduZGpiR3hYVjJzNVUySkZOVlpWTW5oclZHeGFjbU5GVmxoV2JFcERWRlphVDFJeFRuVlRiV2hUWWxaS2QxZFdhSGRXTVdSeldrWm9hMUl3V25KVVZtUlRVMFphV0dWSGRGaFNNSEF3VmxkNGMxWnRTbFZTVkVKWFlsaG9XRnBGWkU5T2JFcDBZa1pPYVZORlNUSldiWEJLVFZkTmVGcEZhRk5YUjJoeFZUQldkMWxXV25STlZrNVZVbXhhTUZSV1ZUVlZNREZaVVd0b1dsWldjSEpXUjNONFpFWnZlbUpHWkdsWFIyaFZWbGR3UjFZeVVrZFhia3BvVW14S2IxUlhOVzlXTVdSWVpVZDBhVTFXY0VoWk1GcHZWR3hhUjFOc1pGZGlXR2d6VkZWYVUxWnRSa2hQVm1Sb1pXdGFXbFpzWkRCaU1WbDNUVlpvYUZOSVFsaFZhazV2WVVaWmQxZHNaR3BOVjFKNlZtMTRhMkZXU25SUFZGcFhZbFJDTkZScldscGxWbFp5WVVaYWFFMXVhRmRYVjNSclZUSk9SMWR1VG1oU1ZUVmhWbTB4VTFkR1duUk5SRlpZWWtad2VsbHJVbGRXYXpGMVlVWm9WMVpGY0VkYVZ6RkhVakpHUjFac1pHbFRSVVkyVm0xd1ExbFhVWGhUV0doaFUwVndhRlZxVGtOVU1WcHhVbXR3YTAxWFVsaFdiVEV3WVZVeFYxTnVjRmhoTVZwb1ZtdGtSMk50VGtkaFJuQnBVakpvVlZkVVNqUlZNazV6V2toV1ZXSkhhRlJaYTFaM1dWWlplV1JHV2s5V2JWSklWVEo0VjFZeVNrZGpSbXhYWW01Q1IxcEVSbXRXTVdSelkwZDRVMDFJUWt0V2EyTjRVakZWZUZOdVNtcFNia0pZVm01d1EwNUdVbkphUm1ScVRXdHdTRll5ZUhkaVIwcEhZMFp3V0ZZelVtaGFSRXBYWXpKRmVscEhhRk5sYlhoWlYxWm9kMUl4WkVkV1dHeHJVbnBzV0ZSV1duTk9iRnBJWTBaT1YwMUVSa2haTUZwdldWWktkRlZyZUZaaGExcG9XWHBHZDFOSFNrZGFSVFZwVmpKb1RWWnRNWGRTTVd4WFlrWmthVkp0VWxaV01HUnZWbFpzZEdONlJtaFNiRll6Vm14U1IxZEdXblJsU0d4WFRXcFdjbGxYZUV0a1IxWkZVVzFHVTFac2JETldiWFJoV1ZkU1IxWnVWbXBTYldodlZGWldkMVpXWkZkYVNIQnNVbTFTU0ZadE5VdFpWa3B6VjJ4b1dtRXlhRVJaYWtaclZqRldjbHBHVWs1V2JrSlpWbXBKTVZNeFZrZFhibFpTWWtkNFYxUlZXbUZVUmxsNFYyMUdXRkl3TlVkWGExcDNWakpLU0dSNlFsaFdiRXBRV2tSS1IxSXhUbGxqUmtwb1pXMTRXVmRYZUZOU2JWWnpZMFpvYkZJd1dsUlVWbVJUWld4a2NscEhPVlZpVlZZMFdUQmFiMVl4U25OWGJscGhVa1ZhV0ZwRldrOWpiVVpJWVVaT2FWWnJjRzlXTVZwVFV6RlZlRmRyWkZoaVJuQlpXV3RWTVdOV2JISmFSazVPVm14d1NWa3pjRmRoUmxweVkwWmFWMkpZUWxoV2FrcEhZMjFLUlZWc1ZsZFdia0pWVjFod1IxUXlUblJTYTJoc1VtczFUMVZ0TlVOWGJGcDBUVWhrYkZKc1dubFVWbFpyVmpKR2MyTkdVbHBpUjJoVVZtdGFVMVl4V2xWU2JHaHBVak5SZWxZeWRHcE9WbHB5VFZoS1YyRnNTbUZVVlZwM1RURlpkMWRzY0d4aVJsb3hWVEo0YTFZd01IZE9SRUpYVmpOQ1RGVjZSa3RXTVhCSlZHeFNhVkl5YUZWV1JscFhaREExYzFkdVRscE5NbWhRVlcweE5GZEdaSEpoUlRsb1ZtdHdlbGt3Wkc5V2JVcElWV3hTVjJGcldsUldha1pyWkZad1JrNVdaR2xTYmtKaFZqSjRWMVl4VVhoWFdHUk9WMFZ3Y1ZWdE5VTlpWbHB6VjI1a1YxSnNjSGhWTW5ScllXMUtTRlZ1YkdGV1ZuQnlXVlZrUm1WSFRrZGlSbWhZVTBWS1NWZFdVa3RVYlZaSFkwVnNWbUpYZUZSWldIQlhWMVphV0UxVVVtdE5hMXBJVmpJMVIxVXlTbFpYYmtKVlZqTm9TRlJyV2xabFIwWkpWR3hrVG1FelFqVldSM2hoWWpGa2RGTnNiRlZYUjJoWVdWZDBZV1ZzV25OWGF6bHFUVlpLZWxsVldrOWhWazVHVW1wT1YwMXVVbGhaYWtwR1pWWk9jbUZHVW1oTmJFcFpWMVprTkZsWFJrZFhiazVZWWtad1QxWnRlSGRsUmxaMFpVaGthRTFFUmxoWk1HaHZWakZaZW1GSVNscFdiSEJ5VlcxNFQyTXhXbk5hUjJ4WVVsVndSVll5ZUZkWlZrNTBWbXhrVm1KcmNHaFZiWGgzWTBaV2NWSnJkRlpTYkhBd1ZGVlNSMVZyTVZoVmJHaFlZVEZ3ZWxsWGVFdFhSbFp6Vld4V1YwMHdOREJXUjNSaFdWWmtSazVXV210U2JGcFBWbTAxUW1ReFduTmFSRkpxVFZad01GVXlkR3RYUjBwMFpVZG9WMkpZYUROWlZWcDNVbXhhV1dGR1pGZGhNVzkzVjFaV2EyTXhXWGxUYTJ4U1lUTlNXRmxzYUZOalZsSlhWMnhhYkZKdFVqRldSekZIVlRGWmVXRkljRmRXZWtJMFdXcEdjMVl5U2tsVWJXaFRWa1phZWxaWE1IaE5SVFZIVjFoc2JGSXpVbTlVVmxaelRrWlplV1JJVGxkaVZYQmFXVlZTVDFZeVJuSmpSWGhXWWxSR1VGVnFSbmRTTVhCSVlVVTFhVkpXYkRaV2JURXdWVEZOZUZOWWFGUlhSMmhXV1cxNFlWWnNiSE5oUlU1WFZteGFlRlV5TURWWFJrcHpZMFJDVlZac1NsUldhMVY0Vm1zMVZtRkdjR2hOV0VKWlZteFNTMUp0Vm5OV2JsWlVZa1p3Y0ZZd1pHOWlNVnBIVjIxR2FtSldSalJYYTJoVFZVWlplV0ZHVWxkaE1WcG9WakZhYTFaV1JuUlBWM0JPVmpGS1NWWnFTVEZVTVdSSVUyeG9hRkp0VW1oV2FrNVRUVEZhY2xkc1dtdE5WMUl3VlcweGQyRldXbGxSYTNCWVZteGFhRlpFU2tkV01XUlpZa2RvVTJKclNsbFhWM1JyVldzeFIxZHVSbFJoZWxaeVZGVlNSMU5zYkZaYVJXUldUV3R3V0ZVeWVHOVhSbHB6VTJ0NFYxWkZXbWhaZWtaWFl6RndSMXBHWkZOV2JrSlhWbTB3ZUU1SFVYZE5WV1JxVWxad1dWbHNhRk5YUmxKWFYyNU9UazFYZEROV2JUVlBWMGRLUjJOR2JGcFdWbHBVVm1wS1MxWldTbkpsUm1ST1ZtNUNXVmRVUm1GVU1sSkhVMjVPWVZJeWVGVlZiRlozWkd4YWNWTnFVbHBXTUZZMFZsWm9iMVpIU25OVGJHUmFWa1Z3VkZadGVITlhWMDVIV2tab1UySkZjRmxXYlRBeFlURmFSMWR1VG1wVFIzaFlWRmR3UjFOR1dYbGxSbkJyVFd0d1JsWnRlR0ZoVm1SSFUyNXNWMkpZVW1oWlZFWlBVakZhZFZSdGJGTmlhMHBhVmxSQ1YxTXdOWE5YV0doWVlsVmFjVlJXV25kWFJsVjVUbFprV2xacmNERlZWM2h2VjIxS1dWVnJlRmROVm5Cb1dURmFUMWRYUmtaT1ZrNU9VbTVCTVZacldtRlpWMFY1VW01T1ZXRXlhSE5WYlhoM1dWWnNWVk5zVGxaTlZrcFhWakl4UjFZeFduSlhiSEJhVmxad1VGWnFTa3RUVmtaeFZteG9WMDB4U205WFYzQkhWMjFXVjFSdVNsaGlXRUpVV1ZSR2QxZHNXbkZSYlRsU1RWVTFTRll5TlVkVk1rVjZVVzVPVm1GclJYaFZha1phWlZVeFZscEdXazVoTTBKYVYxWldiMWxXV1hoVGJrNXFVakpvYUZWclZtRmpiR3cyVW01a1UwMVlRa2xWYlhoVFZrWktWbU5HUmxkaVZFSTBWRlZrVW1WR1VuSmFSMFpVVWxoQ1dsZFhlRzlWTVdSWFZtNUdVbUp0VWxSVVZscExaV3haZVUxRVZsZE5SRVo1V1RCYWQxWXhXalpTYmxwWFlrWndhRmw2U2s5VFZrNXpZMFUxYVdKWFpEWldiRkpIV1ZkUmVGTllhRmhpYkVwd1ZXMXpNV05HV1hkYVJUbE9UVlp3TUZwVldrOVdSVEZGVm10c1YxSnRhSFpYVmxwTFYwWldjMkpHY0dsWFJURTBWbXBHWVdNeVRYaGpSV2hRVm0xb1ZGbHJXbmRPVmxwMFRVUkdhRTFXY0VoVk1qVlBZV3hPU0dGR1pGcGlSMmhQVkZaYWMxWldTblJTYlhCT1lYcFdTMWRVUW1GWlZsSjBVbTVLV0dGcmNGaFpWRXBTVFVac1ZWSnJkR3BOVmtveFZsZDRRMVl5U2xkVGJFSlhZbFJCZUZWVVNsZFdNV1J5V2taa2FWZEdTbGhYVjNoaFdWWmtSMWRzYUU5V2JWSllWbXBDZDFOV2JGWlplbFpYVm14dk1sVnROV0ZXTVZwWFkwZG9ZVkpYVWxoVk1HUlRVakZrY2s1WGFHeGlSbkJoVm1wR2EwMUhTWGhVV0doWVYwZDRWVmx0ZUV0V01XeDBZM3BHVjAxWGVIcFpWV00xVkdzeFYySkVVbGROYWxaeVZtcEtTMU5HVm5GUmJVWlRWbTVDZVZadGNFSmxSazVYVW01S2FGSnRhRmhWYkZaM1RXeGtXV05GWkdoTmF6VjVWRlphWVZsV1NuUmhTRUpXWWxoU00xWXhXbUZTTVZwMFpFWmFUbFpyY0VsV2JYaHZZVEZrU0ZOcmFGWmlhMXBZV1d4U1IxWkdVbFpYYkdSclVqRmFTVnBGV210VWJVVjZVV3BXVjFaRmEzaFhWbHBhWlZaT2MxWnNUbWhoZWxaWVYxWmtNR1F4VlhoalJscFlZWHBzV1ZacVFuZFRSbHBZVFZjNVZXSlZjRmxaVlZKTFZqSktTRlJxVW1GV00wNDBWbXBHZDFKc2NFZGFSMnhvVFZoQ1dGWXhaRFJWTWsxNFZtdGthVk5GY0ZsWmJYTXhWVVpXZEdWSVRrOVdia0pYVm14U1YxWXdNVlpqUmxwV1lsaFNhRlp0ZUZwbGJFWnpVV3hrYVZKdVFtOVhXSEJIWVRKU1YxUnVUbUZTVkZaVVZGWldkMU5XV1hsbFIwWmFWbXhzTlZaWGRHOVZNa1Y1Vld4c1dsZElRbGhXYTFwVFZqRmFkVnBHWkdsU2JrRjNWMVJDVjFReFpITlhXR1JPVmtaS1dWbFVSbmRrYkZweldrVmFiRlpzV2pCWlZWcGhZVlprUmsxVVVsZGhNVXBJVjFaa1UxTkdWbkppUjBaVFlsZG9XVmRYZEc5Uk1EVkhWMnhXVkdKdFVsZFVWM1JoVWpGU1YxZHRPVmRpVlZZMVdWVmFhMVpXV1hwUmJHaFhWbFp3ZWxZd1pGZFNiVkpJWTBVMWFHVnNXa3BXTVZwWFdWZFJlVkpzWkZSWFIzaHZWVzE0WVZkR2JGaGtSWFJvVW14c05WUldXbXRXTWtZMlVteG9WMDFxUlhkV1ZFcEhUbXhhYzFGc1pHbFhSMmhWVm0xd1FrMVdXWGhqUldSaFVtMVNjRlpzV25kWFZscEhWMjFHYWsxRVFqUldWM2hoWVVaT1JrNVhPVlppV0UxNFZURmFkMVpzWkhWVWJHUk9ZVEZaTUZacVNuZFRNVnBYVjJ4a2FsSkZOVmRaYTFwM1ZFWnJlV042VmxkTldFSkhWR3hhYTJGV1NqWmhla0pYWWxSRk1GbFhNVmRUUmxKWllVWmtXRkl6YUZaWFYzUnJWVEZhVjJKSVNsZGhNMUpaVlcxNGQwMVdhM2RXYTNScFVtdHdlbFl5ZUdGV2JVcFZWbXhDVjJGclJqUldNRnBYWTFaS2MxcEdaRTVOUkVVd1ZtMHhNRmxXVG5SV2EyUlZZbXhhY1ZWdE1WTlhSbEpWVTIwNVYxWnNjRmxaTUZaclZsVXhWbUpFVWxoaE1taFlWbTB4UzFkV1ZuTlZiVVpYWld0VmQxWnFRbUZaVmtsNFkwVldVbUpZVWs5V2JGSlhVMVprVjFWck9XaE5WMUpKVlRKMFlWUXhXblJsUjBaYVZrVmFNMXBYZUZOa1IxWkpWR3hrYVZORlNrcFdSRVpoWVRGU2RGSlljRkppVlZwWlZtMTRZV05zYkhGU2JYUnJVbXh3TVZVeWVHOWhWMFY2VVcxb1YxSnRVak5WYWtaaFVqRmFkVkpzVG1sU1ZGWjRWMVpvZDFZeFpFZGFTRXBoVW5wc1ZsbFljRWRTTVZwMFkwWk9WMDFyY0ZaVlYzQlBXVlphVjFaWWFGWk5SbkJRVmpGa1MxSXhWbk5oUms1T1lsZG9ZVlp0TVhkUk1rVjVVMWhvWVZKdFVuQlZNRnBMWTFad1dHUkhSbGhTYkhBd1ZGWlNVMkpHV25SbFJtUlhZbGhOTVZZd1pFdFNNazVKWTBad1RsSXlaM3BXYlhCQ1pVZFNXRkpyYUdoU2JWSlVWRlJLYjJJeFpISldiWFJYVFZWc05Ga3dWbXRoUmtsNVlVVTVWMkpVVmtSYVIzaGFaVVp3UlZGc2NGZGhla1V4Vm10YWIyTXhXbGhTV0d4c1VucHNWMWxzVWtkV1JscEZVbTVPYTFKVVJsbFVNV1EwVmpKS1NWRnFXbGRpUjFGM1ZGVmFZVkpyTVZkYVIyeFRVbXR3V1ZaWGNFOWlNbFp6WWtab2JGSllVbkpWYlhoaFpXeHNWbHBGWkZkTlJFSTBWVEowTkZZeFNuTlhiV2hZVm0xU1ZGVXdXbE5qYkdSMFVteE9hV0V3Y0ZwV2ExcFhWVEZaZDA1V1pGaGhNbWh6VldwQ1lXSXhVbGRhUkZKWVVteFdOVlJzV2s5V01rcFdZMGhzVmsxdWFIWldNakZHWlVkT1JWUnNWbGRTVm5CdlZtMHhOR0V5VWtkVGJrNVZZWHBXV0ZSVVJrWmxWbGw0VjJ4a2FFMXJNVFJXVnpWUFYwZEtjazVZUmxaaVZFVXdWakJhYzFkSFVraFNiWFJwVWpOamVWWlhNVFJUTWtwSFUyNVdVbUV5VW1GV2JGcDNZVVpzVjFkcmRGZFdiSEI2VjJ0YWEyRldXa1pXV0dSWVlURktTRlpVUmtwbFJtUnpZa2RHVTJKWGFIZFhWbEpQVVRKV1YxZHJaRmhpVlZweVZGVlNSMU5HV25ST1ZrNXBVbXMxU1ZaWGVHOVdWbGw2VlcxR1ZWWXphR2hhUldSVFUwVTVWMXBGTlZkV00yTjVWakZhVjFsWFJYaFhiR2hVWVRKU2NWVnFTbTloUmxaelYyNWtWVkp1UWtoV01uTTFZV3N4VjFkcVFscFdWMUoyV1d0a1MxSXlUa2RqUm1ScFYwWktiMVl4V21Gak1XUkhWbXhzYVZKck5XOVVWM2hMWkRGYVdHUkhSbXROVm5CSVdXdG9TMWxXU25KT1dFWmFZVEZ3YUZSVlduZFNiVVpJWkVkc1UwMUlRa2xYVkVKaFl6RmFWMWR1VW1oU2EwcFlXV3hvVDA1R1dYZFhiR1JxWWtoQ1NGWXljekZoVjBwWVducEtWMkpVUmpOVmVrWkxaRVphY21GR1ZtaE5iRXAyVmxjd2VGVXhaRWRXYms1WVltMVNWMVZ0TVZObGJGcDBUVlZrYUUxRVJsZFpNR2gzVjJzeFIxZHVTbGRpVkVaTVZqQmtWMUl4Vm5OV2JHUnBVbTA1TmxaclpEQlpWbXhZVkZob2FFMHpRbWhWYWs1dlZrWlNWbHBFVGs1V2JIQlpWRlpTUTJGRk1WaFZhMnhXVFdwV1RGWXdaRXRTTWs1SVVteHdhRTFZUWsxWGJHUTBXVlpLVjFOdVRsVmlSMUpQVm1wR1NtVkdXbkphU0hCUFZteFdOVlV5ZEc5aE1sWnlWMnhzVjJFeFZYaFVWRVpoWTFaT2NscEdUbWhsYTFwWlZqSjBhMk14VlhoVGJGWlhZa2RTV1ZacVRsTmhSbVJYV2taT2FrMVhVbHBaYTFVeFZqRmFkVkZ1Y0ZkV00wSkRWRlphVDFJeFduTmhSM2hVVWpGS1dWWkdXbUZqTURWSFZsaHNiRk5GTlZsVmJURlRVMnhXV0dSSE9WaGlSbkJIV1RCYVExWXlSbkpYYkZKaFVteHdWRnBGV2t0ak1WSnpXa1pPYVZORlNtaFdiVEV3V1Zac1YxZFlhRmhYUjFKUFZUQmtiMWRXV1hkYVJ6bG9VbXhXTTFkcldrOVdNVXB6VTJ4b1dHRXhjRkJXUjNoTFl6Sk9SVkZ0UmxkV01VWXpWbTF3UjFkdFVYbFVhMnhwVW01Q1QxVnFRWGRsUmxwMFRVaG9WRTFYVWxsVmJYUmhZa1pLZFZGdE9WcFdSVm96Vm14YVlXUkhUa1phUm5CWFRWVndXVmRVUWxkaE1XeFhVMjVLVDFkRlNsaFpiR2hUVFRGa1YxZHNjR3hXTVVwSVYydGtiMVJzU2taWGEzQlhWbnBGTUZkV1dsTmpNWEJHVjIxd1ZGSlZjRmhYVmxKSFpERlNSMWRZWkZoaVJUVlpWV3BCTVZOR1pISlhiRTVXVFd0d1NsVlhlR3RXTVZwR1lqTmtWVlpXY0dGYVZscFBZMjFHUjFkdGFHaE5XRUpaVmpGa05HSXlTWGxVYms1cFVtMVNXVmxzVm1GV1JteHlWMjVrV0dKSFVubFdNakV3WVVaYWRGVnJaRlpOYmxKNlZqQmFZV014VG5KaFJtaFhZa2hDYUZkc1ZtRlpWMUpYVjI1T1dHSlhlRlJXYkdoRFYyeGFjbGR0Y0d4U01HdzBWako0YTFsV1NuUlZiR1JhVmtVMVZGWkVSbE5YUjFaSVVtMTRhVkl4U2pWV2FrbzBZVEZhZEZOc1dtcFNWMUpXV1d0YWQxVkdXbk5YYlVacVRXczFSbFpIZUd0VWJGcDFVV3hvV0dKR2NISldWRVpQVW1zNVYxcEhSbE5OYm1oWlZtcENWMU14VGxkWGJrNVdZVE5DYzFWdGRITk9SbGw0WVVoT1ZrMVhVa2xaVlZwelYyMUtTRlZ1V2xoV2JIQm9XWHBHYTJSV2NFZGFSazVwWVRCd1NWWnFTakJaVjBWNFYydGtWR0pyY0hGVmExWkxZVVpXYzFkdVpHcGlSM2hYVjJ0YWEyRnJNVmhWYkZwV1RXNW9jbFpIZUdGa1ZrWnpZa1pvVjJKRmNFMVdhMk40VmpGSmVGcElUbWxTTUZwVVZtdGFZVmRzV2xoTlZFSnJUV3hLZWxZeWVHOWlSa3B5VGxab1ZWWnRVbFJWTUZwaFYwZFdTRTlXVms1V2JUaDVWMWQwYjFJeFdYbFRiRlpYWVRGS1dGbFhkR0ZaVm5CWFdrWmtWRkpyY0RCWmExcFBZVVV3ZDFOVVNsZGlSa3BMVkZaa1RtVkdjRVpoUms1WVVqSm9lRlpYTVRSVE1XeFhWMjVTVGxack5WWlZiWGhoWlVaVmVXTjZWbFpOUkVaNVdUQldiMWRzV2xkalNFcFhVak5PTkZwRlpFZFNNazVIV2tkb2FFMVlRblpXYWtaaFdWZE5lRmRZYUZWaVIzaHdWVzE0UzJJeFVsaE9WemxZVW0xU1dGbFZhR3RXTURGWVZXdG9WMVl6YUZoV1ZFcEdaV3hXYzFwR1pHbFdSVnBWVm1wR1lXUXhTbk5qUlZaU1lrZFNiMXBYZEdGWGJGcHpXa1JDYVUxV2JETlVWbHB2WVVaT1NWRnNhRlpoYXpWMldWVmFWMlJIVmtaUFYzQk9WakZLTmxkVVFtdGlNVkp6VjI1V1VsWkZjRmhaVkVaM1ZrWldjVkpzV214V2JFcGFXVlZhYjJGWFNrWmpSa3BYWWxSQ05GbHFTazlTTVZwMVZXczVWMVpVVmxwV2JURTBaREpXUjFaWWFGWmhNbEp2VkZWU1IxZEdiSEpWYkdSWFlYcEdNVmxWV205V01WcEdZMFZrWVZaNlJraFZNRnBMWXpGYWMxcEhlR2xTYlRrMVZtMHhORll4YkZoVldHaFVZbXMxY1ZWc1duZGhSbFowWTNwR1ZVMVdjSGhWYlhSM1lUQXhXRlZzYUZkaVZFVjNXVlpWZUZZeFRuVmpSbWhvVFZad2IxWnRkR3RTTURWMFUydGthRkp1UWxoVVZFWktaVlphUjFadFJtcE5WbkJZVlcxNFYxVXlTa2RUYkZKYVZrVTFSRmRXV210WFIxSklVbXhrVGxZeFNrbFdWRVp2WkRKR1IxTnVUbGhpUjNoWVdXeG9iMVJHVlhkWGJtUlRWbXMxZVZReFpIZFViRnAxVVZob1YxWjZSVEJXYWtwSFZqRmtjbUZIZUZSU01taFpWbTAxZDFKck1VZGFSbVJoVW0xU1ZGUldXbmRYYkd4eVZsUkdWazFWY0hwWk1GcHpWakZaZWxGclVtRlNSVnBRVldwS1JtVnNjRWhoUms1c1lsaG9XbFl4V205a01VbDRXa1prYVZKc2NHOVZha0poVjFac2NsZHVaR3hpUm5Bd1dUQmFUMWRIUmpaU2FrWmFWbGRTZGxZeWMzaFdNazVJWVVad2JHRXhjSGxYVkVwNlRWWmtTRk5yYUdsU2JWSlBXV3hhUm1WR1duUk5XR1JUVFd0V00xUldWbXRoVmtwMFZXeGtWMDFIVW5aV2JGcHpaRWRPTmxKdGFGTmlSbGw2Vm1wS01FMUdXWGhUYmxKc1UwZDRZVlpzV21GVlJsbDNWMnQwYWsxVk5YcFdNbmhoWVZaa1IxSnFUbGRoTVVwSVYxWmtVMUl4V25WV2JXeFRZbFpLV1ZaR1VrZFRNbFpYV2taa1ZtRXdjSE5WYlhoM1RVWlZlV1JHWkZkaVZYQktWVmR6TlZadFNsbGhSRTVhWVd0YVlWcFZXbXRrUmtwelZXczFhVkpZUWt0V2JHTjRUVWRGZUZkdVVsUmhNbmhUV1d4U2MxWnNXblJsU0dST1lraENXRll5TVRCaGF6RlhZMFJDVm1KWWFETldha0Y0VWxaYWMySkdaR2hOYXpFMFZsZHdSMVl5VWtkVWJrcG9VbXh3YjFwWE1UUlhWbVJZWlVaT1YwMVZjRWhXVnpWVFlrWktkVkZ1VGxkaGExcE1WVEJhYTJOc1pIVmFSbVJPWVROQ1NWWnFSbE5TTVZsNFYycGFVbGRIYUZkYVYzUmhWVEZ3VmxkdGRHdFdiRm93V2xWYVQyRldXWGxoUnpsWFlsUkdNMVpFUmxOa1JscHlXa2R3VTFZeWFIcFdWRUpYWkRKTmVGZHVSbE5pVlZwVlZXMHhVMlZXWkhKaFIzUlhUVVJHZVZZeFVrdFdNa3BaVVcxb1YyRnJXbWhWYlRGTFVsWldjMVpzWkZkaWEwcFdWakowVjFsV1VYbFViazVxVWxkb2NWVnRjekZYVmxaMFpFaGtXR0pHYkRSWGExSkRZVVV4VjFKcVRsVmlSbHB5V1ZaYVMxSXlUa2RWYkhCb1RWaEJlbGRVU2pSVk1WcHpWbTVLWVZKc1NuQlZhazV2VjBaYWNWTnFVbFZOYTFwSVZqSTFTMkZzU25WUmJHUlhZV3MxZGxSVVJtRmpWazV5WkVaa1YyRXpRbGRXVm1ONFVqRlZlRk5zWkdwVFIzaFlWbXBPUTFOR1pGZGFSazVYVFZVMU1WWkhlRk5oVmtsNVlVWldWMUpzY0ZoYVJFRXhZekZrZFZSc2NFNU5iV2hSVmxjd2VFNUdXWGhWYkdSWVlsaFNXVlZxUWxkT1ZteFdWbFJXVjAxcmNFbFdWM2hUVmpKR2NsZHNVbGRoYTFweVdrWmFVMk5yT1ZkVWJXeFRZa2QwTkZadGRHdE9SMFY0VTFob1dGZEhVazlXYlRGVFkwWndXR1JJWkZkTlZuQXdWRlpqTldFeVNrZGpSRUpoVmxkU1NGWlVTa3RUUmxaeFVXeHdWMVp1UVhwWFYzUnJVbTFXU0ZScmJHbFNiV2haVlRCV1MxUldXbGhqUldSVVRXczFlVlJzV210WlZrcHpZMGhDVm1KR1NsaFdWVnByVjBkV1NHUkhiRTVXTVVwWlZtcEpNVkl4VlhsVGJHeFdZWHBzVjFsc2FHOWxiRkp5VjIxMGFtSlZXa2RhUlZwWFlWWkplRk5yYUZkU00yaG9XV3BHYTJSR1RuTmlSMmhUVjBkb1dWWnRlR0ZrTWtaSFlrUmFVMkpIVW5KV2JYaExaV3hzVmxkck9XaFdhelZIVlRGU1ExWXlTa2RqU0VaVlZtMVNSMXBWV210WFYwcEhWVzFvVG1KRmNHRldNVnByVFVaTmVGZHVUbGhpYkVwUFZteFNWMVF4V25SbFNFNU9UVmRTZVZadGNFTldhekZGVW01c1drMUdXbWhXYWtGNFpGZEdTVk5zWkdoaE0wSk5WbGN3ZUZReFNuTlhiazVoVWpKNFdWVnNWbmRVYkZwellVaGtVMDFWTlRCV2JYaHJWbTFLY21OSGFGWmhhM0IyVm10YWMyTXhaSEprUjNST1ZtNUNXbFpHVmxOU01WWnlUVlprVkdKSGFGbFpWRVozWld4c1dHVkZkRmhTYkZwNlZsZDRWMVl3TUhkT1JFSlhVak5TYUZkV1dtdFNhelZYVjIxMFUySkdjRkJXYlRBeFVUQTFWMWRyYUd4U2VteFRWRlphZDAxR1ZuUk9WWFJWVFZkU1Ixa3dXbUZYYlVwSVlVaGFXbFpXY0ROVmJYaGhWMWRHUjFwR1pHaE5XRUV5Vm0xd1MyVnJNVmRYV0doWVYwaENZVlJVU2xOWFJteHpWV3RhVGxKdGVIaFZNblIzWWtaS2RGVnViRmhoTWxKSVZsUkdXbVZYUmtsalJtUlhaV3RWZDFZeFdtRmpNVmw0V2toV1ZHSkhVbkJaYkZwTFYxWmFXRTFJYUU1U1ZGWklWakZvYzJKR1NYcFZiVGxWVm14YWVsUnJXbHBsVjFKSVpFWndWMkV6UWxsWFZFSmhZakZaZUZOWWNHaFNNbWhoV2xkMGQxVkdWbk5YYlVacVRWaENTVmxyV210Vk1WcHpZa1JhVjJKWVVtaFdha3BHWlVaT1dXRkdVbGhTTW1oWFYxY3hORmxXV25OaVNFNW9VbFUxV0ZadGVHRmxSbFY1VFVSV1dGSnJjSHBaTUZKRFZsZEtTR0ZJU2xkaGEwWTBWbXBHYTJOdFJrZGFSVFZwWWtWd1dsWnRlRk5UTVUxNFYyNU9ZVk5HV2xSWmExcGhWMFpzY2xkc1pFOVNiVko2VjJ0U1UyRkZNWEpPV0hCWVlUSm9WRlpWV2xwbFYwWkhWV3hrYUUxV2NHOVdNVnBoV1ZaWmVHTkZiR3BTTTJoVVdXeGFTMU5XV25GU2JUbHJUVlp3TUZVeU5VdGhiRXAwVlcxb1YyRnJOVlJaVlZwaFZteGtjMWR0ZEU1V01VbDNWbGN3ZUdReVJsZFVhMXBVWVRKNFdWWnRlR0ZqYkd3MlVteGFiRlpyTlRGVk1uaFRZVWRHTmxac2JGaFdNMmhVVlcweFVtVkdaSFZTYkU1cFZsWndlVlpYTVRSWlZtUnpZa1phV0dKVWJHOVdha0pYVG14V1dHVkhPVmhTYkhCNlZUSjRRMVl4V2taWGJrcFdZV3RhV0ZsNlNrZFRSMVpIVkd4b1UyRXpRbGhXYlRCM1pVVTFTRlZZYUdGU2JWSnhWV3hhZDJGR1ZuTmFSazVZVW0xNGVWWnROV3RpUjBwSVpFUk9XbFpYYUZCV01HUkhUbXhLY21GR1pHbFNhM0JKVm0xd1FtVkhVbGhTYTJoVFlsVmFXRnBYZEdGVFZscFZVVzEwVTAxVmJEUlpNRlp2WVZaS2NrNVlRbHBXUlVvelZGZDRZV1JIVmtkVWJFcE9ZVEZaTUZacVJtOWlNVnBZVWxoc2FGSnRVbUZXYTFaM1ZrWlpkMWR1VGxoV01EVklWMnRhYjFVeVNrbFJhbFpYWVd0c05GVnFSbUZUUms1eVdrZHdVMUpWY0doV1JsWmhWMjFSZUZkclZsTmhNMUp4VkZkMGQxSnNXbGhsUnpsb1VsUkdXRmt3VWt0V01rcEhVMnRvV2xaRldsQldha1pMWkZaU2MxWnRiRlJTVlhBeVZtdGFZV0l4UlhoVmJHUllZbXhLVDFacldrdFpWbHB4VW10MFdGWnNjRWxhUldRd1YyeGFjbUpFV2xkV00yaDJWakl4UzFkV1ZuSmxSbHBvWVRGd2IxWnFRbFpsUmxwWFZtNVNhMUpVVm05VVZFSkxVMnhhYzFWcmNFNVdiRlkwVmpJMVUxVXlTbkpqUmxaYVlrZFNkbFpxUm5OamJIQkhWR3hrVTJKclNrcFhiRlpyVWpGYVIxTnNWbE5pUjFKWVZGZHdSazFHYkZkWGEzUlhUV3MxUmxadGVHOVdNa3BIWTBjNVdGWXpRa3hWYWtaTFkyc3hWMXBHYUdsWFJVcFZWMVpTUjJReFpITmFSbVJXWVRKU1ZWUldWVEZUUm14eVZXMUdWazFyY0ZkV01qVkhWMnhrU1ZGcmFGZGhhMXA2V1RKNGQxTkZPVmRYYXpWb1RUQktTVll4VWtOaU1rVjRWMWhzVkdKSGVGZFpiWFIzVm14c1ZWSnVaR3BpUm5CNFZXMDFhMVV3TVZsUmEyeFdZbGhvVUZaVVJtRlhWa1p6VjJ4a1RsWXhSWGRXTVZwaFl6RlplRlZ1U21GU2JXaHdWV3BLYjJWc1dsaE9XR1JxVFdzMVNGWnROVk5oYlZaeVYyeFNWVlpzY0V4YVYzaHpWbXhhY1ZGc1pFNWhNMEpZVjFSQ1lWbFdXblJUYTJob1UwVndXRmxyWkZOVVJsbDRXa1ZrVkZack5YcFpNRlV4WVZkS1dHRkVWbGROVjJnelZXcEdWbVZXVWxsaFJtaHBZa1Z3ZDFaWE1YcE5WbVJYVm01T1YySnJjSE5WYlhoM1pVWldkR1ZGT1ZaaGVrWlpXbFZhYjFZeVNraGhTRnBZVm14d1RGWXdXbGRqTWtwSFkwWmtVMVp0T1RaV2JURTBXVmROZVZSWWFHcFNWMmhSVm1wS2IxWkdiSEpYYm1SUFZteHdNRlJWYUc5Vk1ERlhZa1JTVmsxcVZsUlpWRVpMVWpGa2RGSnRSbGROTURFMFYydGtORmxYVGxkVWJrcHJVbTFTY0Zac1VsZFRSbVJYVm0xR1dsWnNTakJWYlRWTFYwZEdjMk5HYkZkaVdHZ3pXVEo0VjJSRk1WZFRiWGhYWWtWd05WWXlkR3RrTVZWNVUyeGtWR0pzY0ZoVmJYaDNaR3hXVlZOcmNHeFNiVkphV1ZWYWIyRldaRWRUYkdoWVZqTm9hRmRXV210U01XUjFWV3M1VjJKV1NsbFdiWEJEWkRGT1YySkdXbWhTVlRWWVdXeFdkMWRzYkZaVmF6bFhUV3R3V2xsVmFFdFdNa1p5VjJ4b1drMXVUVEZXYWtaclkyczFWMXBIYkdoTlNFSk1WbTB3ZUU1SFJYZE9WV2hVVjBkNFZGbHRlRXRYUm14MFpFaGtXRlp0ZUhsV01uUXdWakpLUjJORVFtRldWMmh5VmtkemVGWXhUbk5hUm1ST1ltMW9VVlp0Y0VKbFIwNXpXa2hLWVZKc1drOVdiVFZEWlZaYWRHTkZTbXhTYXpWWVZXMDFUMkZHU25SaFJtaFdZa1phTTFscVJtdFhSMDVHV2tad1YwMUVWalZXUmxwaFl6RlplVk5zYUdoU2JFcFlXV3hvVTAweFdYaFhiVVpUVFZad01GVnRNVEJVYlVWNFkwVnNXRlpGU2xoWFZscHJVMFpPY21GR1dtbFNNMmhaVjFkNFUxWXhTa2RXV0dSWVlraENjMVpzVWtkWFZsRjRXa2M1VmsxV2NFZFdNblJ6VmpKR2NsZHNVbFpXUlZwaFdsWmFUMk50UmtkWGJXaG9aV3hhV1ZZeFdtdE5SbXhYWWtaa2FsSnNjRmxaYlRGVFZrWlNWMkZGVGxSV2JYUXpWakp6TlZZd01VVlNiR1JhVFVkU1NGWnFRWGhYUmxaVlVXeHdWMUpZUWt4WGJGWmhWakZrV0ZKclpHRlNiV2hVVkZaV2QxZHNXWGhYYkU1VlRWWldORlp0ZEd0aFZrNUdZMFpzV21KWVRYaFdWVnBYWkVkV1NWUnJPVmRpUlhCWVZteGtOR0V5UmtkVGJGWlRZVEZ3VjFsc2FHOWpiRmw1VFZWYWJGSnJOWHBXVjNocllVZEZkMWRVUWxoV1JWcG9WMVprVG1WR1NuVlViVVpUVmtaYVZWZFhNVEJUTURWWFYyNU9WbUV3Tlc5VVZsWnpUa1phU0dSSFJsWlNiSEF3VmxkNGMxZHRTa2hWVkVKYVRVWndlbFpzV2tka1ZtUnlUbGRzVTJKclJqTldhMXBYWWpKSmVGVllhRlJYUjFKUFZtdGFZVmRHVm5WalJtUldVbXhzTTFkclZqQmhhekZZVldwQ1dsWldjR2haVmxwclVtc3hWVlZzWkdoTlZYQkpWakZhYTFVeFRrZFdia3BwVWpCYVZGbHNaRzlYVm1SWVpFYzVVazFFVm5wV01XaHpZVEZLY2s1V1pGVldiSEF6Vm1wR1UxWXhaSFJrUjJoWFlUTkNTVlpVU2pSaU1WcFhWMjVTVm1Kc2NHRlVWelZ2WVVacmVGZHJPV3BpU0VKSldUQlZNVll4V2tkWFZFcFhZV3R2ZDFkV1dscGxSbVJaV2tVMVZGSXhTbFpYVjNSclRrWmtWMkpJU21GU2EzQlBWVzB4TkZac1ZuUmxTR1JwVW10d01WVlhkSGRXTVVvMlVtcE9WMVpGUmpOYVZtUkhVMVp3UjFwR1pHeGhNVmw2VmpKMFUxRnJNVmRUV0doaFUwWmFWbGxzVm1GV1JsWjBaRWhrYkZac2NFaFdNakZIVmtVeGMxZHVjRmROVjJoNlZrUkdZV1JHVm5OYVJuQnBVbXh2ZWxaVVJtRmtNVnB6V2toU1VGWnRhSEJXYkdoRFUxWmFWVk5xUWxaTlZuQlpWV3hvYjJGc1NYbGhSbWhhWVRGd00xWkZXbkpsVjA0MlZteGtUbFpzY0RaV2EyTjRZakpLU0ZOclpHaE5NbWhZV1d4b1ExUkdVbFphUlZwc1VtczFXbGxWV210WFJrbDRVMnhDVjFaRlNuSlVhMlJLWlVaYVdWcEhSbE5oZWxaYVZsY3dlRTVHWkZkalJWcFhZV3RLYjFsc1ZuZFRWbkJXVld0T1dHSldXbmxVYkdoaFZqSkdjbEpxVWxkTlJuQllXVEZhUzJNeFpIUmlSbWhUVFcxb1UxWnFSbUZaVm14WFlrWmtXRmRIZUZaWlZFcHZZakZXZEUxV1RtcFNiR3d6Vm0xME1GVXhXbk5qUkVKYVRVWmFURlpIZUdGamJVcEZWbXhhVG1Kc1NqWldiWFJyVXpGT1NGSnJiRkppUjFKdlZGZDRSbVF4V25GU2JVWmFWakZLU1ZaSGRHRldWMHBJVldzNVZtRXhjR2hXTVZwaFkxWk9jVlZ0YkU1V2Exa3dWbXBLTkdJeFduUlRhMmhvVWpCYVlWbFVSbmRoUmxKVlVtMUdhMUl4V2toWGEyUXdWVEZhUjFkc2NGZFdla1V3V1ZSR1UyUkdTbGxoUjNCVFVteHdXVmRXWkRCak1EVkhZa2hHVTJKWVVuRlpXSEJIVjJ4YWRFMVhPVmRTYTNCYVZWY3dOVll4V2paU1ZFSmhVa1ZHTTFwVldtRmtWa3B6Vkcxc1UwMVZjRFJXTVZwdlpERlplRnBGWkdGVFJYQm9WVEJWTVZkR1ZuUmtTR1JYVFZad01Ga3dXazlXTURGeVkwWmFWbFl6UWxCWFZscExVbTFPUjFSdFJsTlNWVmt3Vm0xd1IyUXhTWGhhU0U1b1VtczFUMWxzWkc5WGJGcHhVbTF3YkZKVVJrbFdWbWh2Vm14a1NHRkdiRnBpV0doTVZrUkdZV1JIVGpaU2JHaFRZa2hCZDFaR1dsTlZNa3BIVjI1U1ZtSnRlRmxXTUdoRFYwWlpkMWRyZEdwaVZUVktXVEJhZDFSc1NuSmpSV3hYWVd0d05scFZXa3BsUm5CSlUyMTRVMkpyU25aV1JscHZVVEZTVjFwSVNsZGlXRkpZVkZaV2MwNUdaSEpoUlRsWVVqQndTVlpYTlVOV01rWnlZMGhXWVZac2NHaGFSV1JYVWpGU2MxUnJOVmROTW1oaFZtMTBhazFXVlhoWGJHaFRWMGQ0VjFsclpEUlpWbXhWVW01a1RrMVdjRVpWYlRWUFlURktWVkpzYkZWTlYxSjZWa2Q0V21WR1RuTmlSbVJvWVRKM01GWlhjRWRaVmtweVRWWnNWR0Y2YkZoVmJGWjNWMVphV0dORk9WWk5hMXBJVmpKMGIySkdTWGRYYmtwV1lsaG9hRlJWV2xKbFJtUnpXa1prVGxKRlNURlhWbFpYWWpGa1NGSllhRlJoTW1oWVZGZHdSMWRHVm5GU2JtUlVWbXhhZWxaSE1YTlZNa1Y2VVd4R1YwMVdjSFphUkVaTFkyc3hWbHBHYUdsaE0wSm9WMnhrTUZsV1pFZFZiR1JZWWtkU1VGWnRlRmRPVm5CR1dYcFdhRkpyY0hsVWJGWnJWbXN4ZFdGSVNsZE5ha1pNVlRCa1IxTldaSE5XYkdSVFZtNUNiMVl5ZUZkWlYwVjVWV3RvVm1FeVVtOVZiWE14VkRGYWMyRkZUbFJpUm5CNFZUSndRMkZGTVVWU2EyaFhWbnBXVUZZd1pFdGpNV1J6Vkd4d1YxSlhPSGRXYWtKaFl6RmtTRlZyYkZoaVdGSlBWbXBPYjA1R1dsVlRha0pPVW14V00xUldXbUZVTVZwR1YyeG9WbUp1UWtoVVZFWmhZMnhrY21SR1pGZGlTRUkyVjFaV1lXSXhXWGROU0doVVlsUnNXRll3YUVOVFJteFZVbXR3YkZac1NubFhhMlJ2VlRBd2VXRkdWbGRTYkZwb1drUkdZV014WkhOaFIzQlRWakZLYUZadE1YcE5WazVIV2toS2FGSllVbGxWYWtKM1ZqRlplVTFFVmxkTmEzQmFXVlZTVDFZd01VZGpSMFpoVmxad1dGa3llRk5qTVhCR1RsWmthV0V3Y0VwV2FrWmhWVEZSZVZOWWFGaGlhelZaV1ZSR2QxZFdiSFJrU0dSb1VteGFlbFl5Tld0V1ZrcHpZa1JTV0dFeFduSldWRUY0WTJ4a2NtSkdjRmRXTVVveVYxZDBhMU14U1hsVWEyUnBVbTFTY0ZaclZrcE5SbHBIVm0xR1dHSldXa2xWTW5ScllVWktjMWR1UWxwWFNFSllXa2Q0WVZJeFZuSmtSVGxUVFVSRk1GWnRNREZTTVZaMFUyeGFXR0pyV21GWlZFWjNZVVp3Vmxkc1pHdFNNVXBHVlZkNFlWUnNTa1pYYkd4WFZucEdNMVpVUmxwa01ERlpWbXhXVjFKV2NGbFhWM1JyVlRGU1IxWnVVbXBsYTFwWVdXdG9RMU5HV1hsamVrWm9WakJ3UjFsdWNFdFdNa3BWVW1wT1ZtVnJXa3hhUlZwaFkyeHdSMVp0YkdoTk1Fb3lWbXhqZDAxV1JYbFRXR2hwVW14YVZGbHRNVk5XVmxaMFRWWk9iR0pHY0RCVVZsWnJWMGRLUjJKRVVsWk5ibWgyVm1wS1MxWldXbk5SYkdScFVqRktUVlpVUW10U01VbDRWbTVPVjJKSFVuTlpWRVoyWlZaYWRFMVlaRk5OVjFJd1ZtMTBhMkZzU2xkWGJFNWFZVEpTVkZaRVJtRmpWbEowVDFab1YySldTbHBYYTFaclVqSkdSazFZU2xoaVIyaFhWRmR3VjFWR1dYZGFSWFJUVFZkU01GVnRlSGRoUlRGWlVXc3hXR0pIVVRCWk1qRlhWMFphY21KR1ZtbFhSVXAzVmxkd1IxTnRWa2RYV0d4clVqTlNVRlZ0ZUZkT1ZsVjVaRWQwYUZaVVFqVldWM2h2Vm0xR2NrNVlXbGRoYTFwVVdYcEdhMlJHU25OYVIyaHNZVEZ3YUZac1VrcGxSMUY0Vmxob1dGZEhhRlZaYTJSVFYxWmFjVlJzVG1waVIzaDRWVlpvYTJKR1NuUlZiSEJZWVRKU1NGWlVSbUZrVmtaMVkwWmthVlpGVlhkV01WcGhXVmROZUZkdVRtaFNNMmhVVkZSR1MyUnNXbGhqUlU1WFRVUkNORll4YUc5V2JVVjNUbFpvVlZac2NIcFViWGh6Vm14d1NFOVdaR2xXYkhBMVZtcEplR0l4V1hsU2JrcFlZVE5vYUZWdGVIZFdSbkJHV2tWa1UwMVdTbmxVYkdSellWWlplV0ZHYUZkaVdFSklXVlJCZUZOR1RsbGhSazVZVWpOb1dGZFhNWHBOVm1SWFlraFNiRkpZVW5GVVZscGhUVVpyZW1ORlpGZE5WWEI2VlRKNGMxbFdTbGRqU0VwWFVrVmFhRmw2U2s5U2JVWkhZMFprVjAxRVFqUldiWEJMVGtac1dGUnVTazlXYkhCb1ZXMHhVMVF4YkhSTlZ6bFBZa1p3ZUZVeGFHOVZNa3BYVjJ0b1YwMXVhSHBaVlZwTFpFWldjazlXWkdsV1JscEZWbXBHWVdFeFdsZFRibEpUWWtaYVQxbHJWbmRUUmxwRlVtMUdhRTFyV2toVk1XaHpZa1pLYzFOc1dsZGlXR2hvVkZSR2ExWXhaSE5qUjNoWFRWVndTVll5ZEd0aU1WSnpVMnRhV0dFeWVGaFpWM1J5WlVaYVZWSnRSbFJTYXpWNVdWVmFZV0ZXU1hwaFIyaFlWak5vVkZacVJrdFNNV1JaWVVab2FXRjZWbGxXYlRGNlRWVXhSMVZZYUZoaVJUVlhWRmQwZDFOc1ZsaGxSM1JYVFZad1IxbHFUbXRXVmxwWFkwZG9WbUZyV25KYVJscFBZekpHU0dGSGFFNVhSVXBoVm0xNGEyUXhVWGxUV0d4VlltczFjRlZ0ZUhkaFJsWnpWMjVrYW1KR1NsbGFSV2hQVkRKS1NHUkVUbGROYWtWM1ZtcEJlRlp0VGtkaFJuQk9VakF3ZUZacVFtdFNiVlpIVkc1S2FGSnRhRmhaYkZwTFZVWmtjMVp0ZEZWTlZYQXdWVEowYTFsV1NYbGxSbWhYWWxSV1JGWnRlRnBsUm5CRlVXeHdWMDFWV1RGV2JGcHZZakZrU0ZOdVRsUmlhelZYV1cwMVEyVnNXbFZTYkU1WFRWaENTRlpITVRSaFZrcDBaSHBDV0Zac1duWldSRXBIVTBaT2NsZHRjRk5pU0VKb1YxWlNTMVJyTVZkWGJrNVlZbFZhY1ZSWGN6RlRiR3QzVjJ4a1YwMVZjRmhaTUZwWFZqSktXVkZyYUZwV1JYQlVWVEJhVjJOdFJraGhSazVPWW0xb1ZsWnRNVEJaVm14WFZHeGtXR0pzU25GVmJHaFRWVVpXZEUxVVVsaFNiR3cwV1ZWb1QxWXhTWGRqUldoWFRXNW9WRll5TVVabFIwNUdaVVprVGxKdVFqWldiWGhoVXpKU1YyTkZhR2hTYXpWd1ZqQmFSbVF4V25SalJYUnNZWHBXV1ZWdE5WTldSMFY1WlVaT1dsWkZjSFpXTUZwWFpGZE9SbHBIZUdsU2JrSTBWbGN3ZUUxR1ZYbFRhMXBQVjBkNFlWUlZXbmRqYkd4V1drVmFiRlpVYkZaV1IzaHZWakpLUm1ORk1WZGhNazQwVm1wR1dtVkdVblZXYkZacFZsWndWVmRYZEZka01sRjRXa1pvYTFJd1duSlVWbHAzVTBaa2NsZHRPVlZpUm5CSVZUSTFTMVpXV25SVmJGSldUVVp3ZWxreU1VZFNiVkpIWTBaa2FFMHdTVEZXYTJRMFZtczFWMWRzWkZoaWF6VnhWV3BLYjJGR1duTlhibVJZVW01Q1IxWnNVa2RXTWtZMllrWm9XR0V4VlhoWlZWVjRWMGRTUlZac1pHbFdSVWt3VmtkMGExTnRWa2RqUlZwb1VtczFXVlZxVG05WFJtUllUVVJHVWsxWFVraFdNalZMVmpKS1ZsZHNXbFppVkZaRVZUQmFXbVZYVWtoa1IyaG9aV3RhWVZaV1pEQmlNV1J6VjJ4a2FsTkZjRmhWYWs1UFRrWmFkRTFWT1ZOTmEzQklWMnRrYjFSc1pFWlRibHBYVFZad1ZGVnFSbEpsVmxaeVdrWm9hV0V6UW05V1Z6QjRZakpPUjJKSVNsaGliVkpZVm0weFUxZFdjRVpYYlhSb1RVUkdlVlJzVm05WGJVVjVZVVpDVjAxSFVrZGFWM2hYWXpGd1IxZHRiRmhTTW1RMlZtMXdSMWxXVlhoWFdHaFhZbXMxVmxsc1pHOVVNVlp5Vm0xR1dHSkdjSHBYYTFKVFlWVXhWMkpFVWxkTlYyZ3pXVlZhVDFKdFRrZGhSbkJYVFRGS2IxZFdWbUZXTWs1WFUyNVNhMUl6VWxSV2EyUTBWMVphY1ZOWWFHcE5WbFkxVld4b2QxVnRSWHBSYkdoYVlUSlNVRlJyV2xOamJHUnpZMGQ0VjJKR2NEVlhWbFpoVmpKR1JrMVdiRkppUjFKWlZtcE9VMlJzVmxWU2JYUlRUV3R3U2xVeU1XOVZNVnBWVm14d1dGWXpVbkpXVkVaclVqRmtkVlZyTlZOU2JIQjJWa1pXVTFJeFpFZGlTRXBXWVhwc1dGWnRlSGROUm14V1YyMDVXR0pHY0ZoWk1GWXdXVlphZEZWcmFGWk5SbkJNV2tWYVMyTXhjRVpPVlRWWFZqTmplVlp0TUhoTlJsbDRZa1prVjFkSGVGZFpWRXB2VjBac1ZWSnVaR2hTYkZwNFZrZDBUMVpWTVZkalJFSlZZa1phVUZaRVNrdFNNa3BGVm0xR1UxWXhTa2xYVmxaV1pVWlplRlJ1Vm1wU2JWSlBXVzB4YjA1c1duTlpNMmhUWWxaYWVsWnROVTloUmtwMVVXNUNWbUpZVWpOVk1WcGhVakZXY2xwR1pFNVdia0paVmxSSk1WWXhXbGhUYTJoV1lYcHNXRmxYZEdGVVJtUlhWMjEwV0ZJeFNrbFZiWGgzVmpBeFIyTkZhRmRTYkhCMlZsUktSMUl4VG5WVmJXaFRZbGhvV1ZkWGVHOWlNVkpIVjJ0YVdHSnJOWEZXYlhNeFpWWlJlRmRyT1ZWaVJuQXhWVlpvYjFZeVNraFVhbEpoVWtWd1RGVXdXa3RYVjBaSVkwWk9hVlpyY0ZwV2JHTjRUa2RSZVZKclpHcFNWbHBUVmpCa2IxWkdVbGRYYlVac1lrWnNOVnBWWkVkaFJscHlZMFphVjJKVVZuSldha1poVG14S1dWcEhSbE5TV0VKWlYxaHdTMU14VGxkVWJrNVlZbGQ0VkZacldtRlpWbGw0V2tSQ1dsWXhSalJYYTFwcllWWktjMk5IT1ZaaVIyaFVWakJhVTFZeFpIVmFSazVPVm14dmQxZFVRbUZVTVZsNVUyeGFhbEpYYUdGVVZXUlRaR3haZVdNemFHcFdhM0I1V2xWYVlXRkhSWGhqU0d4WVZrVndObFJXV210VFJrNXlZVWRzVTJKV1NsQlhWM2hyVkRBMVIxZHVVazVYUjFKVVZGWmtORmRHYkhKWGJYUm9WbXR3TUZaWGVHRldNREZJVlZSQ1YyRnJXbnBXYkZwUFpFVTVWMkZHVG1sWFIyaFlWbXhTUzA1R1VYbFNiazVVWW1zMVdWbFhkRXRXYkd4eVYyMUdWbEp0ZUZsYVZWWXdZV3N4Y21ORldsZFNNMmh5VmtjeFMyTXhTbkZVYkdScFYwZG9iMVl4V210VWJWWlhWRzVLVjJKR2NIQlZha1pMVlVaa1YxcEVRbHBXYXpWWVZqSTFVMVJzWkVsUmJrNVdZbFJHVkZVd1dtRmtSVFZXWkVkb1YyRXpRWGRXYkdRMFZURmFWMWRyV2xoaE0yaFdXV3hvYjJGR2NFWmFSbVJVVWpGS1NGWkhjekZWTVVwellucEtWMkpZUWt0VVZscFNaVlpLY2xwR1VtbGlSbkJVVjFkNFUyTXhXbk5YYmxKc1UwZFNUMWxyYUVOWFZuQldXa1ZrVjAxV2NIbFViR2h2VmpGWmVtRkVUbGRoYTNCSFdsWmtVMDVzUm5OYVJUVnBZa1Z2ZVZadGVGTlNNVmw0VTFob1lWTkdXbFpaYTJSdllqRndXRTFVVW1oU2JIQXdXa1ZhYTFkc1dsVlJhbEpYWWtkb2VsbHJXa3BrTVdSellVWmthVmRGTVRSWGJGWmhXVlprU0ZacmJHRlNiVkpQVld0V1lWTldaRlZSYlVacFRWWnNORlV5TlU5WFIwcHpZMGRvVm1FeFdtaFdNRnAzVW14a2NrOVhjRTVXTVVvMlYxWldhMk14VlhsVGJrcFVZa2hDV0ZSV1pGSmtNV1JYV2taS2EwMUVSa3BaVlZwdllVVXhXVkZzY0ZoV00xSnlWbFJLVDFZeVNrbFRiVVpUWVhwV1VGWnRNVFJrTVU1WFkwWmFZVkpGU2xoV2FrSjNVMFpzY2xWc1RsZGhla1l4VlZjeGIxWXdNVWRqUjJoV1lsaG9VRnBHV2s5ak1WcHpXa1prYVdFd2NGZFdha1p2WkRGSmVWSllhR0ZTYldoVVdWUktVMVl4YkhOYVJ6bHFVbXhhZWxsVlZrOVhSMHBIWWtSU1YwMXVhRkJXYTFWNFZqRmtkV0pHVmxkaVJuQjVWbXBDYTFNeVRuTmFTRTVXWWtoQ2IxUldhRUpsYkdSWlkwVmtXbFl4U2tsV2JYUnpXVlpLVlZac2FGcGhNWEJoVkZaYWEyTXhXblJqUlRsWFRVWndTVlpVUm05aE1rWnpVMnhzVW1KSFVsaFpWM014Wkd4U1ZWSnRSbXBXYXpWNVdrVmFhMVl5UlhwUmJHUlhWbTFSTUZkV1pFdFRSa3BaWVVkd1UxWXlhRnBYVjNSaFdWZEdSMWR1UmxSaVJUVllWRlphWVUxV1dsaGxSVGxvVm10d1ZsWnRlSE5XTVZsNlVXeENXbUZyV21oWmVrWnJaRlpPYzJGSGJGZFdia0phVm10YWEwNUdTWGRPVm1SWVlteEtVRlpzVW5OWFZsWnhVVzVrYkdKR1ZqVlViRlUxVmpKS1ZtTkZhRlpOYWxZelZqSXhSMk5zWkhOaFJuQk9WbTVDVFZkclZtRlRNbEpJVm10b2FWSnJOWEJXTUdSUFRrWmFkR1JIZEU5U01HdzFWV3hvYjFsV1NsaFZiRlphWWxoTmVGa3dXbGRqYkdSMVdrWm9VMkpJUVhoWFZFSlhZVEpGZVZOclpHcFRSMmhYVkZjMVUyTnNiRmhOVlhSVFlsVTFTRmt3V25kV01WcDFVVzVzV0Zac1duSlZiVEZYVTBaU2NtSkhiRk5pVmtwMlYxWlNSMlF5VmxkWGJHeHFVbGRTVmxSV1ZURlRSbGw1VGxWMFdsWnJjSHBXTWpBMVdWWlplbUZIYUZkV1ZuQm9Xa1ZrVjFORk9WZFRhelZYVFZWdk1sWnRjRXBOVmtsNFZsaHNWR0pHY0ZsWmJYUkxWbXhhY1ZSdE9WUlNiRXA1VmpKNGEyRnJNWEpYYTJ4aFVsWndXRmxXV2t0V1ZscHlZMFpvVjJKR2NHOVhWbEpIWVRKU1IxUnVUbWxTYkZwWlZXcEtiMWRXV2tkWGJVWnJUV3hhZWxsVVRuTmlSa2wzVjJ4b1YySllVak5hVjNoclkyeHdTVlJzV2s1U1JVa3hWakkxZDFJeFdYbFRiR3hTWVROU1ZsWnRlSGRsYkZweFVteGthMVpzV25wV1Z6RnZWRzFLUm1OSFJsZE5WbkJ5VkZWYVRtVkdaSFZVYkdocFlrVndlbFpYY0VOWlYwNVhZa2hLV0dKck5VOVVWbVJUWlZaYWRHTkZUbGRoZWtaR1ZXMDFjMWR0U25WUmEzaFhZbGhPTkZwR1pFZFRSMFpIWTBaa2FWTkZTblpXYkdSM1VqSkZlVlJ1VWxSaE1sSm9WV3hTVjFkR2JIUmtSWFJyWWtad2VsbFZhR3RWTURGV1RWUldWMUp0YUhaWlYzaExWMGRXUjFkc2NHaE5XRUY2VjFSQ1lWWXlVa1pPVmxwVllsaFNjRlZxUmt0WFZscHpXa1JDYUUxclZqTlVWbHB2Vm0xS1NHRkdiRnBXUlZveldsZDRjMWRIVmtaa1JtaFRZa1p3TmxacVNqUldNVmwzVFVoa1RsWkdTbGxaYTFwM1lVWmFWVk5yTld4U2JrSktWbGN4TUZVeVNuSlRiR3hZVm14S1VGVlhNVkpsUm1SMVZHMUdVMUpyY0ZoV1JscHJWVEF4UjFadVRtaFRSVFZZVm0xNGQxSXhWWGxOVnpsWFlsVldORll5TVc5WGJGcFhZMFJPVm1KWWFETlZiWE0xVmpGU2RHSkdaR2hOTUVwTVZtcEtNRll4V25KTlZtUllWMGQ0VkZZd1pHOWlNVkpWVTJ4T1dGSnRlSHBXVjNSaFZHeEtkR1ZJYUZaTmJsSXpXV3RhUzJSR1ZuTmpSbkJvVFZoQ1VWWnFRbUZUYlZaMFVtdGthRkp0YUZoVVZFWkxaVlphU0dSSFJtaE5WV3cwVm0wMVQxZEhTbFpYYkZKYVYwaENXRnBXV210WFIxSklaRVU1VTAxV2NFbFdiVEF4VlRKS1IxTnNWbWxTYldoV1ZtMTRkMDB4Y0ZkWGJFNXFUVlphZVZaSGVHdFdNVnBHVjJ4c1dGWkZTblpWZWtacll6RmtkVlJ0Y0ZOWFIyaHZWbGN4TkdReFRrZGhNMmhZWWxoU2NWUldhRU5UVm14eVYyMDVWazFFUmpCWGExSlhWakpHY2xkdVNtRlNSVnBMV2xWYVlWZFhTa2RXYld4b1RUQktVVlp0TUhkbFJsVjVWR3RrVjJKc1NuSlZNR1JUWTFaV2RHVkhSbXhTYkhCSlZGVlNWMkZHU25KalJFSlhWbnBXTTFZd1pFWmxWMFpGVkd4a1UwMHlhR2hYYkZaaFZESlNXRlJyWkdGU1ZGWllWRmN4YjA1V1duUmpSVTVvVFZWd01GWnROVTlXTWtwelYyeFNXbUV4Y0doV01GcFRWbFpHV1dGRk9WTmlTRUphVmtaYVUxVXhXWGROVm1oV1lUSjRXRmxzYUZObGJHUlhWMnQwYWsxWFVqRlZWM2hoWVZaSmVXRkZWbGRTZWtVd1YxWmtVMU5HV25KaFJrSlhUVzVvVUZadGNFZFRNVTVYVjI1R1ZGWkZXbFpVVm1SVFUxWlZlVTVWZEdoaVJYQXdWbGN4UjFkdFJYaGpSWGhXVFVad1lWcEVSbXRqTVhCSVkwWmthRTB3UmpSV2Frb3dXVlpSZUZWdVRsaGliRnBUV1ZkNGQxZEdXbkpXYms1UFVtMTNNbFZ0ZUdGaE1ERkZVbXhvVjAxcVJqTldWRXBMVTFaR2MySkdaRk5pVlRFMFYxZHdTMVF5VFhoV2JrNVlZa2RvY0ZZd1drdGxWbHBZVFZSU2EwMUVSbGhXTW5SdlZHeGFXRlZzWkZWV00xSXpWVEJhY21ReFpIUlNiR2hUWWtjNGVWWldXbTlpTVZwelYydGFXR0pGTldoV2JGcDNZMnh3UjFkc1pHdFNNVXBJVmxkNFQxUnNXbGxSVkVwWFlsUkNNMXBWVlRGU01WSlpZVWRHVTFZeFNscFhWekUwVXpGV1IxZHVUbFppYXpWd1ZGWmFZVTFHY0ZaaFIzUnBVbXh3TUZwRlVrOVdNVmw2Vld4Q1YyRnJSalJXYWtwTFVsWmtjMk5HWkZkTmJXaDJWbTB4ZDFNeFNYbFViazVVWW10YVYxbHJXbmRpTVd4VlZHdE9WbFpzY0ZsVVZXaHZWakF4Vms1VmFGWk5hbFpRVjFaYVNtVlhWa2RXYkZwcFVteHZlbFpHWkRSWlYxSkdUVlZzYUZKVWJGUlpiR2h2VjFaYVZWSnRPV3BOVm5Bd1ZXeG9jMkZHU25SVmJVWlhZVEZhYUZSVVJtRldNV1IwVW0xMFUwMUVVWGxXVnpFMFlqRlZlVk5yWkdwU1JuQllXV3hTUW1WR1ZqWlRhMXByVFVSR1dGZHJaSGRXUmtsNVlVWm9WMUp0VFhoVlZFWkxVakpLUjFwR1pGaFNNbWhaVmtaYVYyUXlWa2RYYkdoc1VqTlNWbGxzVm1GbGJGbDVaVVprVjAxcmNGcFdWelZMVm0xV2NtTkdRbHBOYmsxNFZtcEtTMUl4VW5SaVJrNXBZVEJ2ZVZacVJtRlZNVkY0VWxoa1RsZEZOVmxaYlhoTFZERmFjbGRyZEZwV2JIQjRWVlpTUjFkR1NuTmpSbXhWWWtaVk1WWnFSbHBrTWs1SFlrWndWMVp1UWxWV2FrbDRVbTFXVjFac2JHcFNiRnBZVm0wMVEySXhaRlZTYlVaVlRXczFXRlp0TlU5V01rWTJWbXhvV21KSGFISlViWGhoWTJ4a2RGSnNjRmROUkVVd1ZtMHdNVlV4VlhoYVJXaHNVMFUxVjFsc2FHOU5NVnAwWlVkR2ExSXhXa3BYYTFVeFZHeGFjbU5HWkZkV2VrSTBWV3BLUjJNeFpIVlRiWEJUVWxWd1dGZFhlRzlpTVZaSFlrWmtXR0V6UW5OVmJYTXhaVVphV0dWSGRHaFNNRlkxVkRCb2ExZEdXbk5UYTNoV1lXdGFZVnBWV25kVFZrNXpZVWRzVTAxdGFHRldiRkpEVmpGTmVGcEdaRmhpYTFwVFdXeFNjMVV4VWxkV1ZFWlVVbTE0ZVZaWE1VZFdhekZ5WTBWd1ZsWjZWbEJXYlRGTFZsWmFjbFZzV2s1aWJXaHZWbFJDYTFZeFRrWlBWbWhvVW1zMVQxWnROVUpOYkZwMFkwVjBUMUl3TVRSV01XaHZWMGRHYzJOR1VsZE5SMUpVV1ZWYVYyTnNXblZhUmxKVFlrWndORlpYTUhoTlIwWjBVMnRzVW1FeWFGbFpWRXBUWld4YWNWSnRSbXRXYTFwNFZtMTRhMkZGTVZsUmJteFhVak5TYUZsNlJscGxSMDVHVjIxR1UwMXRhRkJXUm1RMFV6RmtjMXBHYUd4U2VteFhWRlprVTFOR1dsaGxSM1JZVWpCd01GWlhlRmRXYlVwWllVaHdWV0pHY0ROV2JURkhVbXM1VjFwRk5WTlNWbTh4VmpGU1ExbFhVWGhhU0U1WVlrZFNWVmxyVmt0WFZscDBaVWhrYUZKdGR6SlZNbk0xVmtaSmQxZHJhRmhoTVZWNFZsUktTMUl5UlhwYVJtUnBWa1ZKTUZaSGRHdFZiVlpIVkd4c2FGSnRhSEJaYTFaM1pHeGFXR05GT1dsTmEydzBWbGQ0YTJGR1NsWk9WbFphWVRGd00xcFZXbGRrUjFaR1QxWmFhR1ZyV2pWV2Fra3hZekZhV0ZOclpHcFRSWEJZVkZWYWQyTnNWWGRhUm1SVFRWWmFlbGRyVlRGVk1ERldZak5zVjAxV1NraFhWbHBhWlZaV2NtRkdaR2hOV0VKNVZsY3dlRlV4VVhoWGJsSlBWbFUxVUZadGVIZE5SbEpXVld0a2FGSlVSbGhaTUdoelZsWmFjMk5JY0ZkV2VrWk1WVEJrUjFJeVJrZFdiR1JzWWtadmVWWnRlRmRaVm1SMFZWaG9ZVk5GTlhGVmFrNVRWREZhY1ZKcmRFOVdiVkpaV2tWa1IxZHNXWGRYYkdoWVlURmFkbGxWV2t0amJHUnpZa1prYVZkSFozcFhWbFpoWVRGWmVHTkZXbEJXTTFKVVdXdFdkMDVXV25STlZGSldUV3RhV0ZVeGFHOVdSMHAwVld4b1YyRnJOVVJWVkVaVFZteGFXV0ZHVGs1WFJVcExWbXRqZUZJeFdrZFVhMXBVWW01Q1dGWnVjRU5PUmxwVlVtczVVMDFYVW5wWlZWVTFWakZrUjFOdGFGZGlWRVYzV2tSQmVGSXhaSE5oUlRsWFZsUldXbGRYZUZkV01EVkhWMWhzYWxKVWJGaFVWbHAzWld4cmQxcEhPVnBXYTNCWlZsZDRiMVp0Um5KWGJrcGFUVzVOZUZacVJuZFRSMHBIVld4T1YxZEZTazFXYlRGM1VqSkZkMDFWYUZSWFIyaFdWakJrYjJOR1ZuUk5WazVYVm0xNFZsVXllRTlXTVZwMFpVUkNXazB6UWtoV2FrRjRWMGRXU1dOR2NGZFdNREI0Vm1wQ1lWTXlUWGhVYmxacVVtMVNUMWx0TVc5VlZscDBZMFZLYkZKc2JEUlhhMmhYWVZaS2RGVnNVbFZXUlhCMldsWmFZV05zY0VWVmJIQlhUVlZ3U2xac1dtOWtNa1p6VTI1U2FGSnRhRmRaYTFwaFRURnNjVkp0ZEZkTlZscDVWMnRhYjJGV1duSlhXSEJYVW14d2FGbDZSbFpsVms1eVlVWmFhV0V3Y0doWFYzaHZWVEZTUjFkWWFGaGlXRkpaVldwR1lWTkdXa2hsUlRsVllrWndlVmt3Vm5OV01rWnlWMjVhV21GclduSlZNRnBMVjFkS1IxZHRiR2hOV0VKWVZtMHdlRTVIVVhsU2EyUnFVbTFvYzFWcVRsTmpWbXh5WVVWT1ZHSkdjRWxhVldSSFZsZEtWbFpxV2xaV00xSjZWakJhWVdNeFRuTlJiSEJYVWxad2FGZHNXbUZVTWs1MFVtdGtXR0pYYUc5YVYzaGhWMVpaZUZkdGRFNVNiWGhZVm14b2IyRnNTblJWYkd4YVlURlZlRmt5ZUdGa1IxWkdaRWQ0YVZKdGR6RldSbHB2VkRKR1IxZHVTbXBTYmtKWFZtcE9iMkZHV25GUldHaFlVbXhhV2xkclduZFdNVXBYWTBab1dHSkdXbWhXYWtaclYwWktjbHBHYUdsV00yaFZWMWN4TUZNeFpGZFhXR2hoVWtWS1dGUlhlRWRPVmxwSVRsVTVWMkpWY0VsV1YzaHpWMjFLVlZKc1VsZFNSVnBZV2tWa1YxSnRVa2RoUms1cFUwVktZVll5ZUZkV2F6VlhXa1ZrVkZkSFVuRlZiR1J2V1ZaU1ZsZHJkRk5TYlZKWVZqSXhSMVl3TVhKT1ZYQlhUVzVvY2xaSGVFcGxSazV5WVVab2FWSnNjSGxXYTFKSFZERlplRlZ1VmxWaVdFSlVXV3hhUzFWR1drZFpNMmhwVFZaS2VsWXlOVk5oYkVwV1RsZEdWMkpZYUhwVWJGcGhVakpHU0U5V1pHbFdXRUkxVmtkNGIxSXhXblJTYmtwcVUwWndXRlZyVm1GaFJuQkdXa1prVTAxck5VZFViRnBQWVZaT1JsSnFUbGRoTVhCb1ZsUkdSbVZHY0VsVWJHaFlVakZLVUZadGRHRlRNV1JIVld4b1QxWjZiSEZaYTFwM1pWWmtjbFpxUW1oaVZWa3lWbTE0ZDFadFNsbGhSMmhhVm14d1RGa3lNVTlTTWtwSFlVWmtVMVpZUW5aV2JURjNVekZWZUZOdVNrOVdiVkpaV1d0YVlXSXhjRmhOVkZKWVZtMVNXVnBGWXpWVmF6RkZWbXRvVjAxdWFGaFdWRXBMVmxkS1NFOVdWbGRpU0VKSlZrZDBZVmR0VmtoU2EyaHJVbTFTVDFsVVJuZE9WbHBJWlVkR1dsWnNiRFZWTW5oellVWktSazVYYUZaaGF6VjJXVlZhZDFKc1dsbGhSbVJwVTBWS1NsZFVRbXRqTVZWNFYydGtXRlpGY0ZoVVZscDNWMFprVjFwR1NteFdhM0I2VjJ0YVUxZEdTWHBoU0ZwWFZqTlNXRnBFUm10V01XUjFWVzE0VTAxR2NIWldWekI0VlRGa1IxZFliR3RTUlVwWVZGVlNSMVl4VW5OVmEyUlhUVlp2TWxWc2FHdFdNVnBHWTBWb1ZXSllhR2hhUmxwM1VqRndSMXBGTlU1U1dFSkxWbTE0VTFOdFZrZFdibEpYWVRKU2FGVXdWVEZpTVZaelZXeGtXRkpzV2pCYVJXaHJWMFphYzJORmFGZE5ha1pJV1ZkemVGSldXbkpoUm1ST1ZqSm9NbGRXVm1GVU1VcHlUbFpvVUZac2NIQldNRnBLWld4a2MxcEVVbGhpVmxwWlZtMTBjMVpYU2toVmF6bGFWa1ZhWVZSVldtRmpWazV4VVdzNVUySldTalpXYWtvMFlUSkdjMVJyV21wU2JXaGhWbXBPVTJGR1VsVlNiR1JxVm10d2VsWkhNWGRVYlVWNFkwVnNWMkV5VGpSWmVrWldaVVp3Umxkc1RsaFNNbWhaVjFaa01GbFhUbk5WYkZwWVltczFXRlJXWkZOWGJHeHlWMnM1YUZacmJEUlZNakExVmpGWmVtRkhhR0ZTUlZwb1ZtcEtTMU5XVm5KT1ZtUm9aV3hhWVZac1kzaE9SMUY1Vm10a1dHRXlhSEpWYkZKelYwWnNjbFp1WkU1U2JrSlhXVlZqTlZZeVNsWmpSbHBXWWtkb2NsWnFTa2RqYkVweFZXeGtUbEp1UWxsWFdIQkxWREZKZVZScmFHaFNWRlp3Vld4YWMwNXNXblJOVkZKV1RWVmFNRlpXYUhOV01rVjVWV3hhV21KWVRYaFdNRnB6WTJ4d1IxUnNaRk5pV0dnMlZtcEtNR0V4VW5KTlZtUnBVa1pLV0ZSWGNFWmtNVnB4VVZob2FtRjZSbFpXVjNoclZHMUtkR0ZFV2xoV2JIQm9WWHBHWVZkR1RuSmFSMmhUWW10S2QxWlhNREZSTVZKWFYyNUdVbUpWV205VVZtUlRVMVphZEdSSGRGcFdhMncyVmxkek5WWXlTa2RUYkdoWFRWWndjbFpzV2tka1JrcHpZMFprYVZacmNFdFdiRkpMVGtaWmVWSnNaRlJpYkVwdlZXMTRkMWRHYkZoamVrWlhVbXhLVmxWdGVIZGlSbGw0VjJ0d1YxSXphSEpaVmxwTFpGWkdjVlZzWkdsU01VVjNWMWR3UzFJeFdYaFVibFpYWWtWd2NGVnFUbTlYYkZwMFpFWmtWRTFyV2toWmExcFhWVEpLY2s1V2FGVldiVkpVVkZaYVlWZEhWa2hTYldoWFlUSjNNVmRXVm1GaU1XUkhWMWh3YUZKc1NsZFpWM1JoWVVaV2NWSnRSbXRXYTNCNlZrY3hjMVV4V2tkWGFsWlhZa2RTTTFWVVNsSmxSbEp5V2tkR1ZGSllRbHBYVjNoVFl6RlplRlZzWkZoaWJWSlpXV3RhWVZkV2NFWmhSM1JYVFVSR2VWa3dXbUZXYkZsNlVXeFNWMkpHY0doV01GcFhZMnh3U0ZKc1RsTldWbGt3Vm0wd2VFNUhVWGhUV0d4VFlUSlNiMVZ0Y3pGVU1XeHpXa2M1YUZKc2NEQlVWbWhyVldzeGNsWnFUbFZpUmxweVZqQmtTMU5HVm5WUmJGcHBWMGRvYjFadGRHRmpNbEpHVFZaa1ZXSllRbGhaYTJoQ1pERmtjMVp0ZEZOTmEzQklWakkxVDJGc1NrWlRiRnBYWWxob2FGa3llRnBrTVdSeVpFZHdUbUY2VmtkV1ZtTjRVakZaZUZkdVZsSmlWR3hZV1d4U1EwNUdWalpTYlhSWFRWWndlbGxyWkVkVk1rcFhVMnhzVjFKc1NrTlVWVlY0VWpGa2RWSnNUbWxXVm5CVlZrWmtlbVZGTlVkaE0yUlhZbGhTWVZadGRITk9WbkJXVjJ4T1dHSkdjRWRVYkZaVFZtc3hkV0ZIUm1GV1ZuQnlXa1ZrVTFOSFZraGlSbVJwVTBWS1MxWnRNWGRUYXpGWFZGaG9WbGRIYUZsWmJYaExZekZWZDFadFJsZE5WM2g2VmxkMGExWXhTblJrUkU1WFRXNW9NMWxVUVhoWFZrWnlZa1pXVGxadVFtOVdiWEJMVXpGWmVGUnVUbWxTYlZKd1ZtdFdTazFHV2tkV2JVWllZbFpHTTFSV1duTldSMFkyVm14b1ZtSllVak5XTW5oclZqRldjbVJIYkU1V2JIQkpWbXBKTVZJeFdraFNXSEJXWWtaYVYxbHNhRzloUm5CWVpVaE9WMkpIVW5wWGExcHJWR3hhV1ZGc2FGaFdSVXBYV2xWYVdtVldTbGxoUjNCVFRXMW9XbFp0TUhoVk1WWkhZa1JhVTJKVlduSldiWE14Wld4YVdFMVlUbGhTYTNCNVdUQmFSMVl3TVZoVldHUllWbTFTVTFwVldsTmpNWEJIWVVab1UwMHlhRFZXYkdNeFpESk5lRmRzWkZaaVIyaHlWV3BDWVZaV1ZuUmxSbVJQVm01Q1YxWXlNVEJoUmtwelkwaHNXazFHU2tSWFZscGhWakpPU1ZOc1pFNWliV2hvVjJ4a05GWXlVa2hTYTJSaFVtczFXRmx0ZEV0a2JGbDRWV3RrV2xack1UVldWM1J2Vm0xRmVWVnRhRlppUmtwWVdXcEdVMVl5UmtaVWJGWlRZa2hDTkZaVVNuZFJNV1J6VjI1T1UyRnNTbGhXYm5CWFZrWmFjbHBGV214V2JGb3hWVzE0WVdGV1drWldXR1JYWVd0S2FGbDZTazlqTWs1R1drWlNhR1ZzV2xWWFYzaHZZakZaZUZkc1ZsUmhhMHB2VkZaYVYwMHhVbGRYYlVaVlRWZFNTbFZYTVVkV01rcEhZMFJPV2xaV2NIcFdha1pyWTIxT1NHVkhiRmRXYmtKS1ZqRmFWMWxYU1hoWFdHUk9VMGQ0YjFWclZuZFhWbHB4Vkd0T1VrMVlRa1pWTW5oclZUQXhXRlZxUmxkaVdHaFFXVlphUzFaV1duVmFSbVJYVFRKb1ZWWnRjRXRXTVVsNFdraEtZVkp0YUhCV2JGcDNaVlphUjFwRVVscFdNVnA2VjJ0b1MyRkdTbGxWYkd4V1lXdEtNMVp0ZUhOamJHdzJWbXhrVG1FelFtRlhWbFpUVkRGWmQwMVlWbWhTYldoWVZGVmFWMDVHV25SbFNHUlRUV3RhU0ZaSE1YTldSa3BXWVROc1YySlVSak5WZWtFeFUwWk9XV0ZHYUdsU01taFZWbXBDYTJJeVRsZFdXR1JvVWxVMVdWVnRNVFJYVm5CR1drVmtWMkpGY0RCYVJWSlhXVlphV0ZWWVpGcFdNMDQwV1RKNGEyTnRTa2RqUm1SWFRWVnZlVll4WkRCaE1VMTRVMWhzVldFeVVuRlZiVEZUWWpGc1ZWSnVaR3hXYkhCSldrVmtNRlpIU2xkWGJHaFhVak5vZWxkV1drdFdWbHB6Vm14YWFHRXpRakpXYWtaaFlURmtSazFXYkdwU1ZGWllXV3hhUzFkV1pGaGtSemxVVFZkNFdGVXlOVXRVTVdSR1YyMUdXbFpGV2pOWlZWcDNWbXhrYzFwR2FGTldSbHBhVjJ0V1lXRXhWWGxTV0hCU1lXeHdXVlpyVmt0WFJtdzJVbTVPVjAxWFVucFpWVnBoVjBaSmVGTnNiRmhXTTJoMlZrUkJNVkl4V25WVWJHaG9UV3hLZUZadE1UUmtNbFp6WWtaYVlWSjZiRlpaYTFwM1YyeFdXRTVYUmxkTmEzQldWVzF3VDFadFZuSlhhemxoVmxad00xVnFTa2RTTVZKMFlVVTFhVll5WjNsV2JYaHFaREF4VjFKWWFHRlNWMUpZV1cxek1WZEdiSEpoUlU1VlRWWmFNRnBWYUd0WFJscDBaRVJPVjJKVVJYZFdNR1JMVWpKT1JWRnNaRmROTW1nMlZtMHdlRk14WkZkV2JsWlVZa2RvV0ZscmFFTlVSbVJ6VjIxMFUwMVZjSGxVTVZwcllXeEplV1ZHVWxWV2JGb3lXbFphWVdSRk1WbGFSazVPVmpGSmQxWnRNVEJoTVd4WFZHdGFUMVpzY0dGWlZFWjNWRVphUlZKc1pHcGlSMUl3VlcxNFUyRldTblZSYkdSWFZucENNMVJzWkVkV2F6RlhXa2RzVTFKc2NGaFdSbVIzVmpGV1IxZHVTbUZTVjFKUVdXeFdkMU5HYkZaWGJtUm9WbXRzTlZsVldrTlhSMHBIVjIxb1dsWkZXbUZhVlZwM1UxWldjMVJ0YkZoU2EzQldWbTB4TUZsV2JGZGFSV1JZWW10d2FGVnJXa3RqUmxKWFYyNU9UMVpzVmpWVWJGWXdWakZKZDFacVZscFdWbkI2Vm1wS1MxZFhSa2hoUm5CT1ltMW9WVlp0TVRSaE1sSklWV3RrVldGNlZsaFdhMXBYVGtaYWMxVnJjR3hTTVVZMFZteG9iMVpIU2toVmJrWldZbFJHZGxZd1duTmpNa1pHVkd4YVUySllhRFJXVkVvMFZESkdjazFXYUZaaVNFSlpXVlJLVTFOR1dsVlNiVVpyVm10YU1Wa3dXbXRXTWxaeVZsaGtXR0V4U2toWlZFcE9aVlpPY2xwR2FHbFNNbWgzVjFkNFlWTXlVbk5YYkdoc1VtczFWRlJXWkZObGJGcDBaVWM1YUUxVmNFaFZNbmh6Vm0xR2NsTnFUbFpOUm5CaFdsWlZlRmRGT1ZkaFIyeFRZbXRLU1ZZeFVrTlpWa1Y0WWtaa1ZHSkhVbkZWYkdodldWWlNXRTVYT1U1TlZsWXpWakowTUdGck1WZFRha0phWVRGd2NsbFZWWGRrTVU1elZHeGthVlpGVmpOV01WcHJVakpTUjFkdVNtaFNhelZaVldwR1MxVldXbkZSYkZwT1ZtMVNXRmxyYUZOaVJrcFpWV3hhVlZac2NIcFVWRVpyWTJ4a2NrOVdaRTVXYmtJMlZsUktOR0l4V1hkTldFWlhZa1ZLV0ZWclZtRmhSbXcyVTJzNVUySlZjRWhXYlRGelZUSktSMVpxVWxkaVdFSkVWMVphVDJSR1ZsbGlSbFpvVFc1b2QxWlhNSGhWTVZGNFlraFNUbFo2YkhOV2JYaDNaVVpWZUdGSE9WWk5hM0JZVmpKNGIxWXlTbFZXYkVKWFlsUkdURlV3V2xkak1WWnpWMjFzVTJKclJqWldhMk40VGtkRmVWUnVUbGhpYXpWWldXeG9iMVpHYkhOWGEzUlVVbXh3UmxWdE1VZGhWVEZ5WTBWb1ZrMXFWbFJXYlRGTFkyeE9jMXBHVmxkV2JrSnZWbXRXWVZadFZsaFdhMmhUWWxoU1ZGUldXbmRUYkdSeVZteGFUbFpzVmpOVVZsWnJWMFphUmxkc2FGZGhhelYyV2tkNGMwNXNTblJTYkZKVFlYcFdOVmRXVm1GWlYwWlhVMWh3YUZJeWFGaFpiR2hUVjBad1JWTnNUbXBOVjFKYVdWVmFiMkZYUmpaV2JHeFhZbFJGZDFwRVFYaFdNWEJKVTIxR1UxSnJjSFpXYlRFd1l6QTFjMkpHV2xoaWF6VllWRmQwWVdWV2JIRlViWFJhVm10d1Ixa3dWalJXYlVaeVYyNUtWMDFYVWtoVmFrcEhVMGRHUms1WGJGZE5iV2hvVm0wd2QyVkhVWGhWV0d4VVYwZG9hRlZzWkZOWFZteDBaRWRHVjFKdGVGWldSM2hQVjBaYWMyTkVRbUZTVjFKSVdXdGFTMk14V25GV2JVWlhWakF3ZUZadGNFSmxSMDUwVkd0YWFGSnVRazlWYWtGM1pVWmFkR05GU214U2JHdzFWa2QwYjJGR1NuTmpSVGxhVmpOU2FGWXhXbUZXVmtaMFVteFNUbFl4U2xwV2EyUXdZakpHYzFOdVNrOVdWR3hoV1d0a1UyUnNXblJsUjBacVlrZFNNRmt3VlRGV01ERklaSHBDVjJKVVJYZFpWRVpyVTBaT2NtRkhhRlJTV0VKWVYxZDRVMUl4V2tkYVJtUllZbFZhY2xWcVFUQk5iRlowWlVjNVZrMXJjRWxhU0hCRFYwWmFjMWR1V2xkU1JYQklWVzF6ZUZZeFpIUmlSazVUVmtaYVdsWnJXbXRrTVVaeVRWWmtXR0pyTlZsWmJGWmhZMnhXZEdWSFJteGlSbkJaV2xWYWExWXdNVmRqUkVaV1ZucEJNVll3WkVabFJtUnpXa1pXVjJKSVFtOVhhMVpoVmpKT2MyTkZhR2hTYXpWdldsZDRZVlZXV25OVmEwNVhUVlUxZVZSV1dtdFhSbVJJWVVaa1dsWkZSWGhYVmxwaFkxWkdkVlJyT1ZOaVZrbzFWMVpXWVZReFdYaFRXR1JYWVd4YVdGWnFUbTlYUmxsNVpVZEdVMkpWTlVwV01uaDNWakZhZFZGc2JGaFdSVnBvVmxSS1UxSnJPVmRhUjBaVFZrWmFXbFpYZUZka01XUnpWMjVHVkdGclNtRldha0pYVGtaWmVXUkhkRmRTTUhCNVdUQm9SMVp0UlhoWGEzaGFWbFp3V0ZsNlJtdGtWbkJIVjJ4T2FWTkZTVEJXYkdONFRVVXhTRkp1U2s1WFJYQlFWbXhrYjFsV1VsWlhibVJxWWtkNFYxZHJWbUZpUmxwVllrWmFWMUl6YUhKV1IzaGhaRlpHZFdKR1pHbFNNRFF3Vm0xd1IxTnRWa2hVYTFwaFVqSjRWRlJYTlc5V1ZtUlhZVWhrVjAxWFVucFdNbmh2WVd4S1ZXSklRbFZXTTJob1ZqQmFhMk50UmtaUFZuQlhZVE5DU0ZaVVNqUldNVnBYVjI1U1ZtSkdTbGRVVlZwM1pXeHJlV1ZIZEd0U1ZHeFpXVlZWTVZZeFdrZFhhM1JYWWxob2NscFhjekZXTVdSeldrWm9hV0Y2Vm5oV1YzUldUVmRHUjFkdVRsaGliVkpaVlcwMVExSXhXbk5oUnpsWFRWWndlVll5Y0VOWGJGcFhWbGhvVjJGclduSlZiWGhQVmxaT2MxcEZOVmRoTTBKR1ZtMTRVMUl4VG5SV2EyUmhVMFphVlZsWWNGZFhWbFowWlVoa1YwMVdjREJhUlZwclYyeGFkRlZyYUZwaE1YQjJXVlJHVDFOR1ZuTlhiRnBwVjBkb2IxWkdWbUZWTVZsNFYyeFdWMkpIVWxSWlZFb3paV3hhY1ZOcVFtbE5WMUpKVld4b2MxWnRTblZSYkdoVlZsWndNMVY2Um5kV01YQkdXa1pPVjJKSVFqWldNblJyWXpGa1IxTlliR2hTYkhCWVdXdGtVMDB4Vm5GU2JVWnJVbXh3ZVZkcldsZGhWa2w2WVVoa1YxWjZSVEJYVm1SS1pVWldjMXBIYUZOV1ZGWmFWMWQwYTFVeFpGZGpSVnBoVWtWS2IxWnNVa2RsVmxKelZtMDVWMDFyY0ZaV2JYUnZWakZhUm1ORlpHRldNMmhZV2taYVUyTXhjRWhpUm1oVFRXMVJNbFp0TVhkU01XeFhWbGhvV0ZkSGFGaFpiWE14Vm14c2NscEdUbGRTYkhCNVZtMHhSMVV3TVZkalJteFZWbXhLUkZsV1ZYaFhSbFoxWWtaV1YySkdjSGxXYWtKclV6RmtTRkpyWkdoU2JrSllWRlJHUzJJeFpGZFdiVVpYVFd4S1NWWnRkRzloTVVsNlZXeFNWMkV5VVRCV01WcGFaVmRTU0dSSGNFNVdiWGN3VmxSS05HRXlSbk5UYms1cVVtMW9ZVmxVUm5kVVJsVjNWMjEwVjAxWVFrZFdNakUwVmpKS1IyTkVXbGhXYkZwb1ZtcEtSMUpyTVZkaVJrcHBWa2Q0V1ZadE5YZFJNRFZIVjJ4V1UySkZjSE5WYlhoM1RWWlZlV1ZIZEdoV2JIQllXVEJhZDFZeVNsVlJhbEpYVmtWYWFGbDZSbUZqTWtaR1RsWmtVMVpZUWpKV2JURTBWVEZKZUZwR1pGaGlSMmh5Vlc1d2MxZEdVbFpWYTJSc1VteHdNRnBWVms5V01ERnlWMjVzVjAxcVZreFdiWE40VTBaV2NtRkdXbWhoTVc5NlZsZHdTMVF4VGtoVGEyUlZZWHBXY0ZacVNtOVdSbHAwVFZSQ2FFMUVSa2haYTFwcllWWktkR0ZHWkZwV1JWb3pWa1JHWVdSSFZrbGFSMmhUWWtadmQxZFVUbmRTTVZwV1RWWmthbEpGU21oVmJHUnZZVVpzVlZGWWFGaFNiRnA2V1d0a1IxVXhXWGhUYTJ4WFlsaG9WMXBWV2xwbFJsSjFVbXhLYVZKdVFsQlhWekI0WWpBeGMxcEdaRmRpVlZwVlZGZDRTMWRHVm5ST1ZUbG9VbXR3TVZWWGVHOVdWbHBHVjJ0NFdtRnJXbkpXYkZwUFkxWldjMWRyTldobGJGa3lWakZTUTFZeGJGaFNiazVVVjBoQ2IxVnRlRXRaVm14VlUyMDVVMUp0VWxoV01qRXdWMFpKZUZOcmJGWmlXR2h5VmtjeFJtVkhUa1poUm1SVFlraENNbFpyVWtkWlZrNUhWRzVLYUZJemFGUlpiR2h2VjFaa1dFMUVSbEpOVld3MFdUQldWMVV5U2xsVmJHaFZWbTFTVkZSVldsZGtSMVpHVDFaV2FWWldXVEpXVm1Rd1RVWlplVkpZYkZaV1JVcGhWbXRXZDFOR1duRlNiWFJxVFZoQ1NWa3dXazloVmxsNVlVWndWMkpVUVhoYVJFWkxZMnN4VmxwSGNGTldiSEJVVm1wQ2EySXhXa2RWYkdSWVlsVmFjMWxyWkZObFZsbDVUVlZrYUZKcmJEUldNbkJEV1ZaYVYyTklTbGROUm5CaFdsY3hSMUl5UmtoU2JFNVRWbTVDVWxac1pIZFNNa1Y0V2tab1ZHRXlhSEZWYlhNeFYwWmFjbGR0UmxwV2JHdzBWakl3TldFd01WWmlSRkpYVWpOU2NsbFZWWGRsVmxaellrWndWMUpWVmpSV2FrWmhZekpPYzFwSVZtRlNiV2hVV1d4b1VtVnNXWGxrUjNCUFZtMVNTVlV5ZUd0WFIwcDBaVWRHVlZaV2NETlZhMXBoWkVVeFZtUkdUazVoZWxaSVYxWldhMUl4VlhoWGJsWlNZWHBHV1ZZd2FFTlRSbkJGVW10d2JGSXdOVWRaVldSelZUQXhkR0ZHUWxkV2VrSTBWRlZWTVZZeFpIVlZhelZVVWpGS2VWWkdaRFJaVms1WFYyeGthRko2YkZkVVYzUjNaV3hWZVdWSE9WaGlSbkJIV1RCb1lWWXlTbGxoU0hCYVRXNW9NMVZxUmxOak1rWkhXa2RzV0ZJeVVYcFdha293VmpKSmVWSllhRmhYUjFKUFZtMHhiMk14VlhkYVJGSllWbTE0VmxWdE5XdFdiRXB6WTBod1YySkhhSFpXTUZwS1pVWmtjbGRzV2xkTk1tZDZWbXRrZW1ReVVYaFVia3BYWWtkU2IxUlhlRVprTVZwWlkwVjBWazFWYkRSV01qVlhWbGRLU0dGSVFsWmlWRlpFV2tSR1lXUkhVa2RhUm1ST1VrVkpNRlpxU1RGVk1rVjRVMjVPYWxORk5WZFpiR2h2VFRGU1ZsZHRSbFJTTVVwSldrVmtiMVV5UlhwUmFscFlWa1ZLVjFSc1dtdGpNV1JaWTBkb1UwMXRhRmxXYlRFMFpESkdSMk5GV21GU1ZHeFVXV3hhUzFOR1dsaGpla1pYVFZkU1IxVXhVa2RXTWtWNVZWUkNXRlp0VWs5YVZWcHJZekpHUjFWdGFFNWliV2hWVmpGa01HRXlTWGhYV0docFUwVndXVmx0TVZOVU1XeHlZVVZPV0ZKc2JEVlVWbFpyVm1zeFJWSnNjRlpXTTFKb1ZtcEdXbVZ0UmtsWGJIQlhZa2hDYjFkWWNFdFVNVXAwVTJ0a1lWSlVWbkJaYTFaMlpWWmFkR1ZHVGxSTlZXdzFWa1pvYjFaWFNraGxTRVpXWVd0d2RsWnJXbk5qYkZwMVdrZG9VMkpJUWpSV1ZtTjNUbFpXY2sxV1dtbFNSa3BoVkZWYWQyUnNiSEpYYTNCclRWZFNlbFpYZUZkV01rcEpVVmh3VjFKc1dtaFdWekZYVWpKT1JtSkhSbE5pUm5CM1ZsY3dNVkZ0VmtkWGJHUmhVa1pLY2xSV1duTk9SbGw0WVVoa2FGSnJOVWhaTUdSSFYyeFplbFZ0YUZwTmJtaFhXa1JHYTJOck9WaGpSMnhUVFZWdk1WWnJVa2RaVjBWNFZXNU9WR0pzV2xOWmJGSnpWMFpTVjFkdVpGZFNiRmt5VlcxNFlXSkdTbk5qUm5CYVZsWndhRmxXV2t0a1ZrWnpZMFpvVjAweFNqSldWbEpMVkRKTmVGWnVUbUZTTUZwVVdWaHdWMlZzWkZoa1IwWnJUVlUxV0Zrd1dtRlpWa3BHVTIwNVZtSllhRE5hVmxwelkyeFdjMVJzWkdobGExcGFWMVpXYjFsV1dYbFNia3BxVWxkb1lWUlhjRWRVUmxaelYyeGthazFXY0RCWlZWVXhZVlpLV1ZGcmRGZGlWRUkwV2tSR1NtVkdWbGxpUmxwcFVqRktXbGRYTVhwTlZscFhZa2hPWVZKNmJGWlVWbVEwWld4a2NsbDZWbGhTTUhCSVdUQm9jMVl3TVhGU2EyaFhUVzVvYUZreWMzaFdWbFp6V2tkc1dGSnJjRFZXTVZwaFdWWlJlRk51VG1GVFJUVllXV3RvUTFkR1ZuTmhSVTVYVm0xU1ZsVnRNVWRoYXpGWVZXeHNWMUl6VW1oWFZscExaRWRHU1ZGc1dtbFhSMmhvVmtaYVlXRXlUWGhYYmxKclVsUldWRlJWV25kVFZscFZVbTA1YUUxWFVraFdNblJoWVd4S2RHRkhSbHBoTWxKMldrZDRjbVZYVmtoU2JYQlhZVE5DTlZkclZtdGtNVkowVW1wYVYyRXpVbGhXYTFaMlRVWndSVk5yWkZSU2EzQmFXVlZrZDFVeFdrWlhiR3hYWWxoQ1VGVlVSazlTTWtwSFZteFNhR1ZzV25wV2JURXdaREpXVjFkWWJHcGxiRnBZVkZkMGQxZEdWWGxsU0dSWFRWWnZNbFZzYUd0WlZrcEdWMjV3VjJGclduSmFSbHBUWkVaS2MxVnNUazVXV0VKWFZtMTBZVmxYUlhkT1ZXUmhVbGRTV0ZZd1pHOWlNVloxWTBoT1dGSnRlSGxYYTFwUFZrWmFkR1ZHWkZkTmFsWlFWakJrUzFadFRrWmhSbVJPWVd0YU1sWnFTWGhTTWs1eldraE9hRkp1UWs5V2JUVkRVMVprV1dORlpHdE5WWEI1Vkd4YVlWUXhXblJWYmtKWFRVZFNVRlJVUm1GalZrcDBVbXhrVG1FeWR6RldWM2h2WWpGc1YxTnNhRlppUmxwWVZGVmtVMVpHYTNoWGJHUnFUVmhDU1ZReFduZFdNa3BHWTBab1YwMXVVbWhXUkVwR1pWWk9jbHBIYkZOU2JIQnZWbTE0YTFVeFRrZFhiRlpVWVROU1ZWVnRlR0ZsUmxaWVpVaGtWMDFXY0RGVlZ6VnpWMFphYzFkdVNsWmlWRVpZVlRCYVUyTnNjRWRhUjJ4VFRXMW9NbFpyV21GaU1VVjVVMWhvV0dKcmNGZFpWRTVUVmpGU1YxWnVUazlTYkhCSlZHeGFhMVl4V1hkalJXaFhUV3BCTVZkV1dscGxiVVpJWVVkR1UxSldjSGxXYWtKclZqRk9TRlZyYUdsU1ZGWllWRlJLYjFkc1duUmpSWEJPVm14V05GWlhOVTlXVjBWNVlVYzVWbUpHU25wV2FrWnpZekZXY2xkck5WTmlSM2Q2Vm1wSk1WUXlSblJUYTJoV1lXdEtWMWxzYUc5WFJteFhWMnQwVjFac2NIbFpNRnB2VmpKS1IyTkhPVmhYU0VKSVdWUktUbVZHY0VsVGJHaHBWMFZLVlZkWGRGZGtNV1JYVjJ0a1dHSlZXbkpVVjNoaFpXeHNjbFZ0UmxkU01GWTFWbGQ0VTFaV1duTmpSWGhoVmpOb2FGcEZaRTlPYkVweldrVTFhRTB3U2t0V2ExSkhWVEZSZUZkWVpFNVhSbHB2VlcweGIxZEdiRmhrU0dSVFRWaENWMVl5ZUd0WFJsbDNWMnRvVjFaNlJucFpWV1JYWXpGa2NWUnNaR2xTTVVZelZqRmFZV014WkVkVGJrcGhVbTFTY0ZsWWNGZGlNVnBZWlVaT1YwMVdSalJXTWpWVFlrWk9SazVWT1ZWV2JWSlVXbFphWVdSSFRrWlViR1JPVWtWYVIxWlhNVFJqTVZsNFYxaHdVbUV5YUZoVVYzQkhVakZ3VmxwRk9WUldhelY2VjJ0YVQySkhSWGhqUlRWWFRXNVNXRmxVUmtwbFJsSnlWMnhDVjJKV1NtOVdWM0JMVGtaa1IxWnVUbGRpYTNCeVZGWmFkMlZzYkZaaFIzUldUVVJHZVZadGNGTlhSMFY0VjI1S1YyRXlVa3haTWpGUFVqSktSMk5IYkZOTmJXZDVWbTB4TUZsWFRYbFVXR2hoVTBWd2NsVnFUbE5qUmxaMFRsVk9WRlpzY0hoVk1XaHJWREZhYzFkdWJGVldiRnBZVm1wS1MyUldSbk5oUmxaWFRUQktXVlp0ZEdGWlZrNUlWbXRvVTJKRk5VOVdiRkpXWkRGYVdFMVVVbWhOYTFwWVYydFdiMWxWTUhwUmJHaGFWak5TVEZsVldtRmpWazV6Vkd4T2FHVnNXbGxXTW5SaFZqSkdWMWRZY0doU2JGcFpWbTE0UzFWR1ZsaE5Wa3BzVW0xU01WWkhlSGRpUjBWNFkwWlNWMUpzY0doYVJFRjRVakZhV1dKSGVGTmlWa3BaVmtaa01GWXdOVWRXV0d4T1ZsZFNXRlJYZEhkVFJtdDNWV3M1V0dKR2NGaFpNRkpQVm0xS1dXRkVUbFpoYTFvelZXcEdWMk14VW5KT1ZtUllVbFZ3UzFadE1UQlZNVWw0WWtaa1ZsZEhhRmRaYlhNeFYxWnNjbHBHVG1sTlZrcFdWVEo0VDFkR1NuUmxTSEJhVmxaYVVGWnJXa3RrUjFaSllVWmFUbUpzU205WFYzUmhVekpOZUZwSVJsTmlSMUpVVkZSS2IwMXNaRmRYYlhSVVRWVndNRlpIZEd0aFJrcDBZVVpvVlZaRldreGFWbHByVjBkT1JscEhjRTVXYlhjd1ZqSjBiMVl4VlhsVGEyUllZbXRLV0ZsVVNsSk5SbkJJWlVkR1dGSlVSbFpXVnpGM1ZHeEtSbE5VUWxkaGExcDJXWHBLUzFJeFRsbGpSbHBwVmtkNFYxWnRNVFJrTWxaelZXeFdVMkpGTlhGVVZscDNUVVp3UmxkdE9WWk5SRVpJVmpGU1IxWXlTa2RqUmxKV1ZrVmFZVnBXV2t0a1ZrNTBZMFpPV0ZJeWFHOVdhMXBxVFZkSmVGWnJaR2hOTW5oelZUQmtVMVpHVWxkaFJVNVVVbTFTZVZkcmFFOVdNVXB5WTBaa1dtRXhTbGhXYWtwSFkyeGtkR0ZHWkZkU1ZuQlFWMnhXWVZReVVsZFdiazVZWWtkb1ZGUldWbmRWVmxwMFRVaG9UMUl4UmpSWGExWnJZVlpPUm1OSGFGWmlXRTE0V1RGYVYyUkhWa2hTYlhoVFlrWlpNVlpHVmxOV01rWkhVMjVLYWxOSVFtRlVWVnBMVWtaa1YxZHRSbGhTYkZwNVdWVmFkMVl4U2xaWFZFSlhZbGhDU0ZsVVNrOWtSa3B5V2tkR1UxWkdXbGxXUm1ONFlqQTFWMWR1VW1wU1ZUVnZWRlpXZDAxR1duUk9WVGxXVFd0d2VsWXllR0ZYYlVWNVlVVlNXazFHY0ZoYVJXUlhVMVp3U0dKRk5WZGlhMHBZVm14amQyVkdTWGhYYmxKVVlrZFNXVmxVU205WFZteFZVMjA1VjFKdGVGWlZiWFF3WVRGS2MxZHViRlZOVm5Cb1dWVlZlRll5VGtabFJtaHBVakZGZDFZeFdtRlpWbGw0Vlc1V1UySkZjSEJWYlRWRFZVWmFkR05GWkZSTlZUVjZWako0VjFaSFJuSlRiVGxWVm0xU1ZGVXhXbFpsVjFKSVQxWmthVlpZUWxwWFZsWmhZVEZrYzFkcldsaGlWMmhXVm10V1lWbFdjRVZTYlhScVRWaENTVmt3V210aFJUQjNVbXBPVjJKSFRqTmFWV1JTWlVaV2RWVnNUbGhUUlVwVVYxWlNUMUV4WkVkWGJsWnFVbFp3VDFWdGVIZFNiRlowWlVVNWFHRjZSbGRVYkZKSFZqSktXV0ZGZUZwV2JIQk1Xa1phUjJNeVNrZGhSbVJPVFcxb1ZsWnNZM2RsUmxaMFZtdGthbEpYVW1oVmJURnZZMFpzV1dOR1pGaGlSbkJaVkZaU1UyRXdNVVZTYkdoWFRXNVNkbFpIZUdGWFJsWnpXa1pXVjAweFNYcFdha0poVm0xV1ZrNVdhRk5pUjFKUFZtMDFRMU5HV2xWVFZFWlVUVlpzTkZZeWRHRlhSMHB5WTBaa1dsWXpVbWhXTUZwelRteEtkVnBHVGs1WFJVcEpWakowWVZReFdYbFRia3BVWWxkb1dGbHNhRzlqVm5CV1ZsUkdWRkpzU2xwWGExVTFWakpLVjFOdWFGZFdla1V3V2tSS1IxSXhXblZUYkdSb1RURktXbFpYTVRSVE1WbDRWMnhvYTFJelVuQlZiWGgzWld4c2NsVnNaRmRXTUhCSldWVmFRMVl5Um5KalJXaFZZbGhvVEZwR1pFZFNNV1J6V2tkc1UxZEZTa3RXYlRCNFpERk5lRlJZYUZSWFIzaFdXVlJLYjJJeFZuUk9WVTVxVFZkNFZsVnROV3RoVlRGWFkwaG9WbUpVUlhkV1ZFRjRWbTFLUlZWc2FHaE5iV2hOVm10U1IxbFhVa2RXYmxaU1lraENXRlZzVm5kaFJscEhXa1JTV2xZeFNrZFVWbFp6V1ZaSmVtRkdVbGRoTVhCb1ZURmFZV05XU25SUFYzQk9WbTVDV2xaVVNURlRNa1p6VTI1S1dHSkhhR0ZaYTFwTFUwWmFjbGR1VG1wV2EzQjZWMnRrTUZVd01VVlZXR3hYVm5wRk1GWnFSbE5qTVdSMVZHeG9XRk5GU2xsWFYzaFRVbTFSZUZWc1dsaGlWVnBWVlcxek1XVldaSEphU0dSWFVtczFSMVV5ZUhOV01rcFpVV3hDVjFaNlJsTmFWV1JMVWpGYWMxTnNhRk5OYldoYVZqRmFiMlF4U1hoWGJrNVlZa2RvYzFWdWNITmlNVlp6Vld0a1dGSnRkRE5XVjNRd1ZqQXhjbU5GYUZaTmJsRXdWbTB4VjJOdFRrZFJiVVpUVm01Q1ZWZFVTWGhUTVVsNFZXNVNhVkpyTlhCWlZFSjJaV3hhZEdWSGRHdE5WV3cwVmtab2ExUnNaRVpPVm14YVlsaFNhRlpVUm5Oak1WcDBVbXhrVGxacmNGbFdha2t4WVRKS1NGTnJhRlppYlhoaFZteGFWazFXV1hsbFIwWnFZbFUxU0ZZeWVIZGhSVEZaVVd4V1YyRnJiRFJWYlRGWFZqRmFjMkpIY0ZOTlJuQlpWa1pTUzJJeVJrZGFTRTVZWWxoU1YxUldWbk5PUm10M1ZtMDVhRkpyY0ZaV2JYaHZWMjFLV1ZWcmVGWk5ibWhvV1hwR1YyTnRUa1pPVm1Sb1pXdFZlRlpzWTNkTlZsRjRWMnhvVTFkSGVHOVZNRlV4VmpGc2MyRkhPVTVOVjFKWVZqSTFUMVl4V25KT1dIQlhVak5vY2xaVVNrdGpiRTV6WTBab2FWSnNjSGxXVjNCSFYyMVdSMXBJVmxSaGVteFpWV3BPYjJJeFdsaGxSMFpyVFZad1NGWXllRmRWYkdSSVlVWm9XbUpHV2xoVWJYaHpZMnhrZEdSR1pFNWlSbkExVm0xNGIyRXhaRWRYYms1VVlUTm9WMWxYZEdGVlJsWnhVbXM1YWsxcmNFbFphMXBQWVVVeFNWRnNaRmRpUjFJelZXcEdUbVZHY0VkYVIwWlRZbGRvZWxaWE5YZGpNVlY0Vld4a1YxWkZXbFZWYlhoelRsWndWbGR0ZEZkTlZXd3pXVEJXYTFaWFNrZGpSbEpYWWtad2FGcEZXbGRqTVZaelZteGthVk5GU2xsV01uaGhWbTFXUjFwRldsQldiVkpaV1Zod1YySXhVbFZSYTNSVVlrWnNORlpYZEU5aFZURllaVVpvVjAxWGFIWldhMlJMWXpGT2MxcEdaR2hOVm5CTlZtMXdSMlF4WkVoVmEyeGhVbTFTVkZsc2FHcGxWbHBZVFVob1RsSXdXakJWTW5SelZXMUZlV0ZHYUZWV00wSklXa2Q0WVZOSFRYcGhSbVJwVmxSV1NWWlVTalJoTWtaWFUxaGtUMUpGU2xoVmFrNVRZVVpzTmxKc2NHeFNNRFZIVmpJeFIxVXlTbGhoUm5CWFZqTkNURmxxU2xOak1XUnpZVWR3VTFaSGVGaFdSbHByVlRGa1IxZHVVazlXVjFKWFdXeFdkMDFHV2xobFJ6bFhWbXh3ZWxrd2FIZFdWMHBIWTBST1YySllhSEpaTW5NMVZqRndSazVXVGxOV2JUaDRWbXBHVTFFeGJGZGlSbVJZWW14S1ZWbHJaRFJpTVZaMFpVVjBXRlpzY0RCYVZXaHJZVVpLYzJOSWFGWk5iazB4Vm10YVNtUXhaSEpoUm1ST1ltc3hORlpzVWtKbFJscDBWR3RrV0dKSFVuQlZha0V3VFVaa2MxcEljRTVXYkd3MFYydGFjMkZXU25KT1Z6bFZWbnBHZGxwRVJtRlhSVEZaWTBVMVYwMUVWa2xYVjNSaFZqRldkRk51U21wVFJUVllXV3hvYjAweFVsWlhibVJYWWtkU2VWUXhXbXRWTVZwR1YydGtWMkpVUlhkWmFrWnJaRVpLV1dGSGNGUlNXRUpaVmtaV2ExVXhVa2RoTTJ4cVpXdGFXRlJYZEhkVFJtdDNWMjEwVldGNlJqQlhhMUpoVmpKS1dWRnJVbGhXYlZKUFdsWmFWMk50UmtkWGJXaE9ZbTFvZGxac1kzZE5Wa1Y0V2tWa2FWTkZjRzlWYkZVeFZVWldkR1ZJWkd4V2JWSjVXVlZvYTFaVk1WZGpTSEJXWWxoQ1ZGWnRjM2hqVmxwelVXeHdWMkpJUWsxV1Z6RjZUVlpaZVZKclpGZGlSMUp6V1d0YWRtVldXWGhWYTNSUFVqQXhORmRyVm05V1ZtUkpVVzA1Vm1Gck5VUlpNRnBYWTFaS2NtUkZPVmRpVmtwWlZtMHdlRkl5UlhkTlZtUlVZbTVDVjFSWGNGZFhSbHBZVFZWMGExSXhXa2haVlZwM1lWWkplV0ZGVmxkaE1WcG9WbXBCTVdNeFVuVlRiRUpYVFRCS1VGWnRNVEJrYlZaSFYyNUtZVkpHU2xkVVYzUmhWMFpWZUdGSE9WZFNNSEJIVlRKNGIxZHRTa2RUYTA1aFZsWndXRlpzV2s5amJVNUlaVVpPYVZacmNHaFdNVnBYV1ZkSmVWSnNaRmhpUjFKeFZXMHhVMWRXV25GVWJUbG9VbTFTV0ZZeU1UQlZNREZZVldwR1YxWXpUVEZXYWtaaFUwZFdTR0ZHWkdsV1JWWXpWMnRTUzFZeFdYaFdibFpWWWxkb1ZGWnNVbGRYYkdSWVpFZEdhMDFWYkRSV1Z6VlBWakpLUms1V2FGVldWa3BJVkZaYWMxWnRSa1prUm1ST1VrVmFTbFpzWkRSVk1WcHlUVlZrVjFaRldsaFpWM1JoVlVacmVXTjZSbGhTTUZwSFZHeGtjMkZXV2xWVmFscFhZbFJHTTFWcVNrWmtNREZXV2tkc1UySldTbHBXYWtKcllqRmtWMkpJU21GU2VteFlWVzE0YzAweFpISlhhemxYWWtWd2VsbHJVazlXTWtwSFUydG9WMDFHY0V4YVJXUlhVMWRPUjJOR1pGZE5SRUkwVm0xMGEyVnRWa2RhUm1SVFltczFiMVZ0TVZOVU1XeFlaRVprVGsxV2NEQlpNRlpyVjJ4WmQwMVVVbGRTZWxaSVZsY3hTMUl4WkhKUFZtUnBWa1phUlZkWGNFZFpWMDV6WTBWV1ZtSkdTazlXYkdoRFRteFplV1JIT1ZOTlZtdzFWVEowYjFadFNrZFRiRnBYWVRGYU0xcEhlRk5YUjFaSVpFZHdhVkpzY0RWV01uUmhaREZaZDAxVlZsZGhiRnBZVlcxNGQyRkdiRFpTYkZwc1ZtczFlVmxWV21GaFZscElaVVprVjJKVVZqTlZha3BUWXpGa1dXRkdhR2xYUmtwYVZsZHdSMWxXVGtkWGEyaHNVbFJzVmxsclduZGxWbXQzVm01T1YwMXJjRlpWVm1odlZtMUdjbGRzWkdGV2JIQlFXWHBLUzFJeFpIUmlSMmhPVjBWS2RsWnRNWGRSTWtsNFVsaHNWMkpyTlZsV01HUlRWMVpzY21GRlRtcE5WbkI2VmxkMGExZEhTa2RqUld4aFZsZE5NVlp0YzNoamJGcHhWMnhhVjAwd1NsbFdha0poVjIxV2MxWnVUbFppUjJoWVdXdG9RMkZHWkhOWGJVWlZUV3MxTUZWdGRHdFhSMHBJWVVaU1ZWWnNXak5YVmxwaFpFVXhTVnBIZUZOaVJsa3dWbFJHYjJJeVJuTlRibEpXWWtkNFlWbFVSbFpsUmxsNFYyMUdhbFpyV2pCVmJYaFRWakpLV1ZWWWNGZGhhM0EyVkd4YVdtUXdNVlpXYkVwb1lrWndhRlp0ZUdGVE1WcEhWMjVHVkdFelVsVlZiWGhoWlVaYVNHVkhkRlpOVlhCYVZWZDBORmRIU2tkWGJXaGFWa1Z3VUZsNlNrOVNiVVpJWWtaT2FWSllRbFpXYlhCRFZqRk5kMDFZVGxoaWF6Vm9WV3RhUzFkR2JGbGpSV1JZVW0xU2VWWXlNVEJYUmtsM1kwaHdWazFxVmxCV2JYTjRVMFpXYzFWc1pGTlNWbkJaVjJ0V2ExWXhTblJWYTJSb1VtczFjRlV3Vmt0WlZsbDVaVVprVjJGNlZsbFZiWFJyVmtaa1NGVnNiRmRoTVZvelZtcEdjMk15UmtoUFYzaHBVakZLV1ZacVNYaFNNVmwzVFZoS1QxWllRbGhVVnpWdlkyeHNWMWR0ZEZOaGVsWkdWVmQ0YjFZeFNsZGpSemxYVFZad2NsWkVTbE5TTVdSMVUyMUdVMDFHY0ZWV1JtTjRZakZXUjFwR2FHdFNiVkp5VkZaYVMyVnNXWGxPVlRsWFlsVldNMVJzWXpWV1ZscHpWMjV3VldFeGNGZGFWV1JIVTBVNVdHRkhiRk5YUlVwaFZtMTRhazFXU1hoWGJsSlRZbXR3Y0ZwWGRFdFhSbXhWVW01a1YxSnNiRE5XYkdodlYwWktWVlpzYkdGV1ZuQnlXVlphVDFKc1NuRlViR1JvVFZoQ2IxZFhjRXRTYlZaSFYyeHNZVkpVVmxsVmJGSlhWbFprVjFwRVVsUk5WMUpJVmxkNGIyRnNTblJWYkdSV1lsUkdWRll3V2xwbFYwNDJWbXhhVGxKRldsaFdSM2h2WkRGWmVGZFljR2hTUlRWaFZteGFWMDVHV25GU2JVWnFWbXhhZWxkclpHOVViRnBaVVd0d1YyRnJXbWhaVkVaV1pVWk9kVk5yT1ZkaVZrcGFWMWQwWVZsWFNYaGpSbWhPVmtaS2NsUldXbmRYVmxKV1ZXdGtWbUY2UmtaV2JYaHZWakF4V0dGSWNGcFdSVnBNV1RKek1WWXhjRWRXYkdST1RWVndkbFpzWkhkU01WVjRWMWhzVTJFeGNISlZiVEZ2VmtaU1ZtRkZUbFJpUjFKWVZtMHhSMkZWTVZkalJtaFhUVmRvTTFaWE1VdFRSMFpIWVVaa2FWSnVRWHBYYkdRMFYyMVJlR05GWkdGU2F6VndWbTEwZDFOV1pGZFdiVVpWVFZaS2VsVXlOVmRWYlVWNlVXeG9WVlpzY0ROV01GcHJWakZrZFZSc2FGTmhNMEkxVjFaV1lWUXlSa2hUYTJ4U1lrZDRXVlp0TVZKa01YQkZVbTEwVTAxcmNFaFpWV1F3VlRGa1IxTnVXbGRXZWtJMFZsUkdhMUl4Y0VsVGJHUlhVbXh3V1ZaR1ZsTlNNVmw0Vlc1T1ZtRXlVbGhVVmxwelRteHNWbGRyVGxoaVJuQjZXVEJvUzFadFNsbGhSa0phWld0YVNGbDZSbmRUUjBwSFlVWk9WMWRGU2t4V2JURTBZakpSZUZKdVNrNVdiV2hXVmpCa2IyTldWbk5hUms1cFRWWmFlRlpIZUU5V01VcHpVMnhrVjAxcVZuSlpWVnBMWXpKT1JWRnNjRTVTYkhCUlZtcEtORmxYVWtkV2JrNW9VbTFTY0ZacldtRlZWbVJYVm0xR1ZHSldXbnBXYlRWVFZVWmFkVkZ0T1ZWV2JIQXlXbGQ0WVZJeFduUlNiWFJPVm01Q05sWXlkRzlXTVZwWVUydG9WbUY2YkdGV2ExVXhVVEZ3VmxkdFJsZE5XRUpHVlZkNFYxUnNXWHBoUm14WFlXdHZNRmxVU2tkak1VNTFWVzFvVTJKWGFHaFhWbEpIWkRBd2VGZHNXbGhpYXpWUVdXdFdkMDFXWkhKWGJFNVdUVVJHUmxadGRHOVdNVWw2WVVoS1dtRnJXbFJaZWtaclpGWldkR1JHVGxOaVNFSmFWakZhYTAxR2JGaFViazVXWWtad2FGVnNXbmRqYkZKV1ZXeGtWMDFYVW5sV01qQTFZVVpLVlZKdWNGWk5ibWhvVmpCYVdtVnNWblJoUm1oWFlraENlVlpYY0V0VE1VNVhWRzVTVTJKRk5WUlpWRTVEV1ZaYWMxa3phRTlTYlhoWFZGWldhMkZzU25OalJ6bFdZV3MxVkZscVJsTlhSMUpKV2taU1UySkhkekZYYkZaclVqRlplVk5zV21wU2JrSllWVzE0UzFOR1duRlRhMlJxWWtWd2VGWlhlR3RoUjBWNlVXeEdWMVl6YUdoVmVrcE9aVWRPUmxwSFJsTldSbHBRVmxkMFYxWnRVWGhYYmxKT1YwZFNVMVJXWkRSWFJscElUbFpPVjAxclZqVldWM2hoVjIxS1dWUllhRnBoYTFwWVdrVlZlRll4VW5OYVJrNXBWMGRuTWxadGNFdE5SMFY0Vlc1S1RsWnRhRmRaYlRFMFYwWmFjVlJzU210TlZuQjRWVlpvYjFZd01YSmpSVnBYVmpOb2NsWkhNVXRrUjBaRlYyeG9WMkpJUW05V1ZFbDRWakpTUjFOdVNtRlNiVkp3VlcwMVEyUnNaRmRWYTJSclRWWktXRll5TlVkVk1rcFdWMjFHVjJKWVVucFVhMXB5WkRGYWMxcEdXbWxXV0VKaFZteGtlazVXV1hsVGEyUlVZa2RvVjFSV1duZGpiRnB4VW14a2FtRjZiRmxaVlZVeFZqQXhWbU5GZEZkaVJrcE1WRlZhYzFZeFZsbGhSbWhwWWtWd2VsWlhNSGhWTVd4WFlraEtZVko2YkhKWmExcExWbXhXZEU1WGRGaFNhMncwVmpKMGQxWnJNWEZTV0dSWFVqTm9ZVnBWV2s5alZscHpXa2RvVG1KRlZqTldNV1IzVXpGSmVGZFlhR0ZUUmxwV1dXeG9RMVpHVm5SbFNHUllWbTFTV0ZkclVrTmhNa1kyVW10b1YySllhRmhXVkVwTFYxWldkVkpzY0ZoVFJVcEpWbXBLTkZsWFVrWk5WbWhRVm0xU1ZGbFVUa05aVmxwWFdUTmtUMVpzYkRSV01XaDNZVVpPUm1OR2FGZGhNVnBvVm10YVYyTldTblJTYlhSWFlUTkNObFpyWTNoak1WVjRWMnRrV0dGc1NsaFpWRVozWVVaa1YxZHJOV3hXYkhBeFZrY3hSMVpHU2xsUmJIQllWbTFvTTFsNlNrcGxSbVIxVlcxd2JHRXhjRlZXUmxwaFZqQTFWMVZzWkZkaVdGSllWRlZTUjJWV2EzZFhiVVpYWWtac05sVlhlRU5YUmxwelkwVjRWbUpVUmxCVmFrWlRaRVpLYzFwSGJGUlNWWEF5Vm1wR1UxTXdOVWhTV0d4VlltdHdVVlp0TVZOaFJsWjBUVlpPVlUxV2NIcFpWVlpQVjBaYWMyTkVRbFZXYldoeVZsZHplR05zV25GVWJGWnBVbXh3ZVZacVFtRmhNVTVJVW10c1VtSkdjRTlWYlhoMlpXeGtWMVp0UmxkTmJFcEpWa2R3WVZVeVNsbFJiR2hhWVRKb1ExcEVSbXRqTVZwMFpFWk9UbUV6UWtwV1ZFb3dZVEpHVjFOclpGaGlSbkJZV1d4b2IyRkdhM2xsUjBacVZtczFlVmRyVlRWaFZrcFpVV3BhV0Zac1dtaGFSRXBIVW1zeFYxZHRjRk5oTVhCWlYxWmtNRk15VG5OV2JsSk9WbTFTV0ZSV1dtRmxiRnAwWlVVNWFGWnJiRFJWTWpWclZqSkdjbE51U2xwaGExcFVWbXBHZDFOV1RuTmFSMnhZVW10d1dsWnJXbUZXYXpGWFdrWmtWMWRIZUhKVmFrNVRXVlphZEdSSVRrOVdia0pYVmpJd05WWXlTbFpqUm5CYVZsWktVRlpzWkV0U01rNUlZVWRHVTFac1dUQldha1poWkRGSmVGWnVTazlXYlZKWVZXeGFWMDB4V25SbFJrNVRUV3RzTlZVeGFHOWhWa3AwVld4YVdsWkZXak5XVlZwYVpERmFjbVJHWkU1V00yZzJWbXhrTkdFeFZYaFRiazVxVWxad1YxbHNhRzlWUmxweFVtMUdhbUpIVWpGWmEyUkhWVEZhZFZGc1ZsZGlXRUpNVlhwR1QxWXhTbk5pUjBaVFlsWktWVmRYZEc5Uk1ERnpXa2hLVm1FelVsVlVWbFp6VGtaYVNFNVdaRmRXTUhCYVZWZDRVMVp0U2tkWGFrNVhUVVp3YUZWcVJuTk9iRXB6VjJzMVYwMVZjRXBXYlhCSFlqSkZlR0pHWkZSaVIzaFhXV3RhWVZZeGJITmhSemxvVW01Q1dWcFZaRWRYUmtsNFYydG9XR0V4Y0hKV1IzaGhWMVpHYzJGR2FGZFNWWEJZVjJ4V1lWZHRWbGRVYms1cFVqSm9WRlJYTVc5WGJGcDBUVWhvVmsxV2NFaFdiR2hyVjBkS1JrNVlSbHBoTWxKVVZGVmFWMlJIVmtaUFYyaFhZVE5DWVZaV1pEUlNNVmw1VTJ4V1UxWkZTbUZaVjNSaFVqRndSVkZVUmxoV2JFcDZXVlZhYjFVd01IbGhSRlpYWWtkTmVGcEVTazVsUm1SMVZHeGFhVkl4U2xwWFZ6QjRWVEZSZUZadVVteFNiVkpRVm0wMVExSXhaSEpWYTA1b1VtdHNNMWt3Vm10WGF6RkhVMnRTVjAxdWFHaFdha3BQVTBkR1IxcEhhR2hOTUVwSlZqSjRWMWxYUlhsVWJrNXFVbGRvVkZsclZURldSbHAwVGxWT1YySkdjREJVVldodlZERkpkMVpxVmxkV00xSnlWbXRrUzJNeFRuVlRiRnBwVjBVeE5GWnFRbUZXTWsxNFdraFdZVkl5YUZSWmEyUXpUVVphYzFwRVFsVk5hMXBIVkZaV1YxWXlSWGxoUm1oYVlUSlNkbHBYZUdGamJIQkdWMjE0VjAxR2NFdFdWRWw0VWpGWmQwMUlhRlJoZWtaWVdWZDBTMkZHYkRaU2JYUlVVbXhhZVZscldsTmhWbVJJWVVaV1dGWXpVblpWVkVaS1pVWmtjMkZGTlZSU01taFFWbGN4TkdReFRrZFdXR3hQVmxoU1ZsUldaRk5UVm5CV1drVmtWMDFyY0VoWk1GSlBWMnhhVjJOSWNGZGhhMXB5V1RJeFUxTkhUa2hpUm1SWFVteHdTMVpxUm10TlJteFlVMWhvV0ZkSFVrOVZNR1J2Vmxac2RFMVVVbGhXYkhCNFZrZDBUMVpHU25OWFZFcFdZbGhTTTFscldrdGtSbFp4VW14a2FWZEhhRkZYVmxwaFV6RmFWMWR1Vm1GU2JWSllWV3hXZDFkV1dsbGpSWFJYVFdzeE5GZHJhRTloUmtwVlZteFdWbUZyY0haV1ZWcGhWMGRXUjFSc1pFNWlSbkEyVjFkMGIxTXhaRWhUYkZwWVlrZG9WbFp0ZUhkTk1WVjNWMnh3YkZZeFdrbGFSVnByVmpKS1NHUjZTbGRpUjA0MFZXcEdZVll4WkZsalIyaFRZbGRvYUZkc1pEQlpWbVJIWVROc2JGTkhVbFJVVm1oRFVqRlNjMXBIT1ZWaGVrWkhXVEJXTUZZeVJuSlhiRkpXVmtWd1MxcFZaRXRTTVhCSVVteFNVMkV6UWxaV01XTjRUVWRSZVZSc1pGZGlhelZvVlc1d2MxbFdXblJPVlU1WVZtNUNSMWRyVm10V01rcEdZMFJDWVZOSVFreFdiVEZMVmxaYWRWTnNaR2hOV0VKTVYydFNRazFXV25SU2EyUmhVbXMxVDFSVlVrWk5SbGw0VjIxR1dsWnRVakJXYlhodlZUSkZlVlZ1UmxaaVZFWlVXV3BHYzFaV1NuVmFSMnhPVm01Q05sWnNaREJoTVZwSVUyeGtXR0pIYUZoWmJHaHZaV3hzVmxkcmRHcE5helZKVkRGYVYxWXdNSGxoUlRGWVlUSlJNRmRXV2twbFJscDFVMjEwVTJKSVFsQldiWEJIVXpGa1YxcEdhR3RTZW14VlZGWmtORmRHVlhsT1ZYUlZUVmRTUjFZeWVHOVhiVXBJWVVoYVYxSldjR0ZhUkVacll6Sk9TR1ZHWkZkU1ZuQlpWbXBLTUZsV1dYbFNiR1JVWW14YVUxbFhlSGRYVmxweVZtdDBXRkp0ZHpKVmJURkhWakF4V0ZWcVJsZFNNMmhVV1ZWVmVGWnRUa2RpUm1oWFRURktlVlpzVWtkVk1VbDRWMjVXVTJKR1NtOWFWekUwVm14YWRHTkZTazVXYXpWSVdWUk9hMVl4V2taWGJHUlZWak5TTTFwV1dsZGtSMDVJVW14a1RtRXpRbUZXVm1Rd1ZURmtjMWRyV2xoaE0yaG9WV3hhZDJGR2EzbGxTR1JVVW10d2VsWlhlRTloUlRCM1UxaHNWMkpZYUhGYVJFcFhVakZhV1dGR2FHaE5iRXBaVjFjeGVrMVdaRmRpU0ZKT1ZtczFjVlZ0ZUV0WFJtUnlWMnM1V0ZJd2NFbGFSVkpQVmpKS1ZWSllaRmRoYTFwb1ZteGFTMk15U2tkYVJtUk9UVzFuZVZadGNFdGxiVlpIVTFob1lWTkdXbGxaYTJoRFYwWlNWVk50T1ZWV2JWSldWVEkxZDFSc1duTmlSRlpXVFc1U2NsWXdaRXRYUjFaSFZXeHdhRTFyTUhoV1J6RTBWMjFXUjJORmJHRlNhelZQVm1wT2IxZHNXbk5hUkVKYVZteEtlbFl5TlU5WFIwcElWVzFHV2xaRmNIWlZhMXBhWkRGa2MxUnNaRTVXYmtJMlYxUkNWazFXV1hsVGEyeFNZV3hhV0ZSV1pHOU5NVlp4VW0xR1YyRjZSbGhaVlZwaFlVVXhkR0ZHY0ZoV2JFcElWMVprVTJNeVNrbFRiR2hvVFRGS1dWWnRjRU5rTVU1SFlrWmFXR0p0VW05V2JYUjNaVlpyZDFadVRsZE5hM0JhVmxjeGIxZHJNWEZTYkdoV1lXdGFNMVV4V21Gak1WcDBZa1pvVTFaWVFsSldiVEIzWkRBeFYxSllhRmhYUjJoWldXdGtiMVF4V25KWGEzUlhUVlpLV0ZZeWVHdFVNVnB6Vm1wV1lWWlhhRkJaVlZwTFkyMU9SVkZzY0ZkV2JrSXlWbTE0WVZsVk5YTlhiazVXWWtkU1QxVnROVU5PYkZwMFpVZEdWRTFyTVRWV1IzUnZZVEZLVlZac1VsWmlSbkF6V1ZWYVlXTXhWbkpqUjNoVFRWVlpNRlp0ZUc5ak1WcElVMnRvYUZKNmJGZFpiRkpIWkd4WmQxZHNaR3RTVkVaWFZHeGtORlV5U2xsaFJGSlhWbnBGZDFSVldsWmtNREZYWVVaYWFWTkZTbHBYVmxKTFZURk9SMWRzVmxOaVdGSlVWRlpWTVdWc1duUmxSM1JXVFd0d1NsVlhOWE5XTWtwSFUydE9ZVlpXY0dGYVZWcHJZekpLU0dKR1RrNU5iV2hXVm10YVUxSXhUWGxWYms1WVlrZG9jVlZzVlRGWFJsSldWV3hrVkZKdGVGWldSekV3VmpBeGNsZHVjRlpOYm1oNlZtMHhSMk5zVG5GVWJGcE9VbTVDYUZkc1dsWmxSbVJHVDFaa2FGSnJOWEJWTUZaSFRURmFkR1ZIZEU5U2JGWTBWakZvYzFVeVNuSmpSbXhhWVRKU2RsbFZXbGRrUjFaSldrWm9VMkpyU2toV01uUldUbFpWZDAxV1pGUmhhMHBoVm14a1VrMUdiRmRYYTNSclVsUnNWbFl5ZUd0aFZscEdVMWh3V0dFeFNreFdha1pMWTJzeFYxZHRhRk5pU0VKYVZsZHdSMU14VmxkWGJrWlNZa1p3VDFadE1WTlhSbGw0WVVkMFdsWnJiekpaYTFwelZqSktWVkpVUW1GV2JIQm9XWHBHVjJOc2NFZGFSVFZYVjBWSk1sWnNVa3RPUjBsNFdrVm9VMWRIYUhGVmJYUkxXVlpzVlZKdVpHaFNiWGN5Vlcxek5XRnJNWEpYYTJoWVlUSlNlbFpxUmt0V01XUlpZMFprYVZkRlNrVldNVnBoVkRKU1IxWnNiR2xTYkZwdlZGYzFiMlF4V2xoTlNHaFdUVlpHTkZscmFGTlViRm8yWWtac1YySllhRE5hVlZwV1pWZE9SMVJzYUZOTlNFSlpWbXBLZDFFeFduUlRiR3hXWWxkb1lWbFVSbmRVUm5CSFYydGthMUpVYkZoWk1GcHJWVEZhZEU5VVdsZGlWRVV3VjFaYWMxZEdWbkpYYXpWWFlrWndXRmRYZEd0Vk1WRjRZa1pzYWxKdFVsQlphMXAzWld4a1dXTkZaRmRTVkVaWVZqSjBiMVl3TVhGV2EzaFhVa1ZhY2xWdGVFOWpNa1pIVm14a1YwMVZjRlpXTW5SaFdWWlZlRmR1VG1GVFJrcFVXV3hvVTFaR1VsZFdibVJVWWtkU1ZsVlhNVEJVYkVwelUyNXdWazF1VW5KV01HUkxVMGRXUjJGR1ZsZGxiRnBWVm1wQ1lXTXhXbGRUYmxKVFlrWktWRmxZY0ZabFJscHlXa1JTVmsxcldsaFZNV2h2VmtkS1dHRkdhRnBpUjJoVVZqQmFkMU5IVFhwaFJrNU9ZVE5DU1ZacVNqUmlNa1pYVjJ4a2FsTkhhRmhWYlhoM1pHeFdWVkpyT1ZkTlZscGFXVlZhYjJGSFZuUmxSbWhYVW0xUmQxcEVSazlqTVZweldrZG9VMDB4U2xsV1JscFhaREpXYzJFelpGaGlWR3haV1d0YWQxSXhhM2RXYlRsYVZtdHdXRmt3VmpSWGF6RlhZMGhLV21WcldqTlZNR1JMVWpGV2MxUnNaRmhTVlhCdlZtMHdlRTFHYkZoU2JrcE9WbTFvVlZZd1pEUldNV3gwWTNwR1dGWnRlREJhUldSSFZqRmFkR1ZHV2xkU00yaFFWbXBHWVdNeVRrVlJiVVpUVmpGS1NWZFhkR3RUTVVsNVZHdFdVbUpWV2xoV2FrWkhUVEZrVjFadFJsUmlWa1kwVmpJMVIxWlhTa2xSYXpsV1lsUldSRlJYZUdGalZrWjBaRVpTVGxaWGR6QldNblJ2VlRKR1IxTnVWbEppUjJoWFdXdGFkMDB4V2tkWGJYUlhWbXMxTVZrd1ZUVldNa3BJWkhwQ1dGWkZTbGhaVkVwSFVqRk9XV0pIYUZSU1ZGWm9WMWQwYTJJeVVuTlhXR3hzVW01Q2MxVnRNVk5OUmxGNFdrUkNWV0pHY0RCYVNIQkhWakpLUjJOSVdscGhhMXB5VlRCYVQyUldVbk5WYldoc1lsaG9XbFl4V2xOU01XeFhWV3RrYUUweWVITlZiWE14VjBaU1YyRkZUbFJTYkhCSlZGWlNVMkZHV25KalJFSmhVMGhDU0ZacVJrcGxiVVpIWVVad1YxSldjRzlYVkVwNlpVWmtWMVJ1VW1wU2F6VndWVEJXUzJJeFdYaFhiRTVVVFd0c05GWlhkR3RYUjBweVRsWnNXbUpHV21oWk1WcFRWakZ3UjFSck5WZGlXRkY2Vm1wS05HRXlSa2RYYmtwcVVrVmFWMVpxVG05bGJGbDNWMjEwVkZacldubGFWVnBoWVVkRmVHTkdSbGRXZWtZMlZHeGFXbVZIVGtaaFIyaFRZWHBXZGxkc1pEUlpWbFpYVjI1T1ZtRXdOVmhVVmxVeFpWWlNWMkZGT1ZoU01IQjVWR3hhYTFkc1drWk9WVkphVFc1b1ZGWnRlRmRqTVhCSFlVWk9hVkl6WTNoV2EyUTBXVlpSZUZkWWFGUlhSMUpZV1ZkNFlWbFdXbk5hUlRWT1ZteHdNRlJXVmpCVk1ERnlUbFZrWVZaV2NISldSM2hMWkZaR2MxWnNaR2xXUlZWM1YxWlNTMVV4V1hsVWExcG9Vak5vVkZSWE5XOVdWbHBIVld0MFZVMUVWbGhXTWpWUFYyc3dlV0ZHUWxaaGEwcFlWR3hhVjJSRk5WWmtSbFpwVW01QmQxZHNWbUZVTVdSelYydGFhbE5HY0ZsV2JYaDNZVVpzTmxKdGRHdFdia0pJVmpKNFQyRldaRWhoUm5CWFlsaENTMXBWV2twbFZrcDFWV3hTYVZKdVFsRldiWGhyWWpGc1YxVnNXbGhpYlZKeFdXdGtORmRHV1hsTlZFSldUV3R3UjFSc2FITldWbHB6WTBoS1YxWkZjRXhWYWtwUFUxZEtSMXBIYkZOTlJGRjNWbTB4ZDFJeFpIUldhMlJYWW14YVdGbHJXa3RqUmxwelYyNWtWMVp0VWxsYVJWcHJZVEF4YzFKcVVsaGhNWEIyV1ZSR1MyUkdWblZUYkZaWFlsWktWVlpVUW1GaE1rNXpXa2hTVUZac1duQlZiRkpYVTJ4a1YxWnRPVkpOVm5CWVZqSTFVMVp0U2tkVGJHUlZWbFp3TTFwWGVISmxWVEZXV2taT2FHVnRlRnBYVmxaaFZESkdSazFZUm1oU1JscFlWRlprVW1ReFduUmpla1pYVFZkU2VsZHJXbTloVjBwR1kwWm9WMkpZVWxoVmVrcEhVakZrZFZWdGVGUlNNVXA0VjFkMGEwMUZOVmRqUmxwaFVsZFNiMVJXVm5OT1JsVjVaRWM1VjAxcmNGcFdSbWh2VjJ4YVYxWnFUbUZTUlZwUVdUSXhUMUl4Y0VaT1ZtUm9UVEJLUjFacVJtdGtNVTE0Vm01U1YyRXlVbWhWYlRFMFkwWldkR1ZGZEdwU2JGcDRWa2N3TldFeVNrZGpSbHBXVm5wR1NGbFVRWGhYUmxaeVlVWndhRTFZUWpKWFZsSkhWREZPUjFadVRsaGlSbkJ3VmpCa2IySXhaSE5XYlVaWFlsWmFXVlpIY0dGV01rcElWV3hTV21FeVVYcGFWM2hyVmxaR2MxcEhiRTVXTVVwS1ZsZDRiMkl5Um5OVWEyUnFVbTFvWVZaclZtRk5NVnBHVjIxR2ExSlVSbGRVTVZwUFlVZFdjMWRzYkZkTmJsSnlXWHBHYTFJeFRsbGlSMmhUWWtoQ1dWZFhkR3RWTURCNFZtNUdVMkpGY0hOV2JYaGhaVlprY2xkdE9XaFdNRlkyVlZjd05WWXhXWHBSYTFKWVZteHdhRlpxUm1Ga1ZsWjBaVVpTVTAxVmNHRldiVEIzWlVaVmVGcEdaR3BTVm5Cb1ZXeGtVMkl4VWxaVmEyUnNWbXhLZWxadE1EVldNREZ5WTBaYVYySllhRlJXTWpGR1pVZE9SMUZzV2s1U2JrSlpWMnRhWVZReVRYaFhiazVoVWpKNFZWVnNWbHBOYkZweFUycFNWMDFYZUZoV01XaHZXVlpLVjJORk9WZGlXR2d6V1ZWYVYyUkZNVmRVYkdSVFlraENOVlp0TUhoU01XUkhWMjVPYWxOSGFGZFVWelZEVWtac1YxWllhRmhTYkZwNVdXdGFZV0ZXU1hsaFJFcFlWbTFSTUZaRVJrcGxWbEp5WVVaT2FWTkZTbGxXVjNoaFpHMVdjMWR1U2xkaVZWcFhWRmQ0UzFJeFVsZFhiVVpvVFZWd2VsVXllRzlYYkZwR1YycE9WV0pZYUdoYVJWVjRWbFpXZEdGRk5WZGlXR040Vm14a05HSXlVWGhXYmxKVVlUSjRVMWxyWkc5WlZteHlXa2M1VTFKc1dubFdNakV3VmpBeFdWRnJaRmROYWtVd1ZtcEtTMUp0U1hwaFJtUm9UV3MwTUZaWGNFZFpWa2w0Vkc1V1ZHSllRbFZWYWs1dlYxWmFkRTVZWkZKTlJGWklXV3RvUjFVeVNsWlhiRkpWVm14d2FGcFhlRnBsVlRGWVQxWmFUbFp1UWxkV2JURTBaREZaZUZkcVdsTldSVXBvVld0V2QxZEdWbkZTYlVaWVZqQndTVmt3V2s5aFIxWnpWMnhzVjAxV2NIWmFSRVpLWlVad1JscEhhRTVOYkVwWVYxWlNRazFXWkVkaVJteHFVbGRTVDFadGVIZFhWbEp6Vm1wQ1YwMUVSbmxXYlhCWFZqRlplbFZ1U2xoV2JIQm9Xa1ZhVjJOdFJrZFhiV2hvVFZjNU5sWnNaSGRTTVd4WVZGaG9hbEpYYUhCVmJYaExWa1phYzFkdVNteFdiSEF3VkZWb2IyRXdNVlpXYWxKYVlURndkbFp0ZUd0VFIwWkhWbXh3YVZkRk1UUlhWRVpoVmpKTmVHTkZaRlZpVjJoVVdXdGFkbVF4WkhOV2JHUk9VbXhzTkZVeU5VOWhiRTVJWlVac1dsWkZXa3hXYTFwYVpERmtkRkp0Y0U1aE0wSkhWbTB3ZUZJeFZYaFhXR2hUWVdzMVdWWnRNVk5PYkhCV1YyeHdiRlpyTlhsV2JYaGhZVlpKZVdGSVdsZFNiSEJvV2tSS1NtVkdaSFZWYlhSVFRURktWbFpHV210Vk1VNVhWbTVTYTFJelVtOVZiWFIzVFZaV1dFNVZUbGRpVlZwNVdUQm9ZVlpXV1hwaFNFcFhZa1p3VEZwRldrdGpNV1J5VGxaa2FWZEhUak5XYlhCTFRVZEplRlJZYUdGU1YyaFZXV3RrTkdJeFZuUmxSWFJhVm0xNGVWWXlOV3RXUlRGWlVXeGtWMDFxUmtoWlYzTjRWMVpHY2xkc1pGZE5NbWhaVm10amVGSnRWa2hVYTJScVVtMVNXRlJVU205TmJHUnlWV3RrVjAxc1NraFdSelZMWVZaS2NtTklRbFpoYXpWMlZqRmFhMVl4Y0VsalJUVlhUVlZ3TmxkV1VrOWpNa3BIVkd0YVQxZEZXbGhaYkdoVFRURlNWbGRzWkd0U1ZFWmFWMnRhVjJGV1dsZFhWRXBYVm0xUmQxUlZXbHBsUm1SeVYyMXNiR0V3Y0doWFZtUXdaREZPUjFkWVpGaGhlbXh4VkZab1ExTkdXbGhOV0U1b1ZqQldNMWt3WkVkV01rcFZVbXBPVjFKRldsZGFWbHBMWTJ4d1IxcEhhR2xUUlVwVlZtMXdRMkV5U1hoWGEyUldZa2RvY1ZwWGRHRldWbFowWlVoT1QxWnVRbGRYYTFKRFlVWktjbUpFVGxkaVdFSlFWakp6ZUZOSFJraGhSbVJPVW01Q2FGZHNaRFJXTWxKSVVtdG9VMkpGTlZSV01GWkxWMnhaZUdGSVpGTk5hMVkwVjJ0YWIxWkhSWGxoU0VaV1lsaE5lRll3V21GamJHUjBVbXh3VjJKSGR6QldNblJUVlRGWmQwMVdaR2xTUlRWV1dXdGFZV05zYkZaV1dHUnNWbXhhTUZReFdtRmhWa2w1WVVaV1YyRnJXbWhaZWtwUFl6RndTVlp0UmxOTk1taDNWbGR3VDFWdFZuTmFSbVJYWWtkU1QxVnRlSE5PVmxaMFkwZEdWazFyVmpWYVZWcHZWakpHY2s1V1VtRlNNMmhvV2tWa1RtVnRSa2RWYkU1cFVtNUJNVll4V2xkWlZteFlVbXRvVTFkSGFIQlVWRTVEVjBaYWNsWnJkR3BpUmxreVZXMTBkMkpHV25KalNHeFlZVEZ3V0ZsV1drcGxSazV6WTBaa1YwMHlhRmxYYTFKSFZqRkplRnBJVmxaaGVsWlZWV3BLYjFWR1dsaE5TR2hQVW0xU1NGbHJhRXRYUjBwWlZXMDVWMkpZVWpOVVZWcGhWMGRXUjFwR2FHbFdXRUpoVjFaV1YwNUdXWGROVldScVUwaENXRmxyV25kVlJtdzJVbXhPYTFJd05VaFhhMlJ6VlRKS2NsSlliRmRpV0VKTVZGVmFWbVZHV2xsaFJtaFlVakpvV2xkWE1UUlRNazE0Vm01U1QxWlZOV0ZXYlhoTFZqRlplVTVYZEdoaVZYQklXV3RTVDFZd01YRlNhMmhhVmpOT05GWXdXbGRqVmtwelkwVTFVMkpyU2pWV2JYUnFaVVpKZVZSWWFHRlRSbHB3VlcweGIxZEdiSEpXYm1SVFVtMVNlbFp0TVVkWFIwcFhWMnhvVjFaNlZreFhWbHBLWlZkV1IxVnNWbGRXYmtGNlZtMTRZVmxYVWtaTlZWWlRZa1Z3VDFsclduZFhWbHB4VTFSR1UwMVdjRWxWYlRWUFZrZEtWbGRzYUZwV00xSklWR3RhVTJNeFpIUlNiRkpUVFZWd1MxWnJZM2hpTWtaWFUyeHNVbGRIVWxoWmEyUk9aVVpXVlZKc2NHeFdhM0JhV1ZWa2QxVXdNWFJoUm14WFVteHdhRnBFU2s5ak1XUjFVbXhPYVdKV1NsVldiVEUwV1ZkV2MxZHNhR3BsYTFwWVZGVlNSMVl4YTNkV2JtUlhUV3R3VmxWWGNFOVdWbHB6WTBkR1lWWldjSEpaZWtwSFVqRldkR0ZGTldsaVYyaFdWbXBHYTA1R1ZYbFVXR2hZWW1zMVdWbHRkR0ZXYkd4elZXNU9WMUpzU2xoWlZWWlBWVEpLUjFkcVFsVldiRnB5V1ZWa1MxSXlUa2xpUm5CT1VtdHdSVlp0TUhoVE1XUllVbXRvYUZKdFVsUlVWRXB2WWpGa2NsWnRkRlpOUkZaNlZXMDFUMWxXU1hsaFJ6bFZWbnBXVTFSVldtRmpNWEJKV2taT1RsWnRkekZXYkdRd1lURmFXRk51U21wU01taFhXV3hTUjJSc2EzZFhiVVpxWWtoQ1JsWlhNWE5VYkZwMVVWaGtXRlpGU2xkVWJGcGhZMnN4V1ZOc2FHaE5iV2haVm0wMWQxWXhWa2RYV0dSaFVsaFNXRmxyWkZObGJGcDBaVWRHYUZJd1ZqUlpNR00xVmpGYVJsTnRhRnBXUlhCUVdYcEdkMU5XV25SU2JFNXBWbXR3VVZZeFdsTlVNVVY0VkZob1dHSkhVbWhWTUdSVFdWWmFkR1ZJVGs5V2JGb3dWR3hXTUdGSFNrWmpSV1JWWWtad2VsWnFTa3RYVjBaRlZHeGthR0V4YjNwV2JYQkhZVEpPY2s5V2FHdFNiVkp3VlRCV1NrMXNXbk5WYTNCc1VqQXhORlpzYUd0VWJHUkhVMjA1Vm1KdVFucFdNRnB6WXpGV2NscEZOVTVXYmtKSFZsY3hORmxYU2tkVGJrNVVZbTE0V1ZsVVJuZGhSbXhYV2tWYWJHSkZXbnBaTUZwdlZqQXdlRk51YkZkaVJrcE1Wa1JHV21WR2NFbFdiRnBwVjBWS2VsZFdVa2RrTWxaelYyNVNUbE5IYUU5VmJGSkRUa1prY21GRmRGZGlWWEJIVkd4ak5WWnRTbGxoUkU1aFZqTm9lVnBFUm10a1JrcHpXa1UxYUUwd1NtaFdiWGhxVFZkUmVGZFliRk5pYTNCVVdWZDRTMkZHVm5SbFNHUllVbTVDUjFkclZtdFZNREZaVVd0b1YxSXphRkJXYWtwTFkyeE9kVmRzWkdoaE1qa3pWbXhTUjFJeVVrZFhia3BoVW0xb2NGbFljRmRYYkdSWVRWaHdUbFp0VWxoWmEyaExXVlpLTm1KR2FGWmlXR2hNVmpCYVlXUkZOVmhrUm1oVFRVaENTVmRVUW05ak1WbDNUVmhHVTJFeWFHRldiRnBYVGtacmVVMVZkRk5XYkVwNlZtMTRhMVl3TVhSYU0yeFhZbFJHTTFWNlJrcGxWbEpaWWtaV2FFMXNTbGhYVjNSdlVURmtSMVp1VGxaaVIxSllWbTB4VTFac1ZYbGpSazVYVFVSR2VsVXlkSE5XTWtwWlZXNWFWMVpGY0V4Vk1HUkhVMVpHYzFkdGFHaE5XRUpPVm10a05GbFdiRmhVYkdSVlltdGFVMWxyV21GVU1WcDBUVlJPYkdKR2NFaFdNakExVmtVeGNsZHVjRlpOYWxaWVZsY3hTMVpzWkhOaFJuQm9UVmhCZWxaR1VrZFpWMDV6V2toT2FsSXpVazlXYWtaTFRteGtWVkZ0ZEU5U01GcFlWVEkxVDJGc1NrZGpSbXhYWWxob2FGa3llRmRqVmtwelYyMTRVMkY2VmpaV01uUnJaREZhUjFOWWNHaFNiWGhaVm1wT2IyUnNWbFZTYXpsVFRWaENTRmRyWkVkVk1rWTJWbXhzVjFKc2NGZFVWbFY0VmpGa2NtRkhlRk5pVmtwMlZtMHhOR013TlZkaVJscFlZVEExV0ZSV1ZuZGxiR3QzVjIwNVdsWnJjRWRXTWpWTFZqSkdjbGR1U21GU2JIQllXVEp6TVZZeFZuTlVhelZYVjBWRmVWWnRNVFJoYlZaR1RsVmtXRmRIVWxCV2JHUlRZVVpWZDFadVpGaFdiWGg2V1ZWYVQyRlZNVmhsU0d4WFlsUldjbGxyWkV0VFIxSkZWR3hrVG1Gc1dsRldha0pyVXpGYWRGUnJXbWhTYlZKUFdWZDBZVTFzV25SalJYUlVUVmRTV1ZWdGRITmhiRXAxVVdzNVdtSlVSblphVmxwclkyeGtkRkpzV2s1aGVsWTFWa2Q0WVZsV1VYaFhibEpXWWxSc1ZsWnJWa3RTTVhCWFYyMUdhMUpVUmxwWGExcFRZVlphY2xkWWNGZFNNMmhvV1ZSR2ExSXhjRVpoUmxwb1pXMTRXVmRYZUZOU01WcEhZVE5rV0dKSFVuRlphMlJUVFZaa2NsZHVaRmROYTNCS1ZWZHdZVll3TVhWVmJrWlZZa2RTU0ZWcVJrOWtWbEowWTBaU1UwMXRhRmxXTVdRMFlqRlZkMDFJYUdsVFJYQm9WV3hvVTFkR2JISmFSazVzVm0xNGVWWXlOV3RXTURGWFkwUkdWbFp0YUROV01GcGFaV3hXZFZOc1dtbFdSVnBaVjFod1IxTXlVbGRWYms1VllsZDRWRlJXVm5kWGJGcHpXa1JTV2xZeFJqVlZNV2h2VjBkS2NrNVdaRnBXUlRWVVZtMTRjMk14WkhSU2JHaFRZa2hDV2xaSGVGZE5SbVJ6VjI1S2FWSkdXbUZXYkZwM1ZrWlplVTFWV214U2JWSjRWa2Q0YTJGV1NuVlJiVGxZWVRGYWNsWnFSazlTYXpsWFdrWlNhR1ZzV2xsV1JsSkxZakZrYzFkdVVtcFNXRUpQVm0xNFYwNUdXbGhPVlRsWFZqQldOVmxWWXpWV2JVcFpWV3Q0VjJGclducFpla1pYWTJ4a2NrNVdUbWxTTTJRMlZtMXdTbVZHU1hsU2JrcE9WMFZ3V1ZsVVNqUldiRkpYVjI1a2EySkdjRlpWVm1odlZrWmFjbGR1YUZkTmJtaHlWbXBHUzFkRk9VbGFSbVJwVW10d1NWZFdVa3RVYlZaSFkwVnNWR0pIYUhCV2FrNXZaV3hrVjFWclRtdE5hMXBJVmpJMVUySkdTWGRYYmtwVlZtMVNWRlV3V25Ka01WcDBVbXh3VjJFelFYZFdiR1EwVmpGYWRGTnNiRlpoYXpWV1ZteGFkMlZXY0VWU2JYUnFZWHBzV1ZsVldtdGhSMVp6VjJ0c1YySkhUalJhUkVaU1pVWmtXVnBGTlZoU2JIQjJWbGN3ZUdJeGJGZGlSbWhyVTBkU1ZGUldhRU5XTVZsNVpVZDBXRkpzYkROWk1GWnZWakZhTmxKdVdsZFNla1pNVmpCa1IxSXlTa2RhUlRWWFRWVlplbFl4V2xOVE1VNTBWbXRrYWxKV2NHaFZiVEZ2WTBac1ZWSnVaRmROVjFKWVdWVm9hMVl3TVZkU2FsSlhUV3BXVkZaSGVHRlNNVTV6WWtaYWFWZEhaM3BYYkdRMFl6RmFjMkpFV2xkaVIxSlBWV3RXWVZJeFdsaE5SRVpxVFZad1dWVXlkR3RYUjBwelkwWm9WVlo2Vm5aWlZWcGhZMVpPY2s5V1VsTk5SbkJKVmpKMFlWUXlTa2hTV0docVVsaENXRlJXWkc5Tk1WWnhVMnRhYkZac1NscFpWVnBUWVZkR05sWnRPVmRXTTBKTVZHdGFhMVl4V25WVmJYUlVVakZLVVZadE1UUmtNbFp6WWtaYWFGSXpVbGRVVlZKSFZqRlNjMVZyVGxkTmEzQmFWbGMxUzFZeVNsVlNhM2hhWld0YWNsbDZSbmRTTWs1SVlVVTFWMkpHYTNkV2FrWlRVVEZzVjFkdVVsWlhSMmhaV1cxMGQyTnNWblJOVnpsWVVtMTRlVmxWVms5WFIwcElWVzV3VjJKVVJYZFdWRUY0WTJ4YWNWUnNWbGRpU0VJeVZtMHdlRkp0VmxoU2EyUnBVbTVDV0ZWc2FFTk5iRnB6Vm0xR1dsWXdOVmhXUnpWTFlURktkRlZ1UWxaaGExcExXbFZhWVZkRk1WVlZiWFJPWVRGd1dWWlVTVEZXTVZaMFUyeFdhVkp0YUZoWlZFWmhWRVpzVmxkdVRsZFdhelY1VkRGa01GVXlSWHBSYWxaWFRXNVNjbFZxUmxabFZrNXpZVWRvVTJKR2NGbFdWekUwV1ZkU2MxWnNWbE5pYXpWWVZGWm9RMU5HWkhKWGJYUm9WbXh3U1ZwVldsTldNVXB6WTBkb1lWSkZSalJWYWtaaFYxZEtTR1ZHVWxOV1Jsb3lWbXhqZUUxSFVYaFRXR2hXWW1zMVdWbHNWbUZYVm14elZtNWtWRlp0ZUZkWlZXUkhWMGRLUjJOR2FGcE5SMUoyVmpKemVGWXlUa1psUjBaVFlraEJlbFpYY0VkVk1rMTRZMFZvYVZKck5YQldhMlF3VG14YWRHTkZaRnBXYkd3MFZqSTFTMVJzV25SVmJHeFhUVWRSTUZac1duTldWazV6Vkcxc1RsWnJjRmRXVkVvMFZERmtSMU51VW14VFNFSmhWbXhhWVZWR1duTlhhM1JxVFZVMWVsZHJXbTloUlRGWFkwYzVXRll6VW1oVmVrcFRWakZLZFZOdFJsTmlhMHBaVm0wd01WRXhWbGRhUm1SWVlsaFNWRlJWVWxkbGJGbDVUbFprYUZKcmNEQldWM2h2V1ZaWmVsVnJkRlZXVm5CeVZqQmtUMUpzY0VoalJUVlhZbGhqZDFacVNqQmlNVmw0VjJ0b1ZHRXlhRmRaYlhSTFYwWnNjbGR1WkU1TlZuQjRWVzB4UjFkR1NsVlNiRnBYVmpOb2NsWkhlRXRTYkU1VlVXeGthR0V4Y0RKWFdIQkhWVEpOZUZwSVRtaFNiSEJ3VldwS2IxZEdaRmhsUnpsV1RVUkNORll5TlZOaVJrcDBWVzVLVm1GcldtaFZNVnBTWlVaa2RFOVdXazVTUlZwSlZtcEdVMUV4WkVkWGExcFVZbGRvV0ZaclZtRlpWbkJXVjIxMGFtSkhVakJaTUZwUFZqQXhkR0ZHYUZkTlYxRXdXV3BLU21WV1NuSmFSMmhPVFcxb1dsZFhlRzlWTWs1WFZXeGthRkpWTlZSVVZscExaV3hrY21GRk9XaFNiSEI1V1RCYWQxWnNXbk5UYTJoWFlXdHdTRmt5TVVwbGJIQkhXa1prVTFadVFrMVdNbmhYV1ZkRmVWVnNaRmRpYXpWb1ZXcEtORlpHVWxkV2JtUllVbXhzTkZkVVRtOVViRWw0VW1wV1ZtSllVbkpXYWtwTFkyeGtjMWRzY0ZkU1ZWWTBWbXBDWVZZeVVrWk9WbHBWWWtkb1dGbHJWbmRYVmxweldrUlNWVTFYVWtoVk1qVlBZV3hPU1ZGdFJsVldWbkF6V2xkNFlXTXhaSFJTYlhCT1ZsUldObFpzWkRSaE1rWkdUVlprV0ZaRlNsaFpiR2hEVTBaYVJWTnJPV3RTYTNCNVYydGtkMVV3TVhSaFJrSllWak5vY2xscVJrOWpNV1IxVlcxNFUyRjZWbFpXUmxwV1pVVTFWMWRyYUU5V1dGSldWRlphZDAxR1dsaE5SRlpYWWxWd1dsbFZaRzlXTURGSFkwWlNWMkpHY0V4Wk1qRlBVMGRXU0dKR1RtbGhNSEJaVm0xNFlXRnRWa2RUV0d4VFltdHdUMVp0TVZOalZsVjNZVVZPV0ZKc1NsbFViR00xVjBaS2MyTkdXbFpOYmxGM1ZtdGFTbVF4WkhKaFJtUlhUVEpuZWxacVFtRlVNVXB6Vkc1T2FWSnRVbGhWYkZaM1lqRlplRmR0UmxwV2JHdzBWbGMxVDFZeVNrWk9XRUpYVFVaYVRGWlZXbUZrUlRGSllVVTFUbEpGV2tsV2FrbzBWakZhUjFkcldsaGlSbkJXVm1wT1UyRkdjRmhsUmxwc1VqQmFTbFpITVc5Vk1rVjZVVmhrVjJKSFRqUlpha1phWlZaS2RWTnJPVmRpUlhCWFZtMTBWMWxXYkZkalJWWlRZbGhTY2xWdGRIZE5SbXQzVjIxMGFGSlVRak5WYlhCUFZqQXhkVlZzYUZwV1JYQlRXbFZhVjJSV1ZuTlViR2hUVFcxb05GWnNaRFJoTWtsNFdrVmtWMkpyV2xaWmJGSnpZakZXZEUxVVVsZGlSbG93V2xWb2EyRkZNVVZTYTFwV1lsaG9kbFpxUVhoalZrcHhWR3hrVjFKV2NFMVdha1poVWpKTmVWTnJaR2hTYlZKUFZGWldkMDVXV25SbFJrNVNZbFpHTlZadGRHdFhSMHB5VGxab1dtRXhWWGhaTUZwYVpERmtjbVJIZUZOaVZrcFpWMVpXYjJFeFZYZE5WbWhXWW01Q1dGUlhOVk5rYkZwSVpVZDBVMkY2VmxoWlZWcGhZVlprUjFOWWNGZGhhMjh3Vm1wR2ExTkdXbkppUjBaVFlsZG9WVmRYZEdwT1IxWlhWMnhvVGxkSFVtRldiWGgzVjBaWmVVNVZPV2hpUlRWSFdUQmFhMWRzV1hwVmFrNVhVbFp3V0ZreFdrOWpiVkpIVld4T1RsSkdXa3BXYlhSclRrZEZlRlZ1VGxoaVIzaFRXV3hrYjFkR2JITmhSemxxVm01Q1YxWnNVa2RXUmtwelUyeHdXR0V4VlRGV2FrWmFaVVpPZFZwR1pGZGxhMVYzVjJ0U1MxSXhTWGhYYmxaVVlrZFNiMVJVUmt0WGJGcDBUVlJTV2xZeFdraFdiWGh2VkRGWmVsVnNhRlppV0ZJelZGVmFkMUpzVm5KUFZtUk9ZVE5DVjFaWGVHOWhNVmw1VW01S1UyRnNTbGRaYTFwM1ZFWnJlRmRyZEdwTmF6VklWMnRhYTJGV1RrWlRiR1JYWWxSQ05GcEVSazVsUmxKWllVZEdVMkpXU2xoWFZ6RXdXVlpaZUdKSVNsaGliVkpXVkZaYVlVMUdVbk5XYXpsWVVteHdNRlpYZUhkWGF6RkhWMWhrVjFaRlJqUldiVEZMVWxaV2MyRkhhRTVpVjJoV1ZqRmFZVmxXVFhsVWJrcFBWbTE0VTFscmFFTlhSbFp6Vm01YWJHSkdjREJaTUZaclYyeFpkMDVXYUZaTmFsWlVWbFZhV21Wc1ZuSlBWbVJwVW10d1NGWkdWbUZaVmxwWFUyNVNVRll5ZUU5V2JUVkRWMnhhV0dWSE9XcE5hMXBJVlRJMVQxZEhTbFpYYkdoYVZrVmFhRlJVUm1GamJHUjBVbTEwVTAxV2NFdFdhMk40WkRGU2MxcEZXbFJoTTBKWVZXdFdZV0ZHV25GU2JFNXFUVmRTV2xrd1pHOVZNa3B5VTJ4c1YxWjZSVEJhUkVwVFl6Sk9SbFpzVW1oTk1VcFZWa1phVmsxVk1WZFhhMmhPVjBkU1YxUldWbmRXTVd0M1YyMTBWMDFyY0ZaVlYzQlRWMjFHY21OR1FscGxhMXB5V2taYVQyTXhjRWRoUms1T1lsZG5NRlp0ZEdGWlZsbDVWVmhzVjJFeVVsbFphMlJ2WXpGV2NWUnNUbGROVmtwWldrVm9hMWRHV25SbFJtUlhWak5SZDFacVFYaGpiVTVIWTBaa1YyVnJXakpXYWtvMFdWWktjMXBJVGxKaVJuQlBWVzAxUTFSV1pGVlRXR2hUVFZVMVNWVnRkR3RXVjBwWVpVWldWbUpHV2pKYVYzaGhaRWRXU0dOSGRFNVNSVnBaVmxjd01WVXhXWGxUYmtwUFZtMTRZVmxzYUZOTk1WcHhVbTVPVjFack5YcFdSM2gzVmpKS1NWRnFVbGRXZWtWM1ZGVmFWbVF3TVZkYVJsSnBVakpvV1ZaR1pIZFJhekZYVjI1U2JGSllVbkZVVjNSM1VteGFkRTFWWkZkTlZuQjZWbXhvYjFZeVNsbFJhM2hXWld0YWNsWXdXa3RqYkZwelZtMXNVMkpJUWpKV2ExcGhZakZGZVZOWWFGaGliRXB4Vld4a1UyTldiSE5YYlVaT1VteGFNRnBGWkRCV01WbDNWMVJLVjJKWWFIWldNakZMVjFaV2NtVkdaRTVXYmtKdlYxUktOR0V5VWtkVGJrNXFVbTFTVDFWcVRtcGxSbHB6Vld0MFRsSXdWalJXTW5odlZURmtTR1ZIT1ZaTlJsVjRWbXBHYzJNeFZuSmFSM1JwVW01QmQxZHNWbXRTTWtWNFYxaGtUMVpYYUZsWlZFcFNaREZzVjFkcmRHcGlWVFZJVjJ0YWExWXlWbkpTYWxKWFlURktURlZxU2xOU01WSjFVMjFvVTJKSVFuWlhWbEpEWkRGa1IxcEdhR3hTYXpWVVdXeGFSMDVHV1hsbFJtUlhVakJXTmxaWGVGTldWbGw2Vlc1d1ZXSllhSHBXYlhoclpFVTVWMXBGTlZkWFJVcFpWakZTUTJGck5WZGFSV1JZWW1zMVZWbFVUbTlXTVd4WVpFZEdXbFp1UWxkWGExVTFWVEpLU0ZWdWNGcFdWMUoyV1d0a1MxSXlUa2RqUm1ScFVqQTBNRlpHVm10VmJWWkhZMFZzVldKSGFIQlphMVozWlVaYVdHVkdUbXBOVm13MFZsZDRiMkV4U1hkWGJGWldZbGhvTTFwWGVITldiVVpHVDFaa1YwMUlRa2xYVkVKdll6RmtjazFWYUdoU1dHaFlXV3RhZDJGR1duRlNhemxxVFd0YVNGZHJWVEZWTWtweVUyMDVWMDF1YUdoV2JURlhVakZ3Umxkc1FsZGlWa3BhVjFab2QxWXlTWGhWYkZaU1lUTkNUMVp0ZUhkbGJGcFlaRVJDVlUxVmJETlVWbEpUVmpBeFdHRklXbGROUm5CeVZURmFSMlJGT1ZkWGJXeFlVakpvVGxadGNFTlpWMDE0V2tWb1ZtRXhjRmxaYkdodlZrWnNjMkZIY0d4V2JIQlpWRlZvYjFSc1NYZFdhbEpYVFdwV1VGWnJaRXRrVmtaellrWndWMUpZUWxWWGJHUTBXVmRPVjFOdVVsTmlXRkpZV1ZSR2QwNUdXbFZUYWxKb1RXdGFSMVJXV25OVmJVcFZZa1pvV21KSGFFUldSVnBoVTBVeFYxTnRkRTVTUmxwWlZtcEplRkl4VlhkTlZXUnFVbXh3V0ZacVRtOWtiRlpWVTJ4T2FrMVhVbnBaVldRMFZUSldkR1ZHYUZkU2JIQnlWbFJHVDFJeFpITmhSM2hUWlcxNGRsWkdXbFpOVms1WFYyeG9iRkp0VWxoVVYzUjNWbXhXYzFWclRsZE5hMXA1VmpJMVMxWXdNVmhWYkVKV1lXdGFNMVZxU2tkU01WSnlUbFpTVTFaWVFrMVdiVEI0VGtkRmQwMVZhRlpYUjJoWldXMXpNVmRXV1hkaFJVNXBUVlpXTTFZeU5XdFhSa3AwWlVod1YxWXpVbkpXYkZwTFl6RmtkV0ZHV2s1aWF6QjRWbTEwWVZNeVRuUlVhMVpTWWtad2NGWXdaRzlsVmxwMFkwVjBWRTFyTlhwV1J6VkhWakpLU0ZWck9WcGlXR2hNVmpGYVdtVkdaSFJTYkZacFZteHdXVlpzWkRSak1rWkhVMWhrV0dKR1dsZFphMlJ2VWtaYVYxZHRSbXRTVkVaS1dWVmFZVlJ0UmpaV2EyeFlWak5TYUZacVJsZGtSazUxVld4YWFWWldjRmxYVjNodllqQXdlRlZzV2xoaWJWSllXV3RvUTFOc1pISmFSemxWWWtWd1IxWXlkR3RXTVZvMlVsUkNXbUZyV21GYVJFRjRWakpHU0dGR1VsTmlhMHB2Vm0wd2VFNUhVWGhWYTJScVVsWndXVmxyWkZOalZsSlhWMjVrYkdKSFVubFdiRkpIVm1zeFJWSnFRbHBXVmxwb1ZtcEtTMWRYUmtkVmJGcG9ZVE5DVUZkc1ZtRmtNVWw1VW10a1YySlhhRTlaYlRGdlYwWlplRnBFUW1oTmEydzBWakowYTJGV1RrWk9WemxXWW01Q2VsWXhXbk5qYkhCSFZHMTRWMkpJUVhkV1JscFRVVEZhY2sxVlZsTmlSMmhoVkZWYWQyUnNXblJqTTJocVZteHdlbFZYZUhkV01rcEpVV3N4VjFZelFraFdSRXBPWlZaS2NscEdaR2xTTVVwUVZrWldWMlF4VGxkWFdHeHJVbXMxVkZSV1pEUlhWbHBJWlVkMFZrMXJjRWxhVldNMVZtMUtWVkpzVWxkU1JWcDZWakZrVDFJeGNFZFVhelZYWW10S1dsWnFTakJWTVZWNFdraE9XRmRIVWxsWmEyUnZWMVpzVlZKdFJtdGlSM2hYVmpKME1HRXhTWGhYYTJoYVZsWndNMVpxUmt0WFZrWnpVbXhrVTAweFNtOVdiWEJMVlRGS2NrMVdaR0ZTTUZwVVdXdFdkMVpXWkZoa1JtUnJUVVJXV0ZZeGFITmhNVWw2Vlc1R1ZWWnNjRmhVYkZwV1pWZFdTR1JHWkZOTlNFSktWMnhXWVdJeFdYbFNia3BQVjBad1lWUlhOVzlXUmxwMFpVZEdWMVpyY0hwV1IzTXhWakF4Vm1KRVVsZGlXR2h4V2xWa1VtVkdXbGxoUm1oWVVqSm9WbGRYZEd0T1JtUkhWbTVTVGxacmNFOVZiWGhhVFd4V2RHTjZWbFpOUkVaWVdUQmFkMWR0UlhsVlZFSlhZVEZ3VEZac1dtRmtWbVJ6V2taa2JHRXhXWHBXTVdoM1VXc3hXRlJZYUZoaWF6VnZWV3BPYjFaR2JGbGpSbVJZVm14d01GUldVbE5oTURGWVZXdG9XbFpGTlhKV2JURkhUbTFLUjJKR2NHaE5XRUY2Vm1wQ1lXTnRVWGhqUldoUVZtNUNXRmxVVGtOWGJGcHpXa1JTVWsxV2NEQlZNbmh6VmxaYVJsZHNhRnBXTTFKb1dUSjRjbVZYVGpaU2JHUk9WbXR3TmxaclpEUmhNVmwzVFVob1UyRnNjRmhaYkZKSFRURldjVkp1VGxkTlZuQmFXVlZhWVZkR1NYcGhSbVJYWVd0S2NsUnJXbUZXTWtwSFZteFNhVkpVVmxsV2JURTBZekF3ZUZwSVNsaGhlbXhaVlcxNGQwMUdjRlpoU0U1WFRVUkdlRlZ0ZEc5V01rWnlVbXBTVjAxSFVsaFZNV1JMVWpGd1JrNVhiR2xTVm13MlZtMHdlRTFHYkZkVVdHeFZWMGQ0VmxsVVNqUmlNVlowWlVoa2FsSnNjSGxXYlhoclZHc3hXRlZzYUZoV1JUVjJWbXRWZUZack5WZGhSbHBwVmtaYVRWZFdaRFJUTWxKSVVtdG9VRlpzV2xoVVZFcHZWRlphUjFwRVVscFdNVXBKVmtkMFlXRXhTbkpPV0VKWFlsaG9NMVJ0ZUdGWFJURkZVbXhhVGxac1dURldWRW93WWpGYWRGTnJhR2hTTUZwaFdWUkdkMDB4VmpaU2JtUllVakZhU1ZWdE1YZFViRnB6WTBSV1YwMXVVbWhaYWtwSFZqRmtkVlJ0Y0ZOaVdHaFpWMVpTUzFSdFZrZFdhbHBVWVRKU1ZGUldWVEZOVmxwSVRWaGtWazFyY0ZsWlZWcHZWMFpaZWxWdGFGaFdiRll6V2xWYWExZFhSa2RoUjJ4WVVtdHdXbFpyV21GaU1VVjRVMjVPVjJKSGFITlZNR1JUVjBaU1dHUklaRlJpUmxwWldrVm9UMWRHU25OaVJGcFhWak5vVkZZd1dtRmpNazVIV2tkR1YySklRazFYVkVaaFlUSlNTRk5yWkZaaVJUVlpWV3hXZDFsV1duRlNiWFJQVWpCc05GWlhOVk5XTWtWNVZXeGtXbUV4Y0ROV01WcHpaRWRTU1ZwSGNHbFNhM0JaVmpKMFlWUXlTa2RYYms1VFlXeEtXRlJYY0Vaa01WcHpXa1YwVjJKR2NIaFdWM2hyVkd4YWNtTkZNVmRpV0VKSVYxWmtVMUl4Vm5WU2JGcHBVbTVDZGxkV1VrZGtNa1pIV2toS1ZtRXdjSE5WYlhoelRsWldkR1JIZEZoU01IQkpXVlZhVTFaV1duTlhhazVhWVd0YWFGcEZWWGhXVmtaeldrVTFWMDB5YUZwV2JYQkhZakpKZVZKdVRsUmlSMUpaV1d0Vk1WZEdiRlZTYlVab1VteHNORll5TVVkaE1VbDRWMnRrWVZKV1ZYaFdWRXBMVjFaV1dXTkdaR2hoTTBFeVZrZDRhMUl4U1hoYVNGWlVZWHBzV0ZacVJrdFhSbHBIV2toa1UwMVZOVWhXTWpWSFZXeGtTR0ZHYkZaaVdHaG9WbTE0VjFkSFZraGtSMmhUVFVaWk1GZFVRbE5aVmxsNVUyeHNVbUV5YUdoVmExWmhWRVpzTmxOck9WTmlTRUpJV1ZWa2MxWXdNSGxoUmxwWFlURndhRlpxU2xKbFIwcEhXa1pvV0ZJeWFHOVdWM1JoVXpGa1IxVnNaR0ZTUmtwWlZtMTRkMU5HYkZaWmVsWm9VbXh3ZVZSc1ZtdFhhekZJVlc1YVYySlVSa2RhVldSUFVtMVdSMk5IZUdoTldFSjJWakowVjFadFZrZFhXR2hXWW14S2MxVnRNVk5qUmxwMFpFaGthRkpzYkRSV1YzUlBWMnhaZDFacVVsZE5WMmh5VmtkNGExSnRUa2RpUm1Sb1RWWnZlbFp0Y0Vkak1rMTRWbTVPWVZJemFIQlZiVFZEVGtaYVZWTnFRazVTYlZKSVZqSTFTMWRIU25WUmJHUlhZV3MxZGxreWVHRlRSVEZXWkVkd2FHVnNXa2RXVm1RMFlURlpkMDFJWkZSaGVrWllXVlJHUzFOR1drVlNiWFJUVFZaYU1WVXlNVWRWTURGSFkwWldWMUp0VGpSWmFrcFRZekZrY2xwR2FHbFdSM2hVVmtaa05GTXlWbk5YV0d4UFZsaFNXVmxZY0VOT1ZteFdWMnRPVjJKVmNGcFdSM0JUVmxkRmVHTkhSbUZXYlZKWVZUQmtVMUl4WkhKT1YyaE9UVVZyZUZadGRHdE9SMFY1VTFob1dHSnNTbFJaYlhSM1kxWlZkMWR1WkZwV2JYaFpXa1ZrUjFZeFNuTmpSRUpoVmxkUmQxbFVSbUZqTVU1MVlrWldUbFl4U2paV2JGSkxVekZrVjJFemNHaFNiVkpQV1cweGIxZFdXWGhYYlhSVFlsWmFTRmt3Vm5OV1YwcElZVVpzVm1GcldreFdNVnByVmpGd1JWVnNjRmRpVmtwSlZtMHdNVll5Um5OVGJsSldZa2RvVjFsc2FHOU5NVnAwWlVaYWJGWXhTa2xWYlRGelZUSktTR1F6Y0ZkaGEyOTNXa1JHV21WR1RsbGpSMmhUVFcxb2FGWnRNVFJrTWs1elZtNVNhazB5YUZoV2JYaGhaV3hzVmxkdGRGVmhla1pIV1RCV2QxWXdNWFZWYkZKV1lXdHdSMXBWV2xOamJIQkhZVWRzYUUwd1NqSldiR040WldzeFdGUnJaRmRpYTFwVVdWUk9VMk5zVWxkWGJtUllWbXhLVjFsVll6VldWMFkyVW10YVZtSllVblpXYWtGNFkxWmFjbUZHWkdoTldFSjVWbFJDWVZZeVRYaFNiazVoVWpKb2IxUlZhRU5YYkZweVYyeE9VMDFXVmpSV01XaHZXVlpPUjFOdVNsWmhhM0IyVmpCYWMxWldVbkpVYkZKWFlraENWMVpVU25kVk1rWldUVlprYWxKdGFGaFVWM0JYVmtaYWRFMVZkR3BOYXpWSldWVmFZV0ZIUmpaV2FrcFlWbXhhYUZwRVJrdGpNazVHV2tkR1UySkZjRlZXUmxwWFpERk9WMWR1VG1GU1JrcFdWRlphUzJWc1ZYbE9WbVJXWWxWV05sVlhlRzlXVmxwMFZXeE9ZVkpGV25KV2FrWjNVakZPZEdWR1pHaE5NRWt4Vm0xd1MyVnJNVmRhUldSVVlrWmFXRmxyV25kWFZscHhWR3hPYUZKdFVsaFdNakV3VlRBeGNtTkZjRmRTZWtaMlZsUkdZVlpXV25OWGJHUlhaV3RWZDFkclVrZFpWMDE0VjI1V1ZtSllhRlZWYWtaTFpERmFXRTFVUW10TlJFWllWbTE0YjJFeFRraFZiR2hWVmpOU00xWnRlRmRrUjFKSVQxWmtUbFp1UWtoWFZFSlhUa1paZVZKdVNsaGlSVXBvVlcxNGQwMHhWbkZTYm1SVFRWaENTVnBWWkc5VWJFcDBaRVJPVjJKVVJUQlhWbVJIWkVaYWNscEdaR2xpUlhCWlYxWlNTMVV5VGxkV2JrNWhVa1pLV0ZadE1UUmxWbVJ5VjJzNWFHSkZjSHBaTUdoM1ZqQXhjVlp1U2xwV1JYQk1WV3BLVDFKdFJrZGFSVFZvWVRGWmVsWnRNSGhsYlZaSFYyNUtUMVp0VW05VmJURlRZMFpXY1ZOdE9VOWlSMUpaV2tWa1IxWkhTbGRTYWxKWVlUSm9WRlpWV21Ga1ZrWjBUMVpXVjJKSVFYbFhiR1EwV1ZkT1YxTnVVbE5pV0VKUFZtMDFRMDVzV1hsa1J6bFdUV3RXTkZVeU5WTldiVXBJWVVkR1dsWkZjRTlVVlZwM1ZqRmtkRkp0ZEZOV1JWcFhWbXhrTkZsV1VuTlhXSEJvVW0xNFdGWnJWbUZrYkhCRlUydGtVMDFWTlZwWmEyUnZWVEF4UjJOSE9WZGlXRUpRVmxSS1IxSXlSWHBpUjNoVVVsUldVVmRYZEZaTlYxWlhWVmhvV0dKRk5WZFVWVkpIVjBacmQxWnVaRmhTYkd3MlZsY3hiMWRzV2taWGJVWmhWbXh3VUZwR1drOWpNVlowWVVkNGFFMVlRbUZXYWtaclRrZEplVk5ZYUZoaE1sSllXVmQ0ZDFVeFduSldiVVpYVm14YU1GcFZaRWRYUjBwSVpVWmtWMDFxUmtoWlZWcGFaREpPUmxwR2NFNVNia0p2Vm1wQ1lWbFZOWE5UYkZaU1lrWndjMWxVVGtOVFZscFlZMFZrVjAxck1UUldNalZQVmpKS1dHRkZPVlpoTVhCb1YxWmFZV014YTNwaFJUbFRUVlZaTVZadE1UUmhNV1JJVTI1T1ZHRjZiRmhaYTJSVFZrWnNjVkpzWkd0U01VcEtWMnRrTkdGV1NYcFZXSEJYWVd0c05GVnFSbHBsVmtweFYyeE9hR0V4Y0doV2JYaGhaREZLUjFkdVJsUmhNWEJ6VldwQk1WSXhjRlpYYm1SVllsVndlVlJXVWxOV01rWnlWMjVLVm1WcldrdGFWbHBMWTIxR1NHRkdUbGRTYkhBelZteGtOR0l4UlhoVVdHaFlZbXhLVDFacldrdFdNVkpYVm01T1QxSnRlSGxXTWpFd1ZqRktkRlZyYkZwV1YxSjJWbTF6ZUZJeFdsbGhSbVJPVW01Q05sZFVTalJrTVU1R1QxWmthRkpyTlhCWlZFSjNXVlpaZVdSR1pGcFdNRlkwVmxjMVMxUnNXblJWYmtaV1lsUldSRmRXV2xOV2JHUnpZMGQwVGxadVFsZFdWbHB2WWpGWmVWTnNXbXBTVm5CWVZtcE9iMlJzYkZaV1dHaHJVakJhU0ZscldtdGhWbHBHVTFSQ1YxWXpRa05VVm1ST1pVWndTVlpzVm1sU01VcDNWbGN3TVZFeVVuTmFSbVJXWVRKU2NsUldXa3RYUm1SeVlVVTVXRkl3Y0ZkV01qRkhWakpLV1ZWdWNGVmhNWEI1V2tSR1lXTXhjRWRhUjJ4WFYwVktURlpzV210T1IwbDRXa2hPV0dFeGNIQlVWRTVEVm14YWMxZHVaR2hTYlhjeVZXMDFhMVV4V25OWGFrSmFWbFpWZUZacVNrdFhWbXQ2WVVaa2FWSnJjRTFXUjNSclZHMVdSMXBJVmxaaVJrcHZWRmN4YjJSc1dsaE5WRkpyVFZkU1NGbHJXbTloYlZaeVYyeG9WbUpZYUhwVVZFWmFaVmRXUms5WGFHaGxhMXBhVm14a2QxSXhXWGhUV0hCb1UwVndZVlp0ZUhkVE1YQldWMnM1YWxadFVucFhhMlJ2VkcxS1JsWnFUbGROVjFJelZYcEdTbVZHWkZsaFIwWlVVbFJXYjFaWE1IaGlNV1JIVm01T1YySnRVbGxaYTFwM1RVWndSbGR0ZEZkU1ZFWllXVEJXYjFZd01YVlZiR2hYVmtWd1RGVXhXa2RrVmxKeldrZHNXRkpyYkRaV2JYQkxUa2ROZUZkdVRtcFNWM2hvVlcweFUxWkdiRmxqUm1SVVVteHdWbFV5Y0ZOaGF6RlhZa1JTVmsxcVZsQldNR1JMWTIxT1IyRkdaR2hOVm5CdlYxUktORll5VGxkVGJsSlRZa2RvV0ZsdGRFdFRWbVJYVm0xMGFVMVdTbmxVVmxwaFlXeEtSMU5zYUZwV1JWb3pXVlZhYzJOV1NuSlhiWGhUWWtWd05sWXlkR3RqTVZwSFUyeHNVbUpJUWxsV2JURnZUVEZzTmxOcmNHeFNiVkl4VlcxNFMyRldTWGhUYkVKWFVteHdjbFJyV21Gak1XUnlZVVU1VjFaSGVGbFdSbFpUVWpKV1YyRXpaRmhpVlZwWVdXeFdkMWRzVmxobFJVNVhUV3R3VmxWdGVHOVhhekYxWVVWNFdrMVdjRmhaZWtaclpFZEtSMkZHVGxkU2ExbDZWbTB3ZDJReVZrWk9WV2hXVjBkb1ZWWXdaRzlqVmxaeldrWk9hVTFXV2pCWk0zQkhWbFV4VjJOSWNGcFdWbHBRVm0weFMxSXlUa1ZSYkZaWFZqSm9lVmRXVWtKbFIwMTRXa2hLYUZKdFVuQlZha3B2VFd4YWNWRnRkRlJOVlRWSVZtMDFWMVZ0U2tkalJUbFdZbFJXUkZaR1dtRmpiRlp5V2tad1YwMUVWalpXTW5SdlV6SkZlRk51VW1oU2JXaGhXVlJHZDAxc2NFVlNiVVpUVFZkU2VsWkhlR0ZVYlVWNlVXdHNWMkZyYTNoV1ZFWmhaRVpPZFZWdGVGTmlXR2haVmtaV2EySXhTa2RYV0dSWVltczFXRmxyV25kWGJHeFdXa2hrYUZac2NGWldiWFJ2VjBaYWMxZHRhR0ZTUlZwVVdYcEdUMlJXV25OVGJXeFhVak5vV2xZeFpEUlZNVVYzVGxWa1YyRnNjRlJaYkZaaFYwWlNWMVpVUms1V2JGWTFWRlpqTlZack1YSmpTR3hXVFc1b2VsWnFSa3RqTVU1eVZHeFdWMVpzV1RCV1YzQkhZVEpTVjFadVNrOVdiV2hWVld4V2QxVldXblJOU0dSc1VteFdORmRyV210WFIwVjVZVWhLVm1Gck5WUlpha1p6WTJ4YWRWcEdaR2xTYmtGM1YyeFdZVlF4WkVoVGJGcHFVbTVDV0ZacVRsTmtiRnB6V2tWMFdGWXdXa2xaVldSSFZURmFjMWRVUWxkaGExcG9Xa1JHU21WR1ZuVlRhemxYWWxaS1VGWkdZM2hpTWtaSFYyNVNUbFpGU21GV2FrSnpUbFpWZUdGSE9WcFdhM0JaV1ZWYVYxZHRTbGxWYWs1WFRWWndlbGt5ZUhkU01WSnpZMFprYVZkSGFGaFdiRkpMVGtaUmVWSlliRlJoTWxKd1ZXdFZNVmRHVWxoT1Z6bFdVbXh3ZUZWdE1VZGhiVXBXVGxWd1dtRXlVa2hXVkVaYVpVWktXVnBHWkdsWFJVcE5WbGh3UjFReFdYaFRibFpWWWxoQ1ZGbHNXa3RXVm1SWVpFZEdhMDFFUm5wWGExcHZZV3hLV0ZWc2JGcGlSbkJJVkZSR1UxWXhaSFJrUm1oVFRVaENXbGRzVm1GVk1WcDBVMnhzVm1Gck5WaFVWelZ2WTJ4YWNWSnNaR3BpVmtwSldXdFZNVll5U2tsUmEzQlhUVmRSZDFkV1pFWmxSbkJHWVVaT1dGTkZTbFJYVnpGNlRWWmtSMkpHYUd0U1dGSnZWVzE0VjAweFdYbE5WV1JZVW10c05GWXlkSGRYUjBWNVZXNWFWMkZyY0VkYVYzaEhWMWRHUjFwR1pHbFdhMnQ1VmpKNFYxbFdaSFJXYkdSVlltczFjRlZxU205V1JsSllUVmM1V0dKR2NEQlVWbEpUWVRBeFZrMVVVbHBOUm5Cb1ZqQmtTMVpzWkhWVGJHUnBWMFV4TkZaR1ZtRmtNVXB6V2toS1VGWnNXbkJXYkdoQ1pERmtWMVp0UmxOTlZtdzFWVEo0VjFWdFJuSk9WbHBYWWxob00xVnFSbmRXYkdSMVdrWk9UbGRGU2tsWFZsWnJZekpHUmsxV2JGSmlSMUpZV1d4U1JtUXhXbkZTYms1WFRWZFNNVlpIZUdGaFZrbDRVMjA1VjFZelVtaFZla1pyVmpGYWRWVnRlRlJTTVVwV1ZtMHdNVkV4U1hoaVJscFhWa1phV0ZSWGRIZFdNV3QzVjIxMFdHRjZSa2xaVldoM1ZqSktTRlZyZUZaaGEzQlFWVEZhVDJNeGNFWk9WMmhvVFZoQ1QxWnRlRk5STWtWNFUxaG9WV0pIVW1oVk1GVXhWMFpzY2xwR1RsZFNiSEF3VkZWU1YxUXlTa2RqUkVKVlZtMW9jbFpVUVhoamJGcHhWbXhrVTJKWGFESldiVEI0VXpKT2NrNVdhR2hTYkhCd1ZXMTBkMWRXV25GUmJVWldUVlpzTkZZeU5WZFdWMFkyVm1zNVYySlVSWHBVVmxwclkyeGFkRkp0YUU1V01VbzJWbXBHYjJFeFdYbFNiazVVWWtkb1dGbHROVU5YUmxweVYyMUdWMVpyY0RCYVJWcFRWakpGZUdORVdsZGhNbEV3V2tSS1IxSnJNVmxWYldoVFZteHdXVmRXWkRCWlYwWkhXa1prWVZKck5WVlZiWGgzWlZac1ZsZHJPV2hXYlZKSVZUSTFhMVl4V2paUldHaFdWa1ZhUzFwVldtdGpNa1pHVGxaU1UwMXRhRkZXYkdSM1VURlpkMDVWWkZkWFIzaFFWbXhvVTJJeGJISldibVJPVm14YVdWUldWbXRXTURGeVkwVnNWMVl6YUZSV2JGcGhVbXhrZEdGR1pHbFNia0pOVjFSSmVGVXhTWGhqUldSaFVqSjRWVlZzVm5KbFZscHhVbTEwVGxKdGVGbFZiR2h6VlRKS1NGVnRhRlppUjFKMldXcEdWMlJYVGtsVWJHaFhZbGhvVjFaWE1UQk5SbHBYVTI1T1dHSnRhRmRaYkdoVFRURnNjbGR0Um1waGVsWmFXV3RhYTJGV1pFaGhSRXBZVm14d2FGVjZSbUZXTVdSMVZtMUdVMkpXU25aWFZsSkRaREpKZUZkc2JHcFNXRkpZVkZaV2MwNUdaSEpoUlhSYVZtdHdNRmxWYUVOV01rcEhZMFJPVjJKWWFHaFZha1ozVWxaV2MyTkdaRTVXYmtFeVZtMXdTazFXVVhsU2EyUlZZVEZ3VUZadWNITlpWbXh5VjI1a2FGSnVRbGhXTW5oM1lrWlplRmRyYkZWTlZuQnlWbXBLUzFOSFVqWlRiR1JwVWpGRmQxZFhjRWRaVm1SSFZHNU9hVkl5YUZSWmJHUnZWMVphUjFadGRGWk5WbkJJVm14b2IxZEhTblJWYkZKVlZtMW9SRlZxUmxOak1XUnlUMVphVGxadVFYaFdWbU40VWpGWmVWTnNiR2hTYkVwWFdsZDBSMDVHVm5GU2JVWllWakJhU0ZsVldtOVZNREI1WVVaYVYwMVhUalJVVldSU1pVWndSMXBIYkZSU2EzQlJWbTE0VmsxV1pGZFdibEpPVmtaS1dWWnROVU5TTVd4V1drUkNWMDFXY0hsWk1HaDNWakF4Y1ZadVdsZGlWRVpNVm14YVlXUldUbk5hUm1SVFZsWnJkMVp0TVhkVE1WRjRVMnhrVTJKck5YRlZiVEZUVjBac2NsZHNjRTVTYkhBd1dUQldUMWRzV25KTlZGSlhUV3BXVkZac1pFWmxWbFp6VjJ4d2FFMXNTbFZYVkVKaFdWZE9jMWR1U21wU1ZGWlVXV3RvUTFOc1pISldiWFJUVFZac05WVXllR3RYUjBwSVlVWm9WMkZyTlhaYVYzaHpWbXhrY21SSGRGTk5SbkJKVjFkMFlWbFhSa2hTV0hCU1lXdHdXVmxVUmt0VFJtUlhWMjEwVTJGNlJsZFphMlJ2VlRBeGRXRkdRbGhXYldnelZtcEJNV014WkhWVmF6VlRVbFp3VjFaR1pEQlpWazVIVmxoc1QxWllVbFpVVmxwM1pXeHJkMWR0UmxkTmEzQmFXVlZTVDFZeFNsZGpSMFpoVWtWYWNsbDZTazlUUjFaSFdrVTFWMkpyU2t4V2Frb3dWakZzVjFkWWFGWmlhelZaV1d0a05GVXhiRmhsU0dSWVZteHdlRlpIZUU5V01VcHpZMGhvVm1KVVJraFdha0Y0VjBaV2NWSnNaRk5OTW1neVYxWmFhMUp0Vm5OU2JsSm9VbTFTY0ZZd1pHOWxWbHB6Vld0a1ZVMVZiRFJXYlRWWFZtMUtXV0ZHVWxkTlJuQk1XbFZhWVZJeGNFVlJiSEJYWVhwV1NWWXlkRzlUTVZsNFYydGFXR0pVYkZoWlYzUkxWMFpTVlZKdVNtdE5WbkF3VlcxNGExUnRSWHBSYkdSWFZtMVNNMVpFUm5OV01XUnpXa2R3VTFaSGVHOVdiWGhoWkRBd2VGWnVSbFJoTWxKVVZGWmFTMDFHYkZaV1ZFWm9WbXR3V2xWWGVIZFdNa1p5VjI1S1ZWWlhVa3RhVlZwTFYxZEdTRkpzVGxkTlZYQXpWbXhTUTFZeVVYbFRXR2hYWW1zMVdGWnJWbUZYUm14eVYyNWtUbEp1UWxkWlZXUXdZVlpLY21OSWNGZE5ia0pFVm14YVlXTXhaSFZUYkdScFYwVTBNRlpYZUdGVE1sSllVMnRrVjJKSFVuQlZiR2hEVjJ4YWRFMUlaR3hTYXpFMFYydGFhMVl5U25OWGJGWmFZVEpTZGxZd1duTmpiVVpHVkd4V1YySldTbGRXVkVreFpERlNjMWR1VWxaaVIyaFhXV3hTVjFWR1dYZGFSWFJZVWpGYVNGbFZXbUZoVm1SSVdqTndWMVo2UlRCWFZtUlRVbXN4Vm1KSGFGTldSM2hWVjFkNGIySXhaSE5YYmtwWVlsUnNjVlJXV2xkT1ZsWnpZVWhPYVZKcmJEVlpWVnByVjIxS1NHRkZPV0ZXVm5Cb1ZXeGFTMlJXVW5OYVJtUm9UVEJKTWxZeFVrTldhekZYVmxoc1ZHRXllRk5aYTJSVFYwWmFkV05GVGs1TlZrcDZWMnRXYTFZeVJqWlNiR2hZWVRKU00xWlVTa3RYVjBaSFlVWmtVMkpXU1hwV2JYQkhWVEZKZUZwSVNsZGlSVFZ3VlRCV1MyVnNXblJqUlU1YVZtczFTRmRyYUV0WFIwcDBWV3hvVlZaV1NrUlVWRVpUVmpGV2MxUnNaRTVXYlhjeVZteGplR0l4WkVkWGJsSldZa1ZLWVZwWGRHRk5NVlY0VjIxR2FrMVdjREJaYTFwdlZURmFXVkZzU2xkaVZFWXpWVlJHV21WR1VsbGhSbFpwWVhwV1dsZFdVa2RaVmxwSFlraE9hRkpyTlhGV2JYaExWMFpaZVdSRVFtbFNNSEJJV1d0U1YxWlhTa2RqU0VwWFlsUkdURlV3V2xkamJVcEhXa1prVGsxdFp6SldiVEYzVXpGS2RGWnJaR0ZUUlhCelZXMHhVMkl4YkZWU2JtUlhWbTFTV2xrd1ZtdGhNREZXWTBod1drMUdXbkpYVmxwS1pWZEdTVlJzY0ZkU1ZtOTZWbXBHWVZsWFVrWk5WV3hvVWxSc1ZGbFljRVpOVmxwWVRWUkNhVTFXY0VsVmJHaHZZV3hPUmxkc1pGcGlSa3BIVkZWYVdtUXhaSE5hUjNSVFRWWndTMVl5ZEd0a01rWlhVMWh3YUZKR1NsaFdhMVoyVFVaYVJWTnJaR3BoZWtaWVdWVmFZV0ZXVGtaVGJIQllWbXhLVEZaVVJrOVNNV1J6Vm14T2FWTkZTbnBXVnpGNlRWZFdjMVp1VW14U2VteFlWRlZTUTA1V2JGWlhiazVZVWpCV05GVXlkRzlXTVVwR1kwVTVZVlpXY0hKWmVrcExVMGRLUjFSck5VNWlWMmhYVm0xMFlWVXhTWGhVV0d4V1ltczFXVmxyWkc5alZsWnpWbFJHV0ZKc1NsZFdWM1JQVkRGS2MySkVWbFZpUm5CUVdWVmtTMUp0VGtsaVJsWnBVbTVDTWxadGVHRlpWMDE1Vkd0V1ZXSkdjRzlaVkVaM1YwWmtjMWRzV214U2JWSkhWREZhYTJGR1NYbGxSbWhhWVRKb1ExUldXbHBsUmxaeVZHeHdWMkV4V1RCV01uUnZWVEZaZVZOdVNtcFNiWGhoVm1wT1RtVkdXbkZTYkU1WFRWZFNNVmRyV21GVk1rcFpXVE5zVjFaNlJYZFpWRXBIWTJzeFYySkdTbWhOYkVwWFYxZDBhMVV5Vm5OWGJrWlNWMGRvY2xWcVFtRlRSbXhXVjIxMGFGWnNjRWRXYlhCUFZqQXhWMk5IYUZwbGExcGhXbFphVDJOc2NFaGhSazVwVTBWS1lWWnNaSGRTTVUxNFZteGtXR0pyV2xOWmExcDNWREZhZEUxV1RsaFNiWGg1V1ZWYVQyRkZNVlppUkU1WFRXNW9kbFpxU2t0V1ZrcFZVV3hXVjFadVFsVldiWEJIWVRKT2NrOVdaR0ZTVkZaWVdXMTBTazFzV25OVmEzUlBVakJzTkZZeGFHdFViR1JHVjJ4b1dtRXhXa3hXTUZwWFkxWlNjazlWT1ZOaVNFSTBWbGN4ZWs1WFJuSk5XRXBZWVRKb1dWbFVSbFpsUm14V1drVmFhMDFXY0hoV1YzaHJZVlphUmxkWWNGZFhTRUpJVmtjeFYxSXhVbk5pUjJ4VFlrWndkbFpHV205Uk1rbDRWMnhvVGxaR1NuSlVWbHBIVGtac2NsZHRPV2hOVld3elZqSjRWMVl5U2xsaFJFNWhWbFp3VjFwV1pFOVNNVkp6WVVaT1RsTkZTbHBXYlhCS1RWZFJlRmRZYkZSaVJscFlXV3RhUzFsV1duTlhibVJWVW01Q1IxZHJWbXRWTURGeVYydG9XazFIVW5aV1J6RkxWMGRHUmxac1pFNWliV2g1VmtkMFlXTXhaRWRXYmtwb1VteGFiMVJXYUVOaU1WcFlZMFYwYVUxV1JqUlphMXB6WVd4S2RGVnNRbGRpV0dnelZXMTRWMlJGTVZaYVIyaFhWa1ZhTlZacVNURmtNVnB5VFZab2FGTklRbUZaVkVaM1ZFWndSbHBGWkZOTmExcElXVEJrYzFVeVJYcFJiSEJYWWtkUmQxZFdXbUZrUmxwellVWmthRTF0YUZWWFYzaHZWVEZhUjFWc1pGaGliVkpWV1d0a1UxWnNWbGhOVkVKVlRWVndlbFp0Y0U5V1ZscHpWMjVhV2xaRmNGaFpNbmhQWXpKR1IyTkhhRTVpUlhCUlZqSjRWMWxXYkZkVGJHUlVZbXhLY2xWdGVFdFdSbXhaWTBaa1QxWnRVbGhXYlRFd1ZERktjMVpxVmxaaVdFSm9WbXBLUzFkSFJrZGlSbVJwVjBkb1RWWlVRbUZrTVVwWFZHNUtZVkpyTlU5V2FrWkxXVlpaZVdSSFJtbE5hMXBZVlRKNFYxWXlTa2hsUm1oV1lsaG9NMXBIZUZkV1ZrcHlUMVpPVGxadVFtRlhWM1JXVFZaWmVGTnNXbXBTYlZKWlZtcE9VMkZHYkRaUlZFWnFUV3R3U0ZZeWVHOWhWbVJIVTJ4c1YxSnNjR2hhUkVaS1pVZEtTVkpzVm1sWFJrcG9WbTB4TUdReFNYaGhNMlJYWVd4S1dGbHNWbUZsVmxsNVRsVjBXbFpyY0hwWk1GcERWMnN4ZFZSVVJsZGhhMW96VlRCa1MxTkhSa1pPVmxKVFZsYzVOVlp0TUhka01sRjVWbXRhVDFaWFVuQlZiVEZ2VmpGWmQxcEVVbGROVjNnd1dUTndSMkZzU25OWGFrSlZWbXh3VUZsVldrdGpNV1IxWTBaa1RtRnNXbmxYVm1SNlpVWlplRnBJVm1oU2JIQllXV3RXZDFOV1duUmtSMFpVVFdzeE5WWkhkRmRWYlVwV1YyeG9WMkZyUmpOYVZWcGhaRWRPUmxOdGVGTmhNMEpaVmxjd01WSXhXWGxUYTJ4U1lrZG9XRmxzVWxkU1JsSjBaVWRHYTFJd05VZFZNakUwVlRKS1NHUjZSbGRoTWxGM1dYcEdZVk5HVG5KaFJscHBVbXR3V0ZkWGRHRmtNREI0WWtaYVdHSllVbkZVVmxwM1RVWldkRTFVUWxWaVJuQldWbTE0YzFZeVJuSmhNMmhYVWtWYWNsVXdXazlqTWtaSVlVWlNVMVpHV205V01WcFRVakpSZDAxSWFGaFhSM2h6VldwQ1lXTldVbGRhUkVKUFlrZDRWMVpzVWtkV2F6RkZVbXhrVjAxV1NrUldha0Y0WkZaV2RHRkdjRmRTVm5CNVZsUkNZVk14WkZoVGEyUllZbGQ0VkZSVVNtOWlNVmw0V2tSQ2FFMXJiRFJXTW5SclYwZEtjbGRzVWxwaE1WVjRWakJhVTFZeGNFZFVhelZYWWxaS05WWXlkRk5WTWtaSFYyNUthbEpGU21oVk1HaERVMFpaZDFwRldteFNiVkl4VlcxNFYyRldTblZSYlRsWFlXdEthRlpFU2s5ak1YQkpWVzF3VTJGNlZsbFdSbU40WWpGa2MxZHVTbGhpV0ZKeVZGWldZV1ZXVWxkWGJYUllVakJ3ZWxVeWN6VldNa3BJWVVaU1YwMVdjR2hhUldSWFUwWktkR1ZHVG1sVFJVcExWbXRhWVZZeVJYaFhXR1JPVjBWd2NWVnNhRU5XTVZweFZHdE9hRkpzYkROV01qRkhWVEpLVm1KNlNsWldNMmh5V1ZWa1JtVnNSbk5TYkdoWFVsaEJNbFpIZUdGWGJWWklWR3RhYUZJeWFGUlpXSEJYVlVaa1dHVkhkR2xOUkZaNlZqRm9iMWRIU2taT1ZsSlZWak5vU0ZScldtRlRSVFZXVDFab1UwMUlRalZXUjNoaFlURmtjMWRyV2s5V2JFcFlWV3RXWVZkR2NFWmFSbVJUVFZoQ1IxUXhXazloVmtsNldUTmtWMDFXY0ZoWmFrWlNaVVprV1dGR1VsaFNNVXBaVjFaa05GbFdiRmRYYms1WVltMVNjVmxyV25OT1ZuQldXa1ZrVmsxcldUSldiWGgzVmpBeGRXRklTbHBXVjFKSFdsVmtUMUl4V25OYVIyeFhVbFpXTTFZeFdsTlRNVlY0VjFoc1ZXRXhjR2hWYWtwdlZrWnNXV05HWkd0TlZuQjRWVmN4TUZaVk1VVldiR2hYVFdwV1VGWXljM2RsVjBaR1QxWmFhR0V3Y0ZsV1IzaGhWakpTUms1V1dtdFNiRnB3VldwR1MxTkdaRlZSYlVaU1RWWnNOVlV5ZEc5V2JVcHpZMFpvVlZac2NETmFWM2hoWXpGa2NtUkhkRmRpYTBwSlZtcEtORlF5UmxkVWExcFVWa1ZLV0ZscldrdFVSbEpXVmxob1ZGSnJjREZXVjNoVFlVVXhXVkZzUmxkaGEwcHlXV3BHV21WR1ZuTmhSVGxYWlcxNGVGZFhkR3RPUm1SSFYxaHNUbFpGU2xkVVZWSkhWakZTYzFWclpGaGlSbkJZV1RCb1lWZHNXbk5qUlhoYVpXdHdVRlZxU2tkU01YQkhWRzFzVkZKVmNESldiWGhUVTIxV1IxZFlhRmhYUjJoWFdXMTRZVlpXYkhOV2JVWlhVbXhLV1ZSV1l6VldNVnAwVld4c1lWSlhUVEZXVjNONFl6RktjVlZzWkU1aWJXZ3lWMVprTkZNeFpFZFdiazVYWWtaYVdGbHJhRU5PYkZwSVpFZEdhRTFyTlhwWGEyaFRWVVphYzFkdVFsWmhhMXBNVlhwR1lWWXhjRWxqUlRsWFlrZDNNVlpYTURGVE1WcElVMjVXVW1KR2NHRldhMVpoVFRGc1ZsZHVaRk5pUm5CV1ZXMTRhMkZXVGtaVGEyeFhUVzVTYUZaRVJsTmpNVTUxVm14S1YxSllRbGxYVjNSaFV6RlNSMVZ1U21GU1dFSnpWVzB4VTAxV1dsaGxSazVvVm10c05sbFZhR0ZXTVZsNllVaGFXbUZyV25KVmFrWlhZekZ3UjJGSGJHbFdhM0JhVm14amVFNUhVWGxXYTJSWFlteEtVRlpzVW5OV2JGSllaRWhrVkZKdGRETlpWV2hyVjBaSmQxWnFVbHBOUjJoTVZtcEdTbVZ0UmtkUmJGcHBWMGRvVVZkVVNYaFVNVWw0WTBWYVQxWnRVazlXYkZwelRteGFkRTFVVWxaTlZXdzBWMnRvVTFZeVJYbGhSbFphVmtWd1ZGbFZXbGRrUlRGWVQxZHdVMkpHY0RSV1ZFbDNUbFprUjFOdVVsWmlSMmhaV1ZSS2IwMHhXa2hsUjBaclVqRmFTRmxWV25kaFJURlpVV3hzVjJKR1NreFZla3BUVWpGYWRWUnNhR2xTYmtKM1ZtMTBWMVl3TlhOWGEyUmhVa1pLV0ZSWGVFdFNNVkpYVjIxR1dsWnJiRFZaVldoRFZtMUtWVlpyVWxWaVdHaG9XVEZhVDFaV1NuUmtSVFZYVFZWd1MxWnNaRFJpTWtsNVVtNU9WR0pyY0ZWWmEyUnZWakZzV0dONlJsWlNiRXA1VmpJeFIyRXhTbFZTYkdSVlRWWndVRlpxU2t0VFZrWnhWMnhrVG1Kc1NubFhXSEJIVjIxV1IxUnVUbUZTYldoWlZUQldTMWRXV2tkWGJVWnJUVlp3U0ZadE5VZFZNa3BHVGxoS1ZtSllhRE5hVjNoclkyeGtkRkp0YUZkaE1uY3lWMVpXYjFsV1dYaFhXSEJTWVRGS1dWWnRlSGRoUmxweFVtMUdhMVpzU25wV01qRnpWVEF4Vm1ORVZsZE5WMUYzVjFaa1VtVkdjRWRhUmxwcFVtNUNXRmRXVWt0Vk1WbDRZa1pzYWxKWFVuTldiWGhMWld4YWRFMUVWbGROUkVaNVdUQmFZVll5U2xsaFJsSlhUV3BHUjFwVlpFOVNNVVp6VjJzMVUySnJTbHBXTW5SaFdWWkplVlJZYUZoaWF6Vm9WV3BLTkZaV1ZuTldiSEJPWWtad01GcEZaRWRXTURGWVpVWnNWMVp0YUhaV2EyUkxZMnMxV1ZKc1dtbFNia0Y2VjFaV1lWWXlUbGRVYmxKUVZqSjRUMVl3Vmt0WGJHUnlWbTEwVTAxV1JqVlZNblJyWVd4S2MyTkdaRlZXZWxaRVZXdGFjMVpzV2xsaFJtUk9ZWHBXU1ZkV1ZtRmhNVkowVW01T1dHSkZXbGxXYlRGU1RVWmFSVkpyY0d4V2JFcDVXVlZhVDJGV1NYaFRibHBYVW14d2FGcEVTa3BsUm1SMVUyeGthVlpXY0doV2JYQkNaVVUxUjJFelpGZGlWVnB2VkZaV2QyVnNWWGxsUnpsWVlrWndSMVl5Y0U5V1YwcFpZVWRvV2sxV2NGQldNV1JIVTBkS1JrNVhhRTVYUlVwS1ZtMTBZVmxXYkZoVVdHaFhZbXhLVkZsWGVIZFhSbXh5V2tjNVdsWnRlSGxYYTJNMVZURktjMVpxVGxkTmFrVjNWbXBCZUZkR1ZuRlNiR1JUVFRKb01sWnNVa3RUTVVwMFZHdFdXR0pIVWs5WmJYaExZakZhZEdORmRGTk5WbXcwVmtkNGMyRnNTWGxoUmxaV1lsUldSRll4V21Ga1IwNUdUMWRzVGxadVFrbFdha2t4VWpGVmVWTnNXbGhpUmtwV1ZtcE9VMDB4VlhsbFJscHNWakZhU1ZwRlpHOVdNREZKVVd4c1YxWkZiekJWYWtaclVqRmtXV05HV21sV01taHZWbGQwVjFsWFJrZGlSRnBUWWxWYWNsWnRlR0ZsVmxKelYyczVWazFyY0VwVlYzQkxWakpLU0ZWVVFsZFdSVnBMV2xWYWQxSnNjRWRhUjJ4cFVsaENORlpzWTNobGF6RlhXa1ZrVm1KR2NGZFpWRXBUVkRGYWRFMVVVbGROVjNoWFYydFdhMWRHU1hkalJXaGFUVVp3ZGxZeWMzaFNNV1JaV2tab1YySklRazFXVnpFMFlUSlNWMVJ1VG1wU00yaHZWRlJDUzFOc1duTmFTR1JVVFZaR05GWkhkRzlWTWtWNFkwWkNWMkpVUm5aV2ExcGhZekZrZFZOdGVGZGlTRUYzVjFSQ1YyRXhaSE5YYms1cFVrWktZVmxVUm5ka2JGcDBaVWQwVkZJd1drbFpWVnBoWVZaSmVGTnFTbGRoYTBwb1dYcEdZVll4VW5WVmJFSlhZbFpLVlZkWGVHOWlNRFZ6V2taa1YySlZXbFpVVmxwelRrWlZlVTVWT1doaVJUVkpXbFZhYjFkdFNrZFRhMmhXVFVad1lWcEVSbXRqYlZKSVpFWk9hVkp0T1RSV01XUXdXVmRGZVZKc1pGaGhNWEJZV1Zkek1WZFdXblJsUlhSU1RWaENWMWRyVlRWaGF6RlpVV3R3VjFKNlJuWldWRXBMVTFaR2MxRnNhRmRsYTBrd1YxZHdSMkV4V1hoYVNGWldZbGhDVkZacVJrdGtiRnBIVjJ4YVRsWnJOVWhXTWpWVFZERmFWV0pIT1ZkaVdGSXpWRlZhWVZkRk5WWlViR1JPVWtWYVNsWnNZekZaVm1SMFVtNUtXR0pyY0ZoWlYzUmhZVVp3UmxkcmRHdFNNRnBIVkd4YWEyRldaRWhVYWs1WFlXdGFWRlZVUmxwbFIwcEhXa2RzVTJKV1NsWlhWekY2VFZaYVYySklTbGhoTTFKaFZtMTRkMlZXV25OVmEyUldUVlZ3TUZaWGVHOVdNREZ4VWxoa1YyRnJSalJXYWtwUFVsWkdkRkpzVGxkTlZWbDZWbTEwYTA1R2JGaFVXR2hoVW14YVUxbHJaRk5pTVd4VlUxUldUazFXYkRSV01qRkhZVVV4Vms1VmFGZFNlbFpNV1ZaYVMyTnRUa2xSYkZwb1lYcFdNbFpxUm1GaE1WbDRZMFZzYWxKVVZsaFphMmhEVTFaa1YxVnJPV3BOYTNCSVZURm9hMWRIU2tobFJtUmFWak5TU0ZScldsTmtSMVpKVkd4a2FWSXhTalZXUkVaaFZqSkdWMWRzWkZoV1JYQllWbTB4VW1ReGJEWlNiSEJzVm1zMWVsWnRlRTlXTVVwV1kwWnNWMkpZVWxoYVJFWlBVakZhV1ZwR2FHbFdWbkI1Vm0weE5GTXlWbk5pUmxwaFUwVTFiMVpxUWxkTk1XdDNWMjVrVjAxRVJsbFdWbEpEVmpGYVJsZHJlR0ZTVm5CWVZqRmtSMU5IVGtkVWJHUnBVMFZLV0ZacVJtdE5SMFY0Vmxob1lWSlhVbGRaYTJSVFlVWldkR042UmxoV2JYaDVWMnRTVTJKR1duTmpTSEJYVmpOU2NsWnFRWGhTVmtweldrWndUbEp1UW5sV2FrcDZaVVpKZVZScmJGaGlSMUp2V1ZSR2QxUldaRmxqUldSb1RXc3hORlp0TlU5WFIwcElWV3hTVjJKR2NHRlVWVnBoWkVVeFdWcEdVazVXVkVVd1ZsUkdiMkl4YkZkVWEyUlVZbFJzVjFsc2FFNWxSbHBGVW14T1YwMVdjREZYYTFwdllWWktkVkZxVmxkaGEydzBWV3BHYTJNeFpGbGFSVFZYVWxSV1YxZFhkR3RpTVZaSFYyNUdWR0V6VWxWVmFrSmhVMnhWZVdWSFJtaFNWRVphVlZkemVGWXlSbkpYYldoYVpXdHdUMXBWV210a1ZsWnpWRzFzV0ZJeWFGcFdNV1F3WVRBd2QwMVdaR0ZUUlRWWVdXdGtVMVpzVWxkYVJrNVVWbXhXTlZwVlpEQlhSa2wzWTBSQ1lWWldjSFpXYkZwYVpXeEdjMkZHWkZOV2JrSjVWbTF3UjJFeVRuUlZhMmhxVWxSV2IxcFhlR0ZUVmxsNVpVWmtXbFl4UmpWVk1uUnZWVEZrU0dGSVJsWmlWRVV3VmpGYVdtUXlSa1pVYkZaVFlrWndORlpYTVRCa01rcEhVMjVPV0dGcldsZFVWelZPVFZaYWNWRllhR3RXTUZwSVdXdGFhMVV5U2xaT1JFSlhZa2RTTmxwVlpFNWxSbkJKVm14YWFHVnNXbFpXVjNCTFlqRldSMWRzYUU1VFIyaFFWVzB4VTFkR1duUk9WVGxvVW10c05sWlhlR0ZYYlVWNFkwUk9WMDFXY0doV01HUlhVMVpTYzFwRk5WTlNWbkJMVm0xNGEwNUdWWGhYV0doWVlrZFNjVlZxU205aFJsWnpWMnhrVDFKc2NIaFZiWGhQWVdzeGNsZHJhRmRTZWtaNlZsUkJkMlZXVmxWVGJHUnBWMFZLVFZaR1ZtRldiVlpIVjJ4c2FWSnJOWEJaVkU1RFZVWmFkRTFJYUZaTlYxSllXV3RhYjJFeFNYZFhiVVpYWWxob1RGWnFSbXRqYkd3MlZteGthVkpZUVhkWGJGWmhZekZzVjFkc1pGaFhSMUpoVm1wT1QwNUdXWGRYYkdSclZqQmFTRll5ZUd0VWF6RjBXa1JhVjJKWVVuSmFWekZTWlZaV1dXRkdWbWxoTTBKM1ZsY3dlRlV5VGtkV2JsSnJVMGRTVkZWdE1WTmxiRnAwVFZWa1dGSXdjRmhXTW5odlZqRktObFpyZUZkaGEzQk1WVEJhVjJSV1JuTlhiV3hZVWpKa05sWnRjRWRaVjBWNFdrVm9WbUV5YUZSWmJHaFRWREZzY2xkdVpGaFdiSEI0VlRGU1IxVXdNVmRYYWtKV1RXNW9lbFp0TVV0U01XUnpWMnhrYVZkSGFHOVhiR1EwVlRKTmVGcElUbGhpV0doWVZGWldkMU5XV1hsa1IwWnBUVlpXTTFSV1ZuTlZiVVY2VVd4b1dtRXlVbE5VVlZwelkxWktkVlJzWkU1V01VcGhWMVJDYTJJeFZYZE5XRkpvVW0xU1dWWnFUbTlrYkd4eFVtNU9WMDFyTlVoV01uaHZZVlprUjFOdWJGZFdla1YzV2tSS1YyTXhaSE5oUjNCc1lURndXVlpHV210Vk1VbDRWbGhvVm1FelVsaFVWM1JoWlZac2NWUnRkRmhpVlZwNVZqSjBNRmxXV2xkalNFcGFaV3R3U0ZWcVJsZGtSMFpHVGxkc1UxZEZSWGRXYlRFMFlXc3hXRlZZYkZWWFIyaHdWVzB4VTFkV2JIUmtTR1JZVW0xNGVsWnRNVWRXVlRGWVpVaHNXbFpXV2xCV01GcGhaRlpHYzFwR2FHaE5WbkI1Vm1wQ1lWTXlUblJVYTJSWVlrWndjRll3Wkc5aU1WcDBZMFZrV2xaVVZucFZNbmh6V1ZaS2RGVnNVbFZXUlhCMldXcEdZV05XUm5Sa1JscE9Va1phTmxaVVNURlVNV3hYVTI1U1ZtSnJOV0ZXYTFaaFdWWndXR1ZHY0d4U2JWSjZWa2Q0VDFSc1dYcGhSbXhYVFc1U1dGbFVSbUZYUms1MVUyczVWMlZ0ZUZoWFZtUjZUVmRTYzFkdVNsaGlhelZ4V1d0YWQwMVdaSEpYYlRsWFRXdHdXRlV5ZUhkV01VcHpWMnhTVm1GcldsaFpNbk40VjFaU2MyRkhiRk5OYldoYVZtMHhkMVF5U1hsU2EyUllWMGRTYUZWc2FGTlhSbXh5V2taT1RsWnNWalZhVldSSFlVWmFjbU5JYkZwTlJscDZWbXBLUjJOdFNqWlJiSEJYVWxoQ1VWZFljRWRrTVU1WFZXNU9WMkpYZUZSWmEyaERUVEZhYzFwRVVtbE5WVlkwVmtkMGExZEhTbkpYYkZaYVZqTlNURmt4V2xOV01XUjFWR3M1VjJKR2IzZFdSM2hYVFVaa1IxTllaR3BUU0VKaFZGVmtVMU5HV1hsbFJuQnNZa1phTUZsVlduZFViVXAwWVVab1dHRXhTa2haVkVwUFkyczVWMkZIZEZOaVZrcDJWMnhrTkZkck1WZFhia3BXWVRKU1lWWnFRbGRPUmxwWVRsWk9WMUl3Y0VsWlZXTTFWbTFLVlZKVVFsZE5SbkJVVm1wR2QxSXhUblJrUlRWWFRWVndXbFpxU2pCWlZrMTVVbGhrVGxaV1dsUlpWRTVEV1ZaYWMxZHVaR3RpUjNoWVYydFdZV0pIU2taWGJuQmFUVVp3ZGxacVNsZGpiR1JWVTJ4a1UySklRbTlYVmxKSFYyMVdSMXBJVmxkaVJUVndWV3hvUTFkV1dsaGxSbVJyVFZaYVNGZHJXbTloTVVsM1YyMUdWMkpHU2toVk1GcHlaREZrZEZKc2FHbFdiSEEyVm1wS05HSXhXbGRYYkdSVVlUSm9hRlp0ZUhkbFZuQkZVbTFHYTFadVFraFhhMlJ6VlRKS1dWa3piRmRpUm5CeVZHdGFWbVZHWkZsaVJrNXBZVE5DZUZaWGVHdFZNa1pIVjI1U2JGTkhVbGhWYlRFd1RrWlplV1ZGT1doaGVrWllXVEJTUTFkdFJYaGpSa0pYVWpOb2FGWXhXa2RqYlZKSFdrZG9hRTFxYTNwV2JURjNVakpOZUZkWWFGZGlSM2h3VlcxNFlXTkdiRmxqUm1Sc1VteHdXVnBWWkRCV2F6RnlZa1JTVjJKVVZraFdhMlJIWXpGT2RWSnNXbWxYUjJkNlYyeFdZVlp0VmxaTlZWWlhZa2RvVkZscmFFTk9iR1JWVVcwNWFrMVdiRE5VVm1oSFZUSkdjazVXYUZaaGF6VjJWMVphZDFKV1RuSmtSazVYWWtad05sWXlkR0ZoTVZKeVRWWmFhbEpHV2xoVVZscDNZVVprVjFkck5XeFdiRXBhV1ZWa1IxWkdTbFZXYkdSWVZqTlNjbFpVUmxKbFJscDFVbXhPYUUweFNsQlhWM1JyVlRGYWMxWnVVazVXVjFKWVdWaHdSMWRHYkhKVmJFNVlZWHBHU0ZZeU5VdFdNa3BJVld0NFYwMVhVa2hWYWtwSFVqSk9TR0pHVGs1aVYyaFdWbXBLTkdFd05VZGlSbWhWWWtkU1ZsbHJaRFJpTVZaelZXeGtWMUp0ZUhsWGExSlBZa2RLUjJORmFGZE5ha0V4Vm14VmVGZEdWbkppUmxwT1lXeGFWVmRYZEdGVE1sSklVbXRrV0dKSFVuQlpiWFJMVjFaYVdHUkhSbXBOVm5CNlYydG9VMVV5U2xsUmJHaGFWMGhDV0ZSc1dtdGpiRnAwVW14V1RsWnJjRFpXYWtvMFZqRlplVkp1VGxoaVIyaGhWbXRXZDFWR1VuSlhiR1JxVm10d2VsWXlNVFJWTWtZMlZtcGFXRll6VW1oVmVrcEhWakZPV1dOSGFGTmlXR2haVjFkNGIxRXhWa2RXYkZaVFlYcHNWRlJXWkZObGJGcDBaVVpPYUZacmNGWldiWGh6VmpGS2MyTkhhRmhXYkZZMFZtcEdhMk50UmtobFJrNU9VbTVDTWxadE1IaE9SMDEzVGxoT2FWSnNjRmxaYTJSVFYwWlNWMVp1WkU1U2JIQkpXVEJhVDFkSFNsWlhibXhYVFdwV1RGWXlNVmRqYkdSMVUyeGtUbFl4U2tsV1ZFSmhVekpOZUZWdVRsVmlSMUpaVld4V2MwNXNXblJOVkVKYVZtMTRXRll4YUc5WFJtUklWV3hDVjJKSFVsUlpWVnBXWkRGYWRWcEdhRmRpV0dnMlYxWldZVlF4WkVkWGJrNVlZbTFvVjFadWNGZGpiRnB5VjIxR2ExSXhXa2hYYTFwcllWWktjbU5HYkZkaVdFSk1WV3BCTVdNeFRuVlRiV3hUWWxaS1dWZHNaRFJaVjBsNFYyNVNhbEpZVWxSVVYzTXhaV3hrY21GR1pHaGlSWEF4VlZjMVQxZHNXa1pYYWs1aFZteHdjbGt5ZUdGa1JrcHpWV3MxYUdWclZYZFdiVEIzVFZaUmVGZHNhRlJpUjJoelZXMHhORll4YkhOaFJrNWFWbXhLV1ZwVlpFZGhNVXBWVW10d1dHRXlVWGRXUnpGTFVqSk9SbUZHWkZOaVNFSlpWMWR3UjFadFZsZFRiR3hwVW14d2NGVnFUbTloUm1SWVpVYzVWazFFUWpSWlZFNXJWMGRLU0ZWdVJscGhNbEpVVkZaYWEyTnNaSFJrUmxacFVtNUJlRlpXWkhkVk1WbDVVbGhzVldGck5WWlphMXAzV1Zad1ZsZHJPV3RXYkVvd1dUQmFVMVV3TVhSaFJteFhZVEZ3Y1ZSV1dsWmxWbEoxVkcxc1UySlhhRkJXYlhodlZURmFWMVp1VW14U01GcFBWbTB4TkdWV1pISldiWFJYVFVSR1dGbHJVbE5XYXpGMVZXNXdWMkZyY0V4VmFrWlBZMnhTZEZKc1RsTlhSVXBhVm0xd1ExbFdUWGxVYmxKVFlUSlNVMWxyWkZOalJscHhVMjA1VG1KR2NIbFdNakZIVjJ4WmVGSnFWbGRpV0doeVZqQmtTMk14VG5WU2JGcHBVakZLVlZadGVHRmpNazE0V2toU1UySkdTbFJaYTJoQ1pERmFTR1ZIUm1oTlZtdzBWakZvYTJGc1NsaGhSbWhWVmpOQ1ExUldXbXRXTVdSelkwZDRhVlpXY0VwWFZsWnJVakZWZUZOc1pHcFNlbXhZV1ZkMFMxWXhjRlpYYTNSWFRWVTFNVlpIZUZOaFIxWnpWMnhzVjJKWVVtaFdNbk40WXpGa2RWVnRjRk5YUlVwUVZtMHhORll3TlZkV2JsSlBWbFJzV0ZWcVFuZFRWbXhXVjIxMFdHSlZjRnBXVjNRMFZqSktXV0ZIYUZwTlZuQlVXWHBHVTJSSFZraGlSazVvVFRCRmVWWnRNWGRUTURWSVVsaHNVMWRIYUZWV01HUnZWbFpzVlZOcVVtaFNiRnA2VmpJMWEyRnRTa2RqU0doV1ZtMW9kbFpVUVhoWFJsWnpWMnhhYVZkSGFESldiWEJMVXpGSmVWUnJhRkJXYldoWVdXdFdkMU5XWkZkVmEzUldUVlZzTkZaWE5WZFdSMHBXVjJ4U1dtSkhVblphUkVaaFpFZE9SbVJIYkU1V01VcFpWbXBLTUdFeFdYbFRiRnBZWW10d1ZsWnFUbTloUm5CWVpVaE9hbUpHV2pCVmJYaHJWVEF4UjFkVVJsZGlSMUV3VmxSR1lWWXhaSFZVYlhCVFYwZG9iMVp0Y0U5aU1sWlhZMFZXVTJKWVVuSlZha1pMVTFac1ZsZHRkR2hTVkVJelZUSXhiMVl5U2tkalNFWmhWbFp3UzFwVldtdFhWbkJHVGxab1UySklRakpXYkdOM1pVZEplRnBHWkZoaWJFcFBWbTF6TVZaR1VsZGhSVTVZVW14c05WcEZVa05YUmtwellrUk9WMDF1VW5aV2FrWmhUbXhLZFdOR1pGZFNXRUpOVmxSR1lWSXlUWGxVYTJSaFVsUldXRlJXVmxwbGJGbDRWMnhPVTAxV2NEQldiWFJyV1ZaT1IxZHNXbHBoTVhBeldUQmFWMk5XU25Ka1JtaHBVakZLV2xaR1ZtOWlNVnB5VFZoS1QxWnRhR0ZaVkVwdlZFWlpkMXBGZEd0U2JGb3hWa2Q0WVdGV1pFaGhSemxYVW14YWFGWlVSbHBsUm1SMVZXMTBVMkpXU25aWGJHUXdXVlUxVjFwR1ZsSmlSMUp4VkZaYWMwNUdXWGxqUjBaWFRXdHdNVlZYZUc5V1ZsbDZVV3RvVm1GcldqTldiWGgzVW1zNVYxVnNaR2hsYkZreVZtcEtNR0V5U1hsU2ExcE9WbTE0VTFsWWNGZFhSbXh6WVVWT1UxSnRlRlpWYlhoaFlUQXhSVlpzY0ZkU00yaFFXVlprUjA1c1duUlBWbVJYWld0Sk1GWnNVa2RWYlZaSFZtNU9XR0pIVW5CWmJGcExWbXhrV0dSSFJtcE5SRlpJV1d0YVlXRkdTWHBWYkdSVlZsWktTRll4V21GWFIwNUdWR3hrVG1FelFtRldiR014VXpGWmVWTnNWbE5oTTJoaFdsZDBZV05zYkRaU2JVWnFUV3MxU1ZsVlZURmhWa3BZVDFSV1YyRnJXbFJWVkVaelZqRmtXV0pHV21oTmJXaFlWMVpTUzA1SFJrZFdibEpPVm5wc1dWVnRNVFJsVm14V1ZtczVXRkl3Y0VsV1Z6VjNWakpLVlZKcmFGcFdWbFkwV1RKNFlXTldVbk5XYkdScFUwVkplVlp0TUhkbFJrMTRWR3RvVTJFeVVuQlZiVFZEVjBaV2MxZHVXbXhpUjFKNVYydFNVMkZyTVZkalJtaFdUV3BXVEZsWGVFcGxiRlp5VDFaa2FHRXhjRXhYYkZaaFdWWmFWMVJ1UmxaaVIxSlBWbTB4TTAxV1dsVlRhbEpvVFZad1NWVXlkR3RYUjBwSVlVWm9XbFpGV21oV1JWcHpWbXhrZFZOdGVGZFdSVnBaVmxSSmVFNUdWWGxUYkdSVVYwZG9XRmxyWkZKTlJscEZVMnRrVjAxV1NubFdNbmhUWVZaSmVtRkdjRmRpVkVVd1ZYcEdWMUl4V25OV2JFNXBZWHBXV1ZaR1dtdFZNREZYVjJ0b1RsWlhVbGRVVmxaM1pWWnJkMWR0T1ZkTlZYQjZXVEJvUzFZeFdrWmpSbWhhWld0YU0xVXhXazlqTVhCSVlrZG9iR0pHY0ZwV2FrWnJUa1paZVZWWVpFNVdiVkpZV1d0a2IyTXhWblZqU0U1WVVteHdNRnBWYUd0aVIwcElaRVJPVjFZelRURldNbmhoWXpKS1JWZHNjRmRXTW1nMlZqRmFZVmxYVWtkV2JrNW9VbXh3VDFWcVJrdFdWbHBWVVcxMFZrMVZiRFJXVnpWTFZERmFkRlZzYkZaaVJsb3pWa1phWVdSSFRrWmFSbkJYWWtkM01GZFhkR0ZpTVZWNFdrVm9iRkpzU21GV2ExWmhUVEZhUlZKc1dtdE5XRUpJVmtkNGExVXlTbGxoUm5CWVZrVTFNMVZxUm10U01VNTFWR3hTYVZJemFGZFhWM1JoWkRGV1IxZHVSbE5oTTFKeFZGZHpNVkl4V1hsbFIwWlZZbFZ3TUZsVlZYaFhSbGw2Vlcxb1ZtVnJjRlJWYWtaaFpGWlNkR05HVG1saE1IQXlWbXRhWVdJeFJYaFhiR1JoVW0xU1dWbHNWbUZXVm14elYyMUdUbEpzV2pCYVJXUXdWakpLVm1ORmJGcFdWbkIyVmpJeFJtVkdaSEZVYkdSVFlraENlVlpxUW10VU1VcHpZMFZvYWxKVVZsaFpiR2hxWkRGYWNWTnFRbWxOVm13MFZqSjBiMVpIUlhsaFJtUmFZbGhTVEZkV1duTmpiR1IxV2taV1UySkhkM3BXYWtsNFVqRlZkMDFXYUZaaGEwcFdWRlphZDFSR1draGxSMFpyVWpGSk1sVlhlR3RoUjBWNFkwUktXRmRJUWtoV1ZFcE9aVVp3U1ZSdGFGTmlTRUozVm0xMGEwNUdXWGhYYmxKT1ZrWktjbFJWVWtOT1JtdDNWMjEwV0ZJd2NFZFViR2hIVmxaWmVsVnRhRlpOYm1ob1ZUQmtWMU5IVWtkYVJUVlRVbFp3VEZac1dtdE5SMDE0V2tWa1dHRXhjRlZaYkdSdlYwWmFjbFp0UmxwV2JrSlhWakl4TUdGdFNraFZibkJYVW5wR2RsbFdXa3RYVmtaelkwWmtUbFl4UlhkV2JGSkhVMjFXUjFkdVNtRlNiVkp3V1ZSR2QxWldaRmRoU0dScVRXczFXRlpYZUd0aFJrcFdUbFpXVjJKVVJUQmFWbHBhWlZVeFJWWnNaR2hsYTFwWlYxUkNZV1F4V25OWFdIQldZbXR3V0ZsWGRIZFVSbHB6VjJ0a2FsWnNXakJWYlhoUFZURmFkVkZyTVZkTmJtaFlWMVphV21WV1ZuTmFSbVJwWVhwV2IxWlhjRXRpTVZGNFlraEtWMkp0VWxsWmExcHpUa1prY2xWclRtaFNWRVpHVm0xMGMxWnJNVmhoU0ZwWFlXdHdURmw2Ums5amF6bFhXa2RzYVdFd2J6SldNVkpIV1ZaWmVWVnJXazVXYkZwWFdXdGtVMk5HVm5SbFNGcHJUVlp3U1ZwVlpEQlViRXB6WWtST1ZWWnRhRXhaVjNoTFYwZFdSMkZHWkdoaGVsWXlWMnhrTkdFeFdYaGFTRkpUWWtkU1QxbFljRmRUVmxwWFdrUlNhMDFXYkROVVZXaHJWREZLUmxOc2FGcFdNMUpNV1RKNFlXTldTbkpqUjNoWFlUTkNOVll5ZEd0U01WVjRWMnRrV0dKc2NGbFdhazVUWVVad1JWSnRSbXBOVjFJeFZsY3hNRlV3TUhoVGJFWlhWbnBDTkZScldtdFNNVnBaWVVkb1UyVnRlRmxXYlhCRFpESldWMVZ1VG1oU1ZUVllXV3hXZDFac1ZuUmxSazVZWVhwR1NGa3daRzlYYXpGMVlVaEtZVkpXY0V4WmVrWlRZekZ3U0dKR1VsTldXRUp2Vm0xd1IxVXhSWGhYV0d4VFYwZG9hRlV3VlRGWFZsbDNXa2M1VjFadGVGWlZNbkJUVjBaS2MxZHVhRmRTTTJoUVdWVmFTMk15VGtsalJtaG9UVlpzTTFacVFtRlRiVkY0V2toS2FGSnRVbGhVVkVwdlpWWmtWMVpzV214U2JHdzFWa2QwYjFWR1duUlZiVGxhVmtWS00xbHFSbXRXTVZaeVdrWndWMkpIZHpCV1ZFa3hWakZhZEZOcldsUmlSMmhXVm10V1lWUkdXbFpYYlVaclVsUkdSbFZ0ZUV0VWJFcEhWMnhzVjJGcmIzZFpWRVpyVTBaT2MxWnRiRk5pUlhCWFZtMHhOR1F5Vm5OVmJrNVlZa1p3YzFac1VsZFhSbVJ5VjIxR2FGWnNjRnBWVjNSM1YwWmFjMWR1U2xaaGExcGhXbFphUzJSV1RuSlBWbVJwVWxoQ2IxWnRNVFJaVjFGNVZtNU9XR0pzU25OVmFrNVRZMVpTVjFkcmRFNVNia0pIVmpKek5WWlhTa2RqUkVaV1ZqTlJkMVpxU2t0VFJsSnhWRzFHVjFZeFNsUlhiRnBoVXpKTmVHTkZaR2hTTW5odldsZDRZVTVHV25OYVJGSm9UVVJXU0ZkclZtdFdiVXBJWVVaQ1YySllUWGhaYWtaWFpFZFdTVnBHVG1sU2JHOTNWMnhXVms1WFJraFRiRnBZVmtWd1YxbHNhRzlOTVZweFVtMUdUMkpGY0RGV01uaHJWakZLVjJOSE9WZFdNMEpJV1ZSS1RtVldUbkphUjJoVFlsWktVRlpHWTNoaU1WcHpWMjVPV2sweWFITlpiRnBoVTBaVmVHRkhPV2hpUlhCWlZsY3hiMVp0U2xWU2JscGFZV3RhTTFZd1pGZFRSa3AwWlVkc1UySnJSak5XYTFwaFZURlZlRnBJVGxoWFIyaFpXVzAxUTFsV2JGVlNibVJvVW14c00xZHJWbXRVTWtwV1kwVnNWVTFXY0doWlZscExZMjFPUm1KR2FHbFNNVVYzVm0wd2VGWXhaRWRYYmtwcFVqQmFWRmxzWkc5V1ZtUllaRWQwVGsxRVJucFdNalZQVjIxV2NsZHNWbFZXYkhCNlZHdGFXbVZYVWtoU2JXaHBVbGhDTlZaVVNqUmhNV1J6VjFod1ZtSlhhR0ZVVnpWdlRURldjVkp0ZEdwaVZrcEpXVEJWTVZZeVNraFBWRTVYVFZkUmQxZFdaRXBsUmxwWllrWk9XRk5GU2xSWFYzUldUVlprUjJKR2FHdFNNRnB4V1d0YVMxWXhXWGxPVlRsWVVtdHdlbFl5ZUhkWFIwVjRWbGhvVjJGcldtRmFWVnBQWkZkR1IxcEdaRTVOYldoMlZqSjBVMU14U1hoVFdHaFlZa2Q0YUZWcVFtRldSbXhaWTBaa2JGSnNjRmxVVmxKVFYyeGFWVkpyYUZwTlJscG9XVlZhU21Wc1ZuVlJiRnBvWVRCdmVsWlVSbUZrTVZwMFVtdHNWV0pIVWs5V2JURXpUV3hrVjFadE9WUk5WbXcxVlcwMVMxVXlSbk5UYkdoYVlrWktTRlpGV2xOa1IxWkdUMWR3VGxkRlNrcFhWM1JoWWpGVmQwMVlVbWhTVjFKWVdXeFNRMDVHY0VWU2F6VnNVbXMxTVZaWGVHdGhWa2w0VTJ4c1dGWjZSWGRhUkVwT1pVWmFkVlZyT1ZkV1ZGWlhWa1phYTA1R1pGZGpSVnBoVWxkU1dGbHJXbmRsYkd0M1YyNU9XR0Y2UmtoV01qVkxWakpGZUZacVVscE5iazQwVm14YVYyTXlUa1pPVms1cFUwVkdOVlpxUm1GWlZteFhWRmhzVm1FeWFGUlpWRXBUVmpGc2NtRkZUbGhTYkZwNlYxaHdWMVF5U2tkalJXaFlZVEZLVkZZeWVGcGxSazV5V2taV1YySklRbGxXYkdONFV6RkplVlJyV2xCV2JWSndWV3BHUjA1c1drZFhiVVphVmpBMWVsZHJhRk5WUmxsNVpVVTVWMkZyTlhaV01WcGhWbFpPY1ZWdGJFNWhNWEJKVmxSSk1WVXlSa2RUV0dSWVlrZG9ZVlpyVm1GaFJsSlZVbTVrVkZJeFdrbFZiVEYzWVZaSmVGTllhRmRoTWs0MFdrUktSMVl4VW5KWGJGSm9UVzVvV1ZkV1VrdFZhekZIWWtoR1UySkdjSE5XYlhNeFpXeHNjbHBIT1ZaTlZYQjZXVEJhZDFZeVNsVlNWRUpZVm14d2NsVnFSbXRqYkZwelZHMXNWMVp1UWxkV2JHTjRaV3N4V0Zac1pHbFNiSEJaV1d4V1lXSXhXbkZSYm1Sc1ZteFdOVnBWYUU5WFJrcHpZa1JhV2xaV2NGUldiVEZMVmxaS2MxUnRSbGRXYmtKNVYxUkplRkl4VGtoV2EyUlZZa2RvVkZsVVRrSk5SbHAwWkVkR2FFMXNXbmxVVmxwclZsZEZlVlZ0YUZaTlJsb3pWakZhYzJOc2NFZFViR2hUWWtWd1dsZHJWbTloTVZwSVUydGtXR0pIZUZaV2JGcExWMFphY1ZGWWFHcGlSbkI0VmxkNFlWUnRTbk5UYWtwWFlXdEthRmRXWkU1bFZsSnlZa1pTYVZKdVFsQldWekF4VVRGU1YxcEdWbFJoYkVweVZGWlZNVk5XVm5Sa1IzUlhWakJ3V1ZwVldsTlhiVXBaVld0NFdGWnNjR2haTVZwUFkxWldkR0ZGTlZOU2JIQktWakZrTUZsV2JGZFZiazVoVWxad1VGWnRNVFJaVm14ellVWk9hRkpzY0ZaVmJUVlBZV3N4VjJORVFsWmlXR2gyVm1wS1MxZFhSa1ZYYkdSb1lUSTVNMWRXVWtkVmJWWkhWRzVXVm1KWVVsUlZiRkpYVjFaa1dHVkdUbE5OVlRWSVZqRm9hMWRIUlhwUmJrcFZWak5OZUZVd1duSmtNV1IxV2taa1RsWnRkekZYVmxaWFZqRlplVk5zVmxKaGJFcFhXbGQwWVZNeGNGZFhiRTVxWWtad2VsWnRNWE5WTWtwSlVXcE9WMkpZUWtSWlZFcEtaVlpPV1dGSFJsTmlXR2g0VmxkNGExVXlUbk5WYkdSWFltMVNXVlZ0ZUhkTlJsSnpWbFJXV0dKR2NIbFpNRnBoVmpKS1dXRklXbGROYWtaTVZUQmtSMU5XU25SU2JHUlhZbXRLZGxZeWRGZFdiVlpIVkd4a2FsSldjRkJXYlRGVFkwWldjMWR1U210TlZuQjRWVEp3UTFZd01YSmlSRkpYWWtkb2VsWnJaRXRqYlU1SlVteGFhVlpGVlhkV01WcGhZekZhVjFSdVRsUmhlbFpVV1d4YVMxZFdXbkZUV0doVFRXdGFNRlV5ZEd0aGJFcEdVMnhrV21KSGFIWldNRnBoVmxaT2NtUkdUazVXTVVwaFYxUkNZV0V5UmtoU1dHeFFVMGRTV1ZsVVJrdFVSbFkyVW10d2JGSnVRa3BXUjNocllWWktWVlp1WkZkV00wSk1XV3BHYTJNeGNFZGFSbHBvVFd4S2VWWkdXbUZaVms1SFYxaHNhMUo2YkhCVmJYUnpUbXhhV0dWR1RsaGlWVlkwVm14b2IxbFdXbk5qUkU1V1lsaG9jbHBGWkZOVFIwWkhXa2RvVG1KdFVUSldiWFJyVFVaVmVGSllhRmhYUjJoVldXMXpNVmRXYkhOYVJ6bFlVbTE0ZWxaWGRHdFdhekZaVVd0YVZsWnRhSFpXYWtGNFkyMU9SbUZHWkU1aGExbzJWbTF3UW1WSFVraFNhMlJZWWtkU1QxWnROVU5XVmxwWFZXdDBWbUpXV2toWk1GWnpWbGRLU0dGSVFscGhNVm96VmxWYVlXUkhVa2hTYkZKT1ZtNUNXVlpzWkRSaE1XUklVMnhhV0dKR1dsZFpiR2h2VFRGU1ZsZHVaRmRpUjFJd1drVmFhMkZIVm5KWGFsWlhZV3RhVkZWNlJtdGtSa3BaWVVkd1UySkZjRmxYVjNSaFpESkdSMk5GV21GU1YxSlVXV3RhWVdWc1dYbGpla1pvVmpCd1dWbFZXbk5XTURGMVlVZG9XbFpGV21GYVZWcFRZMnh3UjFWdGJHbFNXRUl5Vm14amVHVnJNVmRWV0doWVlteEtUMVZyV21GVU1WSlhWMjVPVDFadVFsZFdNakV3WVVaYVZWSnViRlZXYkVwVVZtcEJlRmRIUmtsWGJHUm9UV3hLVFZkVVNucE5WbVJYVTI1T1dHRjZWbFJaYTJNMVRteGFkRTFJYUU5U01ERTBWako0YTFaSFNuTlhiV2hXWWxSV1JGWXdXbk5rUjFKR1pFWm9VMkpJUWpSV1ZFcDNWVEpHUmsxWVNsaGliWGhXVm0xNGQyUnNXblJOVldScVlrVTFNRlZ0ZUd0aFZrcDFVVmh3VjJKR1dtaFpla3BQWXpKT1JsZHRkRk5pVjJoWlZrWldZV1F4VGxkYVJsWlNZbFZhYjFSWGRHRlhSbFY0WVVjNVYxSnRVa3BWVjNodlZqSktXV0ZGZUZkU1ZuQm9WakJWZUZZeGNFZFVhelZZVWxWd1RGWnRNSGhPUmxsNVVteGtXRmRJUW05VmJYaDNWMFphY1ZSdE9XdGlSbHBXVlcweE1HRnJNVmxSYTJoYVZsZFJNRlpVU2tkT2JGcDFZVVprVTJKSVFubFdiRkpIWVRGSmVWTnJiRlJpVjJoVVZqQmFTMWRzV2xoalJVNXJUV3hhV0ZaWE5VOVhSMFYzVGxac1dtSkdXbGhVYTFweVpERldjazlXWkU1U1JWcFpWMVJDVTFReFduUlRiR3hvVWtVMVYxbHJXbmRUUm13MlUydGtWRkl3Y0VoV1J6RnpZVVV4U0dSRVZsZGlXRUpJVmxSR1JtVkhTa2RoUmxKWVVqSm9iMVpVUWxka01WRjRWMjVPWVZKck5YRldiWGhoVFVad1ZsWnFRbGhTYTNBd1dsVmFjMWxXU2xkWGJrcFhVa1ZhVEZsNlJtRmpWbEp6V2tVMWFXSlhhRFZXTVZwclpXMVdTRlJ1VG1GVFJYQnZWVzB4VTFReGJIUmpNMmhQVW14d01Ga3dWakJXUlRGeVRsaHdWMUo2VmxCV01HUkxVMFpXY2s5V2NHbFhSMmhOVm1wR1lXRXhXWGhXYmtwaFVtMVNjRlp0ZUhkVFZscHlXa1JTYWsxcldraFZNalZQWVd4T1JsTnRSbHBXUlZwb1ZGUkdkMUpXU25SU2JHaFRWa1ZhUzFkV1ZtdGpNVkp6VjI1V1VtRXllRmxXYWs1VFlVWmFjVkpzV214V2F6VjVXV3RhUzJGSFZuUmxSbXhZVmpOb2RsbHFRWGRsUmxaelYyeG9hVkpVVmxsV1JtUXdXVlpPVjJORldsaGlXRkpYVkZaYWQxSXhXWGxrUjNSWFRWWnZNbFZzYUd0WGJVWnlWMjVLWVZKV2NFeFdNV1JIVTBkT1IxVnNUbGhTVlhCaFZtcEdZV0V3TVVkaVJtaFZZbXMxV0ZZd1pGTmhSbFp6V2taT1YxSnNTbGhaVlZaUFZrWktkR1JFVGxoaE1taFFWakJhUzJOdFRrZFhiRnBwVW10d1JWWnRjRXRUTVZwWFUyeFdVbUpIYUZoWmJGcExWVVprYzFkdFJsZE5helV3VlcxMGExZEhTbGhoUlRsYVlsUkdkbHBIZUdGak1YQkpXa1pXVGxaV1dUQldNblJYWVRKR1YxUnJXbXBTYlhoaFdXeG9iMDB4YTNsbFJrNVhUVmhDU0ZaSE1UUmhWa3AxVVZoa1dHSkdXbkpVVlZwaFYwWk9jbGR0Y0ZOU1ZYQlpWbTF3VDFVeVVuTlhia1pTVjBkb2NWWnRlSGRsYkZaWVpVaGtWMDFFUWpWWlZWcEhWakZhUmxOdVNsZGhhMXBMV2xaYVMyTnNjRWhqUms1T1ltMW9WbFpyV21wbFIwbDRWMnhrV0ZkSGVISlZiWE14VmtaU1dHTXphRTlTYlZKNVZtMHhSMVpYU2tkalNIQmFUVWRvVEZadE1VdFhWbEpaWVVaa1UxSldjRzlYV0hCSFZqSk5lR05GV2xCV01uaFVXV3hvYW1WR1dYbGtSbVJvVFZWc05WVnRkR0ZVYkZwMFZXeFdXbFl6VWt4V2FrWlRWMGRPUjFwR1pGTmlXR2hZVm1wS01FMUdVWGxUYkZwcVVsZG9ZVmxVUm5kamJHeFhWMjEwVkZJd1drZFVWbHByVmpKS1JtTkZiRmhoTVVwSVYxWmtUbVZIVGtaaVJsSnBWMFpLVlZkWGVHRlRNVlpIVjI1U2JGSnJOVmhaYkZwaFUwWlplVTVWZEZoaGVrSTFXVlZvUzFaV1duTmpSbWhWWWtad1YxcFdaRmRUUjFKSFdrWk9UbE5GUmpOV2JYaHJUa2RKZUZwSVVsUmhNbWh2VlcxNFMxZEdVbFpYYm1ScVlrWndlRlZ0TVRCaGJVWTJZa1pvV0dFeFZYaFdha0Y0Vm0xS1JWVnNaR2xYUmtwNVZrZDBZV014WkVkVGJrcFlZWHBXV1ZWc1VsZFdiR1JZWkVkR2EwMVhVa2hXYlRWVFlrWk9TRlZ0T1ZaaVZGWkVWVzE0VjJSRk1WVlJiRnBPVWtWYVdsWnNaRFJrTVdSMFVsaG9WMVpGV2xoWlYzUmhZVVpWZDFwR1pGUldiVko2V1ZWYWExUnJNVlpqUm5CWFRXNVNWRlZYTVZkU01VNVpZVWRHVkZKVVZuWldWM2hUWXpGa1IxZHVUbFppUjFKWlZtMTRkMU5HV25SbFJUbFdUVVJHVjFSc1ZtOVdNREZZWVVod1dsWkZXa3hWYWtaUFl6SkdSMVpzWkdsVFJVWTJWako0YTA1SFRuUlZXR2hxVWxkb1VWWnRNVzlqUmxwMFpVaGtUMVpzY0hoVk1uQlRZVlV4V0ZWdWJGVldiV2hJVmxSS1MxSXhUbk5hUm5CWFRURktiMWRXVm1GamJWWllWR3BhVTJKSGFGUlVWVnAzVTJ4a2MxWnRkR2xOVmtwNlZqSTFUMkZXU2tkalJtaGFZa1pLUkZSclduZFNWa3B5VGxkMFRsSkZXbGhYVmxaaFZURmtSMU5ZYkdoU2JrSllXVmQwUzJOc2JIRlNiWFJYVFd0d1NsWlhNVFJWTVdSSFUyeHNWMkpVUWpSVWEyUlhWakZ3U1ZOc1dtbFNWRlpaVjFab2QxSXhaRmRqUmxwV1lUQTFXVmxZY0VOT2JGWllaRWM1VjAxRVJqRlpWV1J2VjIxV2NtTkdRbFpOVjFKTVZXcEdkMU5IU2tkYVJrNVhZbXRLVEZadE1IaE5SMFY1Vm01U1YyRXlVbWhWYlRGVFZrWnNkR042Um1oU2JGb3dWRlphVDFaVk1WaGxSbXhoVWxad2NsWkhjM2hXTWs1SllVWmFWMlZyV2tsV2JYUnJVekZaZUZwSVNtaFNiV2h2VkZjeGIxUldaRmRXYlVaVVRXeEtTVlZ0ZEc5VlJscHpWMnhvVlZaRmNIWlZNVnBoVWpGV2NscEdjRmROUkZZMlYxUkNWMVl4V25SVGEyeFNZa2RvWVZsclduZFVSbFY1WlVkR2FrMVlRa3BYYTFwM1ZqSktSMkl6WkZkV1JXOTNXV3BHWVdSR1RuTldiV3hUVFVad1dWZFdVa2RaVjBaSFZXeFdVMkpGTlZsVmFrWmhVMVp3UmxkdE9WZE5SRVpHVm0xMGIxZEhSWGhYYldoWFZrVmFWRmw2Um10ak1rWklaRWQ0YUUxSVFscFdNVnBUVXpGU2RGWnJaRmhpYTFwVVdXeFdZV05zVm5SamVrWnNWbTFTZVZkcmFHdFdNVXB5WTBaa1drMUdjSFpXTUZwaFpFWldXVnBIUmxOU1dFSlZWMWh3UjJFeVVsZFRiazVWWWxkNFdGWnROVU5PVmxweldrUlNWazFWYkRSV01qVlBWMGRLU0dGSVRsWk5SMUpVVmpCYVUxWXhaSFZhUms1T1ZteFpNRlpzWkRCVU1WbDNUVmhLYWxKWGVGaFdiWGhMVWtaWmVXVkhSbE5pUjFJeFZUSjRZVlJzU25WUmJFWllWa1ZzTkZWcVJrcGxSbkJKVlcxc1UyRjZWbEJXUm1ONFlqRmtjMWR1UmxOaVdGSlBWVzB4TkZkR1drZGhSemxYVmpCV05WWlhlSE5YYlVwWlZXMW9WMkV4Y0hwWmVrcEhVakZTZEdOR1pHbFhSMmN4Vm1wS01GbFdVWGhWYms1VVlteGFVMWxVU2xOWFJsSllUbGM1YW1KSGVGZFdNakZIWVcxS1ZrNVZXbFppV0dob1ZtcEtTMWRIUmtsaVJtUnBWMFZLU1ZaWWNFZFRNazE0Vlc1V1YySkhhSEJWTUZaTFpXeGtWMVZyWkd0TmExcElWMnRvVDFZeVNsWlhiVGxWVm0xU1ZGWXhXbUZUUjFKSVQxZG9VMkV6UWpWV1IzaHZVVEZhZEZOcmFHaFNWa3BZVkZaYWQyRkdjRVpXV0doWFZtdGFlbGRyVlRGV01EQjVZVWRHVjJKWVVuRlVWbHBTWlVaa1dXSkdVbWxoTTBKYVYxZDBZVk14YkZkaVNFcGhVbnBzV0ZWdE1UQk9WbkJXV2tWa2FFMVZiRFJXTW5ScldWWktXRlZVUWxwV2JIQkxXbFZhVDJOV1duTmFSMmhvVFc1a05sWnJaRFJaVm14WVZHNUtUbFpzY0ZoWmExVXhZakZzVlZGdVpHaFNiSEF3V2xWa01GWlhSalpTYkdoWFRXcFdTRlpYZUd0VFIwWkpVMnhrYUdFd2NHOVdWRW8wVm0xV1dGWnJaR0ZTYlZKUFZtMDFRbVZHV2xkYVNHUmFWbXhzTlZVeWVGZFZNa1p6WTBkb1YySkdjRE5XVlZwYVpERmtjbVJIY0dsVFJVcEtWbGN4TkZReVJsZFhXR3hvVW14d1dGbFVSbmRqVm5CV1drVndiRkl3Y0VoWGExcHZWMFpKZVdGSE9WZFdNMUpZVlhwR2ExSXlTa2RpUjNCVFZqRktXbFp0TVRSa01VNVhWVzVPVjFaR1dsaFVWVkpIWlZacmQyRklUbGROUkVZeFdWVmFRMVl3TVhGU2EzaFdZV3RhY2xwRlpFZFNNWEJJWWtaT2FXRXdjR0ZXYWtvd1ZqSkZlRmRZYUZWaVIxSnhWV3hrVTFZeGJISmFSazVxVW0xNFZsVlhOV3RYUmxwelkwaG9WbUpVUVRGWlZFRjRWakpLUlZWc1pFNVdNbWcyVm14U1MxSXlUWGxVYTJSV1lraENjRlpyVmxaa01WcHhVVzFHYWsxck1UVlZiWFJoVmxkS1dHRkdVbHBoTW1oRFdrUkdhMk14V25Sa1JrNU9ZVEZ3TlZaR1dtRlpWbEY0V2tWb2JGSXlhRmhaYTFwM1RURnJlV1ZJVGxkaVNFSkhWakl4TkdGV1NsZGpSRlpZVmpOU2FGbHFSbHBsUms1ellVWkNWRkl4U2xwV2JURTBVekZTUjFkc1ZsTmlTRUp6VlcxNFlVMVdXblJsUm1Sb1ZtdHNORlV5Tld0V01WbDZVV3RvVm1WclduSldha1pyWTJ4d1IyRkhiRk5OVlhBMVZtdGFZVlpyTVZkYVJXUllWMGRvYjFVd1ZURmpSbFowWkVoT1RrMVdiRFZVVmxaclZqQXhjbU5HY0ZwV1ZscDJWbXhrUm1WSFRrbFRiSEJPWW0xb2VWZHJWbFpPVmxsNFdraEtUMVl5YUU5V2JURXdUa1phZEUxVVVtaE5SRlpKVlRGb2IxbFdUa2RUYkZaYVZrVndkbFpxUm5Oa1IxWkpXa1pvVTJKR2NEVldiVEI0VWpKS1NGTnJhR3RTUmxwb1ZteGtVMU5HYkZWU2JVWnJWbXRhZVZsVlduZFViRXAxVVc1c1dGWnNjR2hWTWpGWFl6SkZlbU5IUmxOaVZrcDNWbXBDVjFNeFVsZFhhMmhyVWpCYVYxbHNXbUZUUm1SeVlVVjBXRkl3V1RKV2JYaHpWbTFLU0dGRlVtRlNSVnBvVmpCa1UxTkdTbk5WYXpWWFRWVndTbFp0Y0VwTlZsVjRWVzVPV0dGc2NIQlZNRlozV1Zac1ZWSnVaR3hpUmtwV1ZXMHhNR0Z0U2tkalNHaFdWbnBHZGxsVlpGZGpiR1J6WTBaa2FWSXhTWHBXVjNCSFdWZFNSMVJ1VG1sU01taFVWRmN4YjFkV1dsaGpSVGxwVFZaS1NGbHJVbUZWTWtwV1YyNUdWMkpZYUdoYVYzaHpWbXhrZEdSR1drNVdia0poVmxaak1WbFdXWGxUYkd4b1VteEtWMWxYZEdGamJIQkdWMjFHYW1KSVFrbFpNRnBQVmpBd2VXRkdjRmROVjFFd1ZtcEdjMVl4WkhKYVJtaHBZVE5DV2xkWGVGZFpWbVJIVjI1U1RsWnJOVmxXYlRWRFVqRlplVTFVUW1oU1ZFWkdWVzE0YzFZeFdYcGhTRnBYWVd0R05Ga3hXbUZqYlVaSFdrZG9UbUpGY0U1V01uUmhXVlpKZVZSWWFGTmlhelZvVldwS05GZFdWbkZUYlRWT1lrWndlVmRyVWtOWGJGcHpZMFJDVjJKWWFHaFdSRVpoWXpKT1NWTnNXbWhoTTBJeVYxUkNZVll5VFhoV2JrNWhVbXhLVDFadE5VTlhWbGw0VldzNWFVMVdWak5VVmxwdlZtMUtkVkZzYUZWV2VsWlVXVlZhV21ReGNFWlhiWGhwVmxad1NWZFdWbUZXTVZsNFYyNVdVbGRJUWxsV2JYaGhZVVpzTmxGVVJtcE5WVFV4Vm0weFIxVXlSalpXYm1SWFlsUkZkMXBFUms5V01XUjFVMjFHVkZORlNsQldiVEUwWXpBMVYxWlliRTlXV0ZKWVZXcENkMU5XYkZaWGJUbFlZbFZXTlZaWGVFTldWMFY0WTBaU1drMXVhRE5WYlhoclpFZFdSMVJ0YkZOaVZHc3dWbTB4TUdFd05VZFdXR2hoVWxkU1ZWWXdaRFJpTVZaMFpVaGtXRlpzY0RCVVZtTTFWR3N4VjFkdWFGWmlWRVYzVmxSQmVHTnRUa1pqUm1SVFRUSm9iMWRXVmxabFJtUlhVbTVPVW1KSFVsaGFWM1JLVFVaYWMxVnJaR2hOVld3MFdUQldjMVpIU2toVmJHaFdZbGhvTTFZeFdtRlNNVnB6Vkd4T1RsWXhTa2xXYWtadll6SkdjMU5zYUZaaVIyaFdWbTE0WVdWc1VuUmxTRTVYWWxWYVIxcEZXbTloVmtwMVVXcGFXRlpGU25KVmFrWnpWakZrY1Zkc1RtaE5iV2hZVjFaa01GbFhSa2RpUkZwVVlUSlNWRlJXYUVOU01WSnpWbFJHVjAxV2J6SlpXSEJIVmpKS1ZWSlVRbGhXYkhCWFdsVmFUMWRYUmtoaVJrNXBWakpvV0ZadGNFTmhNa2w1VW10a1YxZEhVbGxaYkZaaFYwWlNWMXBFVWxoaVIzUXpWakl4TUZkR1NuTmpTSEJYVFdwV2RsWnRNVXRYVmxaWldrWmthR0V4Y0UxWGExWmhWakpOZVZOcmFGTmlSMUpZVkZaV2QxTnNXblJqUlhSUFVtMTRXVlpITlV0VU1WcHpZMGM1Vm1KVVJsUldSRVp6WkVkV1JtUkZOV2xTTVVwWlZteGtNR0V4V2toVGJHUllZbTVDV0Zsc1VsZFZSbXhXVjJ0MGFrMVhVbnBaVlZwWFZqRktWMk5GZUZoaVIxRXdXVlJLVG1WR2NFbFZiRTVwVjBWS2QxWnRNVEJYYXpGSFdrWm9hMUpyTldGV2JYaHpUbFpWZVdSSE9WZGlWWEI1VlRKNGIxZHRSWGxWYmxwV1lURndhRmt4V2t0a1JrcHpZVVpPVjFKV2NGaFdiWGhyVGtac1YxVnVUbGhpYkVweVdsZDBTMWRHV25KV2JscHJUVmRTV0ZZeU1UQldSa3B5VGxoc1dsWlhVblpXVkVGNFpFZEdSMkZHYUZkTk1VcHZWMnRTUjFkdFZraFVhMlJZWWtkb2NGWnNXbmRsVmxwWVkwVmtXbFpyTlVoV01uUnZWR3hhUmxOc1pGVldWa3BJVlRKNFYxZEhVa2hQVm1ST1ZsZDNNbGRXVm10aU1XUnpWMnRhV0dKR1NtRmFWM1JoWTJ4c05sTnJaRk5OVlZwNlZsZDRUMVJ0U2xoaFIwWlhZV3RhY2xScldsWmxSa3BaV2tVMVZGSXlhSGhXVjNoaFdWWmFWMkpJU21GU2F6VllWVzB4TkZkc2EzZFdiWFJYVFVSR1dWWlhOWE5XTURGeFVWUkdXbFpXY0doWk1qRlBVbFpLYzFkc1pFNU5iV2hHVm0weGQxTXhUWGhYYkdSVVlrWmFVMWxzVm1GV1JsWnpWMjVrV0Zac2NGbFpNRlpyWVVVeGMxTnNhRmRXZWxaVVZsUktTMUpyTlZkVmJIQlhVbFJXUlZacVNqUlpWMDV6V2toU1UySlhhRTlWYTFwaFUyeGFkRTFFUmxWTmExcFlWVEkxVDJGc1NuUmxSMFpYVFVkb1JGcFhlSE5qVmtwMVZHMXdUbFp1UVhoV01uUmhWVEZWZVZOc2JGWlhTRUpaVm0xNFlXUnNiRlZTYlhSVFRWVTFXbGRyV210aFIwcEdZMFpzVjFKc2NISlpha3BQWXpGa2RWSnNTbGhTTW1oVlZrWmtlazFXVGxkV2JsSk9WbGRTVjFSV1ZuZFhSbXQzWVVoT1dGSnNjRWRaYTFKVFZtMVdjbGRyZEdGV1ZuQnlXa1phVDJOck9WZGFSMnhYWVROQmVsWnFSbUZWTVVWNVZWaG9hVkp0VWxsWmJYaExWREZWZDFwSE9XcGlSa3BZVm14b2IxUXhTbk5qUldoYVZsZE5NVll5ZUdGamJVNUhZa1p3VjFadVFsVldha28wV1ZaS2MxcElSbFZpUjFKdldWUkdkMDVzWkZWVGFsSnJUVlUxUjFReFdtOWhiRXB5VGxoQ1ZtSlVRVEZVVkVaaFkyeHdSVlZzWkU1V2Exa3hWbGN4TkZsV1VuTlhibEpXWW10S1YxbFVSbmRVUmxsM1YyeE9XRkl3TlVkV01qRXdWR3hhZFZGcVdsZGlXR2gyV1dwR1dtUXdNVmxUYlhCVFZtNUNXVlp0Y0U5aU1rNXpWMnhXVkdKSFVuRlVWbVJUWld4c2NsZHRkR2hXYkhCSFZURlNRMVl4WkVsUmEyaGFWa1ZhWVZwVldrOWtWbHB6Vm0xc1UySnJTak5XYkdONFRrZFJlRnBHWkZoaVIyaHpWV3BDWVdOc1VsZFhhM1JZVW14c05WUnNWVFZXTURGeVkwWmtWMDFxUVRGV2JGcGhaRVpXYzFWc1drNVdia0p2Vm1wQ2ExVXhUa2hWYTJScVVtMVNiMVJVUWtkTk1WbDRWMnhrYVUxVlZqUldNV2h6VmtkS1NHVkhPVlpoTVZWNFZtMTRjMk15UmtoUFYyaFRZbGhSTUZacVNucE9WMFp6VjI1S1dHRnJTbUZXYkZwV1pVWmFjVkZZYUZkaVZUVkhXa1ZhYTJGV1NuSmpSVEZYVWpOU2FGbDZSbHBsUjA1R1YyMW9VMkpGY0hkV1Z6RTBaREpSZUZkc2FFNVdSa3B5VkZaa1UxTkdiSEpYYlRsb1lsWmFlVll5ZUc5V2JVcFZVbFJDVjJGcldtRmFWbVJYVTBkU1NHRkhiRk5pYTBreFZqRlNRMkl5VVhoWFdHaFVWMGhDYjFVd1ZuZFpWbHAwWlVoa2FGSnNjSGhWTW5NMVZUSktWMU5yYUZoaE1sSjJWa2N4UjA1c1ZsbGFSbVJPVmpKbmVsWlhjRWRaVjFKSFYyNU9ZVkpzU25CVmFrNXZaVVphV0UxVVFtdE5WMUpZVm0wMVIxVXlSWHBWYkd4WFlsUkdWRll4V25kU2JIQkZVV3hrVjFaRldrZFdiVEV3WWpGWmVWTnNWbGRoTW1oWVZtdFdkMVJHV1hoWGJHUnJWbXR3ZWxadGVHdGhWbHB5WTBaYVYwMXVhR2hYVmxwclpFWmFjMWRyTlZkaVdHaHZWbGN4TkdReFVYaGlSbFpWWVRBMVZWVnRNVk5XYkZaWVRWaGtWVTFXY0hwWmExSlRWakF4V0dGRVRsZFdla1pNVlcxNFQyUkdTbk5qUm1ST1RWVnNObFpzVWtOWlZsbDVWR3hrVkdKc1NuSlZhazVUVjBac2NsZHVXbXROVjFKNlZtMHhSMVpWTVZkVGJteFZWbXh3YUZsWGVFdFNNV1J6WVVad2FFMXNTbEZXUjNSaFZURmFjMk5GWkZSaVdGSlBWV3RXWVZkR1dYbGtSM1JwVFZaS2VWUldhRTlXUjBwSlVXeHNWMkZyTlhaYVIzaGhWbFpPY21OSGVGTmlWa2w0Vm14amVFMUdXa2RUV0doVVlraENXVlpxVGxOaFJtUlhWMjEwVTAxWFVucFpWV1F3VlRGS1ZtTkdiRmRTYkZwVVZXcEtWMVl5UlhwYVJtaHBZbFpLV1ZaR1dtRmthekZ6VjI1U2ExSjZiRmxWYlhoM1pXeHJkMXBIT1ZkTlJFWklXVEJhYjFkck1YRlNiRkpXVFVad1RGbDZSbmRTTVhCSVlrZG9UbE5GUmpWV2JUQjNaVWRSZUZOWWJGTlhSMmhXVmpCa2IxWldXWGRhUnpsWVVtMTRNRnBWVmpCaFZURlhWMjV3VjFZemFISlpWM2hMWXpKT1NXRkdXazVoYTBZMFZtdGtORmxYVFhsVWExWlNZbFZhVkZacVJrdFRWbHAwVFZod2JGSnNiRFJWTWpWSFZtMUtSMk5JUWxaaGEzQjJWRmQ0V21WR1pIUlNiRkpPVmpGS1NWWnRNREZXTVZaMFUydGthbEpVYkZkWmJHaHZWMFpTY2xkdFJtdFNNRFZIVjJ0a2QxUnNXblZSYkd4WFZucEJlRlpxUm5OV01VNVpZMFpLYUdWdGVGbFhWM2h2WWpBeGMyTkZWbE5pVlZwVVZGWmtVMlZzV2tobFIwWlZZa1p3TUZwSWNFZFdNVnBHWWpOa1dsWkZXbkpWTUZwTFpGWk9jMVZ0YkZkTmJXaGFWakZrTUZsWFVYaGlSbVJxVWxaYVZGbHRjekZYUmxKWFdrWk9iRlp1UWtkWGEyaHJWbGRLVmxkVVNsZGlXRkYzVmpCYVdtVnNWblJoUm1Sb1lUTkNTVlp0Y0VkVU1XUllVMnRvYUZKck5WUlpiWFJMVjJ4WmVGZHRkRTVTTURFelZHeFdhMVl5U25OVGF6bFhZbFJHVkZac1dsZGtSMVpHWkVkNFYySkhkekZXUmxwVFZURmFjazFZU21wVFIzaFhWRmMxYjJWc1duRlRhM1JYVm10d1ZsVlhlR3RVYlVweVRrUkNWMVl6UWtoYVJFWktaVlpPY21GSGNGTmhlbFpaVmtaYVYyUXhaRWRYYmtwWVlsaFNjMWxzV21GU01WSnpWMjEwV0ZJd1ZqVlpWV2hMVm0xR2NrNVdVbHBoYTFwWVdrVmtVMU5XY0VaT1ZrNXBVMFZLWVZaclpEUldNVkY0VjFoc1ZHSkdjSEZWYkdRMFdWWmFjMWR0UmxkU2JIQXdXWHBPYjJFeFdYZFhhMnhhVmxad00xWkhlR0ZrVmtaeVRWWm9hRTFXY0c5V1dIQkxWVEZPUjFOdVNsaGhlbXhZV1d4YVMyUnNXa2RYYlhST1VsUldTRll5TlZOVWJGcEdVMjFHVjJGclNucFViRnBoVWpKR1NFOVdhRk5OUmxreFYxWldZVlV4V1hkTlZXaFdWa1ZLV0ZsWGRHRmxiR3Q1WlVoa1ZGSlViRmhaTUZwcllWWmtTR0ZHYUZkaVIwNDBWR3RhYzFkR1RuSmFSbEpwWWtWd2VWWlhkRlpOVm1SSFZXeG9hbEpYVWxWVmJURTBWMVpzTmxSdE9WaFNhM0I2VmpJMWIxWnRTbGxoU0ZwYVZsWldORmw2Umt0WFZuQkhXa2RzV0ZKVmNFNVdiR2gzVWpGUmVGZFlhRlJpYXpWd1ZXcENZVlpHYkhOWGEzUlhWbTFTV1ZwRll6VlZhekZYWTBab1YwMXVhSEpXYlRGR1pWWldkRTlXVmxkTk1EUXdWa2QwWVdFeVRuTmFTRlpWWWxkb1ZGbFVUa0prTVdSWFZtMDVVazFXY0RCVmJUVkxZV3hPUjJOSFJsZGlSbkF6V1RKNFlXTldTbk5hUjNCcFUwVktTbGRyVmxaTlYwWkdUVlpzVW1FelFsaFpWM1IyWkRGa1YxcEZXbXhTYmtKSFdWVmFUMWRHVGtaVGJHaFlWak5TY2xScldscGxSMHBKVkcxb1UyVnRlSFpXVnpBeFVURmtWMk5HV21oU1ZHeFlWRmQwZDFOV1dsaE9XR1JZVWpCV05Ga3dhRXRXTVVvMlVtdGtZVll6YUVoWk1qRlRVakZ3UjFwSGJGUlNWV3cxVm1wS01GVXhTWGxTV0doVllUSlNWbGx0ZEhkaFJsWnhWR3RPVjFKc1NsbFVWbU0xWVVaS2MyTkZhRmhoTW1oeVZsUkJlRll4V25GVmJIQk9VbTVDYjFacVFtdFRNbEpIVm01T1YySkhVbkJXTUZWNFRrWmFSMVp0UmxkTmJFcEpWbTEwWVZWR1dYbGhSbWhhWVRKUmVsUldXbXRXTVZwMFVteHdWMkpIZDNwV1JscGhZakZhYzFwRmFGWmlWVnBoVm1wT1UyRkdWbkZTYm1SVFZtdGFWbFZ0ZUc5V01rcEdZMFJhV0Zac1duSlpla3BIVW1zeFYySkdTbWxTTVVwWlYxZDRiMUV4U2tkaVJsWlVZVE5DYzFadGVFdGxWbVJ5VjIxR2FGWnJiRFJWTW5oM1YwWmFObEpxV2xWV2JIQlRXbFZhVjJNeGNFZGhSMmhPVFZWd1lWWnNZM2RsUlRWSFYxaG9XR0pzU2s5V2ExWkxWMFpTV0dSR2NFNWlSbG93Vkd4b1QxZEhSalpTYTJoWFRXcFdNMVpxUVhoa1YwWklZVVprVGxKdVFsbFhWRWw0VWpGSmVWSnJaR0ZTTW5oVlZXeFdkMlJzV25GVGFsSm9UVVJXU0ZZeGFITldiVVY1WVVaU1dsWkZjRlJaTVZwWFpFVXhWMVJzYUZOaVdHZDNWMnRXVjJFeFVYbFRhMlJxVTBoQ1dWbFVTbTlqYkZwVlVWaG9hbUpHY0hoV2JYaHJWakF3ZUZOdWJGZGlXRkp5VlhwS1RtVkdVblZXYkZKcFVtNUNkMVpxUWxabFJUVkhXa1pvYWxKWFVsZFVWbHAzVjBaV2RFNVZkR2hpUlhCV1ZtMDFRMVp0U2xWV2EwNWhVa1ZhY2xreWVHRmtSMUpJWkVVMWFFMHdTa3BXYkZKSFlqSkZlRlZ1VGxoaE1sSlZXV3RrYjFac1duUk5WazVyWWtkME5WcFZaRWRXUmtsNFYydHNZVkpXY0ZCV1IzaGhWbFphV1ZwR1pGTlNWbkJ2VmpGYWExSXhXWGhhU0VwWVlrZG9jRlZ0ZUhkWFZtUlhXa1JDVkUxcldraFphMUpoVmtkR05sWnVUbFppV0dnelZGWmFWbVZYVmtkYVIyaFRUVlp2ZDFkc1ZtRldNV1JIVjJwYVUxZEhVbGRhVjNSaFV6RndWbGR0ZEdwTmExcEhWR3hhYjFaR1NsWmpSa1pYWWxSR00xVlVTbEpsUmxKeVdrWm9XRkl6YUZGV2JYaHZWVEZhYzFWc1pGaGliVkpQVm0xNFlWZFdVbGRXYlhSWFRVUkdlVmt3Vm05WGF6RkhVMnhDV0Zac2NFdGFWekZIVTFkT1IxcEhhR2hOV0VJMVZqRlNTbVZHVVhoVWEyaFhZVEpTVmxsc1pHOWpNV3h5VjJ4d2JHSkdjREJhUlZwUFZUQXhXR1ZHYkZaaVIyaDJWakJhYTFOSFZrZGhSbkJwVjBaSmVsWnFRbUZYYlZGNFkwVmtWV0pIYUZSWmExWjNWMVphY1ZOVVJtaE5hMXBJVlRJMVQyRnNTa1pUYkZwWFlsaG9NMWt5ZUdGamJHUnlaRWR3YUdWc1dtRlhWM1JoWkRKR1JrMVdiRkppUjNoWlZtMTRkMkZHVlhsTlZtUlRUVlpLTVZadE1VZFZNa3BYVTI1a1YyRnJTbkpaYWtwS1pVWndTVk5zV21oTk1VcFpWa1phVjJNd05VZGhNMlJYWWxoU2IxVnRkSE5PYkZwWVpVWk9WMVpzY0ZoWk1GSlBWakpLV1dGSGFGWmhhMXB5V2tWa1UxSXhaSEpPVm1SWFVteHdTMVp0TVhkU01rbDVWRmhvVmxkSGFGbFphMXBoWTBaV2RFMVhPVnBXYlhoNVZqSXhSMWRHU25OVGJuQlhUV3BHU0ZZd1drcGxSbVJ5WWtaV1RsWnVRbmxYVmxwaFdWWmtWMUp1VWxOaVIxSndWV3BHU21Wc1duSlZhMlJxVFZac05GZHJXbk5oYkVsNVlVWldWbUZyTlhaWmFrWmhWMGRTUjFwR2NGZGlWa3BKVjFaU1QyTXlTa2RUYmtwUFYwVmFWbFp0TVc5U1JsVjNWMjEwYW1KR2NGWlZiWGhyVlRKRmVsRnNhRmhXUlVwWVZGVmFXbVZXU25WVGJHaHBVbXR3V0ZadGRGZGtNVTE0WTBaYVdHSkZOVmxXYWtKaFUwWnNWbGR0T1ZaTlJFSTFXVlZhWVZZd01WaFVhbEpWVmxkU1UxcFZXbmRTTVhCSVlrWlNVMVpHV2xwV01XUTBWakZzV0ZOWWFGZGliRXB6VldwQ1lXTXhXblJsU0dST1VteEtlbGRyVWtOV01ERnlZMFZrV2sxSGFETldha0Y0WTFaYWRWZHNaR2xXUlZwTlZtMTRZVmxYVWxkVWJrNWhVbTFTVkZac1duSmtNVnAwWTBWa1dsWnJiRFZXUnpWUFlXeEtXRlZzYUZwaVIxRXdWbXRhVTFZeFduVlhhelZwVW0xM01GWnFTWGhTTVdSelYyNVNWbUZyU2xoWmJHaHZZMnhzVmxaWVpHeGlSVm94VlZkNFlXRldXa1pYYkZaWVZrVkthRmRXWkU5ak1XUjFVMjF3VTAweWFIZFdWM0JIVXpBMVYxZHVUbUZTUlVwUFZXMTRjMDB4VWxkWGJVWm9WbXR3U0ZVeWVHOVdNa1p5VGxoYVlWWXphSHBXYlhoclkyMVNTR05GTlZkTlZXd3pWbXRTUjFsV1dYaFhXR3hYWW10d1dWbFhkSGRYUm14ellVYzVhRkp0ZUZaVmJYaDNZa1pLYzJORVJsWk5ha1pJVmxSQmQyVkdUbk5SYkdScFZrVkdORlpXVWtKTlYwMTRZMFZrYUZJelVsUmFWekUwVm14YVIxZHRkRlpOVlRWWVZteG9jMkpHU1hkWGJHeFdZV3RLTTFVeFduZFdiR1IwWkVab2FWWllRa3BYVmxadldWWlplRk5zWkdwU01taG9WV3hrVTFkR1ZuRlNiWFJyVWpGYVNGZHJXbXRWTVZwMVVXdHNWMkpVUWpOYVJFcFhVMFpPV1dGR1pGaFNNMmhWVm1wQ2IxRXhWWGhYV0dSaFVtczFXVlZ0TVRSbFZtUnlWbFJHYVZKcmNEQmFTSEJMVm0xS1dXRkVUbHBoTVhCTVdrVmFWMk15VGtkalJUVlRZbXRLZGxZeFdtRmhNVXAwVm01T1UySnJOWEJWYlRGVFZrWnNjMVpZYUU5U2JWSlpXVEJXYTJGck1WZGlSRlpYVWpOU2NsWXdaRXRUUjBaSVQxZEdWMlZyVlhkWGJGWmhZVEZrU0ZaclpHRlNNMUpQVm14U1YxTldXWGxrUnpsVVRWZFNTVlV5ZUhOV2JVcEhZMGRHVjAxSGFFUlZNRnBoWTFaS2RWTnRkRTVXYkhBMlZqSjBZV0V4VW5OVGExcFlZa2Q0V1ZaclZrdGtiRlkyVW0xR1dGSnJjRnBaVldSM1ZURmFTR1ZIT1ZkaVZFVXdXa1JHYTFJeVJYcGlSM2hVVWpGS1ZWWkdXbTlSTVU1WFlraEtZVko2YkZaWldIQkhVakZyZDFkc1RsZE5hM0JXVlZkd1QxbFdXbGRXV0doV1RVWndXRll4WkV0U01WcDBZVVUxYVZKWVFtaFdha1pxWlVVeFNGVllhR0ZTYlZKd1ZUQlZNVmRHYkhOV2JVWllVbXhhTUZwVmFHdFViRXAxVVd4a1dsWlhVWGRXTUZwS1pESk9SbUpIUmxOV2EzQlJWbTF3UzFNeFdsZFRiR3hoVW0xU1QxVnFSa3RVVmxwWVkwVjBWRTFWY0ZoV2JUVlBWMGRHTmxadVFscGhNVm95VkZkNFlXUkZNVmxhUmxKT1ZsUkZNRll5ZEdGaE1WbDVVMjVPV0dKSGVHRlpWRXB2VWtaWmQxZHNUbGRXYXpVd1ZERmFWMVl5U2tsUldHUllZa1phY2xWcVJtdGpNV1JaV2tVMVYxSnNjRmhYVjNodlZUSk9jMkpHYUd4U1dFSnpWbXBDWVZJeFVYaFhiWFJWWWtWd2Vsa3dWWGhYUmxsNlVXdG9XRlp0VWxCWmVrWjNVMVpXYzFSdGJGUlNWWEJhVmpGa05HSXlTWGhhUm1SWVYwZDRjbFZ0TVZOWlZscDBaVVYwYkdKR2JEVlViRlUxVjBaSmQyTkZiRmRXZWtaSVZqSXhSbVZXVm5OVmJVWlRUVEpvYjFaWGVHRlRNbEpIVTI1U2ExSnJOVmhWYlhoM1YxWmFkR1JIZEU5U2JGWTBWakZvYzFaSFJYbGhTRXBoVmpOU2FGWXhXbk5XVmtwMFVtMW9VMkpZYUZkV1ZFb3dZVEpHZEZKcVdsTmlSMmhaV1ZSR2QyUnNiRlphUlZwclRXczFTRmxWV210Vk1rcFdUVlJTVjJKR1NreFZha1pLWlVad1NWTnNaR2xTVkZaM1ZsUkNWMU15VmxkWGEyUllZbGhTVjFSVlVrZFRSbHAwVGxaT2FWSnJOVWxXVnpBMVZtMUtSMU5yYUdGV00yaFhXbFprVDFKdFVrZGFSVFZvVFRCS2FGWnRlR3BsUjBsNFdrVmtXR0pyTlhGVmJHaHZXVlp3V0dSSFJrNU5WbFkwVmpKNGEyRnJNVmRUYWtKYVlURndkbFpVU2tabGJFWnpXa1prYVZkR1NtOVdNVnBoWXpGa1IxWnNiR2hTYkZwd1dWaHdWMWRzWkZoa1IzUnBUVlpHTkZac2FHdFpWa28yWWtoR1dtRXhjRXhXTUZwYVpWVTFWazlXVms1V2JrSTJWbTB4ZDFZeGJGZFRiR2hXWVRKb1lWWnNaRk5VUmxaMFRWVTVVMkpWV2toWGExVXhZVmRLV0ZvemJGZGlXRUpNVkd0YWMxWXhUblZWYkZab1RXeEtWMWRYZEdGWlZtUkhWMjVTVDFaVk5WQlphMXAzVFVad1ZscEZaRmRTVkVaNVZGWlNVMWRIUlhsaFJsSmFZVEZ3VEZwRldsZGtSVGxZVW14a1RrMXRhRzlXYTFwaFdWWnNXRlZyYUZWaE1YQnhWV3BPYjFaR1VsZFdiSEJPVW14d01GcFZZelZoYXpGWFkwVnNWazF1VW5aWmExcExUbTFLUjFwR2NHbFNhM0JJVmtaV1lWZHRWa2RhU0ZKVFlsaFNWRlpyVm1GWFZscFZVMWhvVGxKc1NucFdNV2gzVm14YVJsZHNhRlppV0dneldWVmFjMVpXU25OWGJYUk9Va1ZhV1ZkV1ZtRlpWMFpZVTJ4c2FGSnRlRmxXYWs1dlpHeHNjVkpzWkZOTmEzQklWMnRhYjJGSFZuUmxSbFpZVmpOU1YxUldWWGhXTWtwSlUyeG9hVmRHU2xoV1JtUXdaREZPUjJFelpGaGlSMUpZVkZaYWMwNXNWbGhrUnpsWVlrWndSMVl5ZERCWlZscHpZMFpDV2sxcVJreFZha1pYWkVkS1IxUnJOV2xXTW1RMVZtMHhNRmxXVlhoVFdHaFZWMGQ0VjFsdGN6RlhWbXh5V2tjNWFrMVdXakJaTTNCSFZqRktjMU5zYkdGV1YxSklXV3RrUzFJeVRrbGpSbkJYVmpKb1VWZFdXbUZUTWs1MFUydFdXR0pIVWxoVVZFcHZUV3hhZEdWSFJscFdNREUwVjJ0b1IxWlhTbFpYYkdoVlZrVndkbFJzV210amJGWnlaRVpPVGxaWVFYZFdiR1F3WVRGc1YxTnNWbGRpUjJoaFdXdGFTMlJzVW5OWGJVWnFUVmQwTmxsVlZUVlZNa3BHVjFSQ1dGWXpVbWhaVkVaclUwWk9jbUZIYUZOaVZrcG9WbTEwVmsxWFVuTlhia1pUWW1zMVdWVnFSa3RUVmxaMFRWaGthRlpyYkRaWFZFNXpWakZhTmxGWWFGcFdSVnBYV2tSQmVGZFdUbk5oUjJoT1lsZG9XbFpzWkhkVU1WSjBWbXRrYVZKdFVsbFphMmhEWXpGYWNWRnRSbFJTYlhoWFZqSXhNR0ZHV25OalJXUldUVmRvTTFZd1pFWmxSazV5WlVaa2FHRXhjRTFYVkVwNlRWWlplRnBJVW1oU2F6VndWVEJXUzFsV1duTmFTR1JVVFd0c05WVXhhRzlYUjBwSFYyeE9XbUV4Y0ROV1JFWmhZMVpHVlZKc1VsTmlTRUYzVmtkNFlWUXlSbGRUYmtwUFZsZDRXRlpxVG05bGJGcHhVMnQwVjFacmNGWlZWekZIVmpBd2VXRkVXbGRpVkVVd1dWUktUMk5yT1ZkaFIyaFRZbFpLV1ZaWGVHRmtNV1J6VjFob1ZtRXdOVmRVVmxaWFRrWnNjbGR0ZEZkU01IQkpXVlZqTlZadFNsbFZhM2hYVFVad1dGa3llR0ZrUmtwelZteE9hVmRIVGpWV2JHTjNaVVpKZVZKdVRsaGlhelZaV1cwMVExbFdVbFpYYm1ScVlrWndlRlZXYUc5aE1VbDNWMnRhVjJKWWFISlpWbHBoVW14a1dXTkdaRmRpVlRRd1ZtMXdSMVF4U1hoV2JsWlhZa1p3Y0ZWdGVIZGtiRnBIV2tSU1ZFMXNXa2hXTW5odlZHeGFSMU51U2xWV2JWSlVWVEJhWVZkSFZrZGFSbHBPWVRGWk1GZFVRbTlUTVZwWFYyNU9hbEpGTlZaV2JGcDNWa1phZEUxVlpGUlNWR3hZVmpKek1WVXhTbGRpZWtaWFlUSlJNRlpVUmtabFJtUlpZVVpTV0ZORlNsaFhWM2hyWWpGa1IxZHVUbGhpYlZKaFZtMDFRMUpzVm5STlZFSm9ZWHBHZVZZeWRHOVhSMFY1Vlc1d1YyRnJXa3haZWtwUFVteGtjMXBIYkZkU1ZsWXpWbXBHWVdFeFNuUldhMlJxVWxkU2IxVnRlR0ZpTVZKWFlVVk9iRlpzY0ZsVVZsSlRWa1V4VjFKcVVsZE5hbFpRVm0weFMxTkdWbk5XYkhCb1RWaEJlbFpxUm1GVk1WbDRWbTVLVldKWGFGUldhMVpoVjFaa1ZWRnRSbXBOVm5CNVZGWm9WMkZHVGtkalIwWmFWa1ZhTTFaRlduZFNiSEJHV2taU1UyRXpRalpXTW5ScllqRlNjMWR1VGxoV1JVcFlXV3RrVW1ReFpGZGFSVnBzVW0xU1dsbFZaRWRXUmtweVkwWldXRll6YUhaV1ZFWmhVakZXYzFwR2FHbGlWa3BXVjFkMGExVXlWbGRYYmxKc1VqQmFWbFJXV25kbGJGcDBZMFU1VjFac2NIcFdNalZoVjJ4YVJtTkdhRnBOYm1oUVdYcEtSMUl4Y0VoaFIyaHNZa1pzTlZacVNqQmhNRFZJVkZoc1ZXSkhVbFZaYlhoTFkyeFdkR1ZGZEZkU2JYaGFXVEJhWVdKR1NuTmpSbHBXVFdwV00xWkVSbUZqTWtwRlZteGFUbUp0YURaWFZsWmhVMjFXV0ZKclpHbFNiVkp2V1Zod1YwMXNaSEphUkZKcVRXczFXRlV5TlU5V1YwcEdUbFU1V2xaRk5VUlZha1poWTFaT2NWVnNWazVoTVhCWlZsUkdiMkl4V2toVGJsSm9VbTFvWVZscldrdFNNVkpXVjJ4a1QySkZOWHBYYTJSM1ZHeFplRk5xVmxoV2JGcHlWR3RhVm1Rd01VbGhSbEpwVWpGS1dsWnRjRTlWTWtaSFkwVldWR0pIVWxoVVYzUlhUbXhrY2xkdE9XaFdNSEJZVlRKNGQxWXhXWHBSYTFKaFVrVmFVRlZxUm10WFYwcEdUMVprV0ZKcmNGcFdNV1EwVmpGc1dGWnNaR2hOTWxKWVdWZDRTMWRHYkZsalJXUlVVbTEwTTFZeWRFOVhSMFkyVW01b1ZtSllVblpXYlhONFUwWldjMVZzV21oaE1YQlZWMWh3UjFVeVRYaGpSV1JWWWxkNFZWVnNWbmRrYkZwMFRVaG9hMDFWYkRWVmJHaHJWREZhV0ZWc2FGZE5SMUoyVm14YVdtUXhjRWhQVm1ScFVqTm9WMVpVU2pSVU1XUkhWMjVPYVZKRk5WbFpWRVozVlVaWmQxZHRSbXRTTVZwSVZqSjRhMVV3TUhoVGJFWllWbTFPTkZWNlJrcGxSbEoxVkcxc1UySnJTbEJXUmxKRFV6Rk9WMWR1VW10U00xSlZWRlpWTVZOV1duUmtTRTVvVm10d01GWlhjelZYYlVwVlVtNWFZVlpzY0hKV2FrWmhaRVpLYzJOR1pFNVNSbFl6Vm0xMGEwMUdXWGhXV0d4VVlUSlNjVlZ0TVc5V2JGcHlWbXQwVlZKdGVIaFZiVEZIWVRGSmQwNVZaR0ZTVm5CVVZrZDRZV1JXUm5OaVJtUlhaV3RHTkZaWGNFZFpWMUpIVkc1S1lWSXpRbFZWYkZKWFlVWmFkR1JHWkZwV1ZFSTBXV3RvUjFVeVNsWlhia3BXWVd0RmVGVnFSbXRqYkhCSVQxWldhVlpZUWtoWFZFSmhZekZaZVZKWWJGVlhSMmhZVld0V1lXTnNWWGRYYXpscVRXdGFTVnBWV2s5aFZrcFpVVzA1VjAxWFVUQlpha1pXWlVaV2NscEdhR2xTTVVwYVYxZDRWMWxYVG5OV2JrNVdZVEpTVlZsclpGTmxWbHB6Vld0a1YwMUVSbmxXYlhCVFYyMUdjazVZU2xkaGEzQk1WbXhhUjFkWFJrZGFSazVUVm01Q05WWnNVa05aVmxGNVZXeGtWbUpyTlZkWmJHUnZZekZzYzJGSE9WaGlSbXcwVmpKNFQxVXdNWE5TYWxKWFZqTlNjbGRXV2t0a1JsWnpZa1p3YVZKc2NHOVhWRW8wVmpKTmVGWnVTbUZTYldoVVdXdG9RMU5zWkhOV2JYQlBWbXhzTTFSV2FFdGhiRXBZWVVkR1dsWXpUWGhaTW5oYVpERndSbGR0ZUZOaVZrbDRWbFJLTkZZeFdYaFhibFpTWWxkb1dWbFVSa3RSTVhCV1YyMTBWMDFXU2pGV1Z6RjNWVEpHTmxadVpGZGhhMHB5V1dwS1NtVkdaSFZWYXpWWFVtdHdkbFpHWkRCak1EVkhWMjVTYTFJelVsbFZiVEZUVTFad1ZtRkZPVmRpVlZwNVZUSXhiMVl5UlhoalNIQmFUVzVvTTFWcVJsTmphelZYV2tkc1dGSnJXVEpXYlRGM1V6QTFTRkpZYUZoWFIxSlBWbTE0ZDJOV1ZuUk5WemxhVm14S1YxZHJWVEZVYkZwellrUk9XR0V4V21oWmExcExaRVpXY1ZKc1drNWliV2g1VjFaV2ExSnRWa2hVYTJSVFlrZFNXRlJVUWt0VFZscHlWV3QwVmsxV2JEUldNalZYVm0xS1dHVkdVbHBYU0VKWVZqRmFZVmRGTVZWVmJYUk9Va1ZhTmxacVNURlRNV1JJVTJ4YVdHSlZXbGhaVjNSR1pVWlNWbGR0UmxkTmExcEpWREZhYjFVd01VbFJhbFpYWVd0dk1GWnFSbXRqTVdSWlkwWmFhRTB5YUZsV1JsWmhaREZhUjFkWVpHRlNhelZVVkZab1ExSXhVWGhYYXpsb1ZteHdlVmx1Y0VkV01rcFZVV3BPWVZKRlJYaFdha1pyVjFkR1IxVnNhRk5OVlhBMFZteFNRMkV3TlVkaVJtUldZa1p3V1ZsdE1WTldSbFowWlVoa2JGSnNXbGhaVldNMVZtc3hSVkpzYkZkV00wSkVWako0WVZZeVRrbFRiSEJYVmpGS1NGZHNWbXRVTVVsNFYyNU9ZVkl5ZUZoVmJGcFhUVEZaZUZkc1RsUk5WbFkwVlRGb2IxWlhTbk5YYkZaYVYwaENlbFl3V21GamJHUjBVbXhvVjJKV1NscFhiRlpxVGxkR1JrMVZWbGRpYmtKWVZGZHdWMVpHYkZobFJYUllWbXhhZWxWWGVHRmhSMFYzWTBac1YxSXphR2hXYWtwVFVtczFWMXBHVm1sU01VcFZWa1pXWVZkck1WZFhiazVhWld0YVZGUldXbmROUmxaellVYzVXRkl3Y0ZsWlZWcHZWbFphYzJORVRtRldNMmhvV1hwR2EyTnRVa2hrUm1ScFlUQndTMVl4VWtOaE1rMTRWbGhzVkdKcmNGVlphMlJ2VjBac2NsZHJkRlZTYkVwWFZteG9iMVpHU25KalJFWlhWak5vVkZsVlZYaFhWa1p6VW14a2FHRXdjSGxXUjNSaFl6RlplRnBJVmxWaVIyaHdXV3hhUzJWR1pGaGtSM1JQVW14c05GZHJhRXRXTWtwV1YyNUNWbUZyU2pOVmFrWmFaVmRXU0ZKc1pHaGxhMWw0VjFaV2IxTXhXWGhYYTFwVFlXczFhRlp0TVZOVFJsVjRXa1YwVTAxWVFraFhhMlEwWVVVeFNHUkVUbGRpVkVJMFdrUkdTbVZHVW5WVmJHUm9UV3hLV1ZkWE1UUlpWbVJIWWtoS1dHSlZXbkZWYlhoaFpVWldkR1JFUW1oTlJFWllXVEJhYzFkck1VZFhia3BYWVRGV05GbDZSa3RqVmxaeldrVTFhV0pYWjNsV01WcHJUa1pOZUZkc2FGUmhNbmhUV1d0YVlWZEdVbFZTYTNScFRWWndWbFZYTVVkaFJURnlUbGh3V0dFeWFGUlpWRVpMWkVaV2RWRnNaR2xTYmtKb1ZrWmFZVmxYVFhoalJWWldZbGQ0VDFacVJrcGtNVnBWVTJwQ2FFMXJXbnBWTVdoellVWktkRlZzV2xkaVJuQXpWRlJHYTFZeFpIVmFSbVJPVm01Q1YxWlhNVFJoTWtaWFYyNUthbEpYZUZsV2JYaGhZVVphUlZKc1RtcE5WVFV4VmtjeGIxUnJNWFZoUm14WVZqTm9kbGxxU2s5ak1WWjFVMjFHVTFkRlNucFdWekI0VlRGa2MySklTbGhpUlRWdlZtMTBjMDVzYkZaWGJUbFlVbXhzTmxsVmFFdFhiVVp5VjI1S1ZtRnJjRXhWTVZwVFpFZEdSMVJ0ZUdsWFIyaG9WbTE0YW1ReVZrWk5TR1JPVjBVMVdGbHRlRXRqTVZaeFZHeE9XRlpzV2pCYVZXaHJWR3hhYzFkc2JHRlNWMDB4Vm1wS1MxWnRUa2RqUm5CWFZqRktNbFp0Y0V0U01rNXpXa2hLYkZKc2NIQldNR1J2VkZaYWRHVkhSbFJOVm5CWFZGWldWMVJzU2tWUlZHczk=